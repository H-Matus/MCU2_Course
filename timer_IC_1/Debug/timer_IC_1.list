
timer_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e4  080018e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080018f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080018f4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009183  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001568  00000000  00000000  000291bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015730  00000000  00000000  0002b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009959  00000000  00000000  00040fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089981  00000000  00000000  0004a919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d429a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002534  00000000  00000000  000d42ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080018c8 	.word	0x080018c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080018c8 	.word	0x080018c8

080001d4 <SysTick_Handler>:
#include <main.h>

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001d8:	f000 f9d8 	bl	800058c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001dc:	f000 fb07 	bl	80007ee <HAL_SYSTICK_IRQHandler>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htimer2);
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <TIM2_IRQHandler+0x10>)
 80001ea:	f000 ffc0 	bl	800116e <HAL_TIM_IRQHandler>
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <main>:
void LSE_Configuration(void);

TIM_HandleTypeDef htimer2;

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_Init();
 80001fc:	f000 f974 	bl	80004e8 <HAL_Init>

	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000200:	2032      	movs	r0, #50	; 0x32
 8000202:	f000 f807 	bl	8000214 <SystemClockConfig>

	GPIO_Init();
 8000206:	f000 f861 	bl	80002cc <GPIO_Init>

    TIMER2_Init();
 800020a:	f000 f883 	bl	8000314 <TIMER2_Init>

    LSE_Configuration();
 800020e:	f000 f8b3 	bl	8000378 <LSE_Configuration>

    while(1) {}
 8000212:	e7fe      	b.n	8000212 <main+0x1a>

08000214 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig( uint8_t clock_freq )
{
 8000214:	b480      	push	{r7}
 8000216:	b095      	sub	sp, #84	; 0x54
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    RCC_OscInitTypeDef Osc_Init;
    RCC_ClkInitTypeDef Clk_Init;

    Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	623b      	str	r3, [r7, #32]
    Osc_Init.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
    Osc_Init.HSICalibrationValue = 16;
 8000226:	2310      	movs	r3, #16
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
    Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
    Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch(clock_freq)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b78      	cmp	r3, #120	; 0x78
 8000236:	d02e      	beq.n	8000296 <SystemClockConfig+0x82>
 8000238:	2b78      	cmp	r3, #120	; 0x78
 800023a:	dc41      	bgt.n	80002c0 <SystemClockConfig+0xac>
 800023c:	2b32      	cmp	r3, #50	; 0x32
 800023e:	d002      	beq.n	8000246 <SystemClockConfig+0x32>
 8000240:	2b54      	cmp	r3, #84	; 0x54
 8000242:	d014      	beq.n	800026e <SystemClockConfig+0x5a>
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
            break;
        }
        default:
        {
            return;
 8000244:	e03c      	b.n	80002c0 <SystemClockConfig+0xac>
            Osc_Init.PLL.PLLM = 8;
 8000246:	2308      	movs	r3, #8
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 50;
 800024a:	2332      	movs	r3, #50	; 0x32
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800024e:	2302      	movs	r3, #2
 8000250:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 8000252:	2302      	movs	r3, #2
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000256:	230f      	movs	r3, #15
 8000258:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000266:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	61fb      	str	r3, [r7, #28]
            break;
 800026c:	e029      	b.n	80002c2 <SystemClockConfig+0xae>
            Osc_Init.PLL.PLLM = 8;
 800026e:	2308      	movs	r3, #8
 8000270:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 84;
 8000272:	2354      	movs	r3, #84	; 0x54
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 800027a:	2302      	movs	r3, #2
 800027c:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800027e:	230f      	movs	r3, #15
 8000280:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028e:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
            break;
 8000294:	e015      	b.n	80002c2 <SystemClockConfig+0xae>
            Osc_Init.PLL.PLLM = 8;
 8000296:	2308      	movs	r3, #8
 8000298:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 120;
 800029a:	2378      	movs	r3, #120	; 0x78
 800029c:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002a6:	230f      	movs	r3, #15
 80002a8:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80002b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80002b6:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002bc:	61fb      	str	r3, [r7, #28]
            break;
 80002be:	e000      	b.n	80002c2 <SystemClockConfig+0xae>
            return;
 80002c0:	bf00      	nop
        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

        /* SysTick_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
    }
}
 80002c2:	3754      	adds	r7, #84	; 0x54
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <GPIO_Init>:

void GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	2300      	movs	r3, #0
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <GPIO_Init+0x40>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a0c      	ldr	r2, [pc, #48]	; (800030c <GPIO_Init+0x40>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <GPIO_Init+0x40>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80002ee:	2320      	movs	r3, #32
 80002f0:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002f2:	2301      	movs	r3, #1
 80002f4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4619      	mov	r1, r3
 80002fe:	4804      	ldr	r0, [pc, #16]	; (8000310 <GPIO_Init+0x44>)
 8000300:	f000 fa82 	bl	8000808 <HAL_GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40023800 	.word	0x40023800
 8000310:	40020000 	.word	0x40020000

08000314 <TIMER2_Init>:

void TIMER2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
    TIM_IC_InitTypeDef timer2IC_Config;

    htimer2.Instance = TIM2;
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <TIMER2_Init+0x60>)
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	601a      	str	r2, [r3, #0]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <TIMER2_Init+0x60>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = 0xFFFFFFFF;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <TIMER2_Init+0x60>)
 800032a:	f04f 32ff 	mov.w	r2, #4294967295
 800032e:	60da      	str	r2, [r3, #12]
    htimer2.Init.Prescaler = 1;
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <TIMER2_Init+0x60>)
 8000332:	2201      	movs	r2, #1
 8000334:	605a      	str	r2, [r3, #4]
    if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK )
 8000336:	480f      	ldr	r0, [pc, #60]	; (8000374 <TIMER2_Init+0x60>)
 8000338:	f000 feca 	bl	80010d0 <HAL_TIM_IC_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <TIMER2_Init+0x32>
    {
        Error_handler();
 8000342:	f000 f833 	bl	80003ac <Error_handler>
    }

    timer2IC_Config.ICFilter = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
    timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 800034a:	2300      	movs	r3, #0
 800034c:	603b      	str	r3, [r7, #0]
    timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
    timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000352:	2301      	movs	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
    if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK )
 8000356:	463b      	mov	r3, r7
 8000358:	2200      	movs	r2, #0
 800035a:	4619      	mov	r1, r3
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <TIMER2_Init+0x60>)
 800035e:	f001 f80e 	bl	800137e <HAL_TIM_IC_ConfigChannel>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <TIMER2_Init+0x58>
    {
        Error_handler();
 8000368:	f000 f820 	bl	80003ac <Error_handler>
    }

}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028

08000378 <LSE_Configuration>:

void LSE_Configuration(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08c      	sub	sp, #48	; 0x30
 800037c:	af00      	add	r7, sp, #0
    /* Activating LSE oscillator */
    RCC_OscInitTypeDef Osc_Init;

    Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800037e:	2304      	movs	r3, #4
 8000380:	603b      	str	r3, [r7, #0]
    Osc_Init.LSEState = RCC_LSE_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]

    if ( HAL_RCC_OscConfig(&Osc_Init) != HAL_OK )
 8000386:	463b      	mov	r3, r7
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fbc1 	bl	8000b10 <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <LSE_Configuration+0x20>
    {
        Error_handler();
 8000394:	f000 f80a 	bl	80003ac <Error_handler>
    }

    /* Supplying the LSE oscillator via GPIO */
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fe2e 	bl	8001000 <HAL_RCC_MCOConfig>

}
 80003a4:	bf00      	nop
 80003a6:	3730      	adds	r7, #48	; 0x30
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <Error_handler>:

void Error_handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	while(1);
 80003b0:	e7fe      	b.n	80003b0 <Error_handler+0x4>
	...

080003b4 <HAL_MspInit>:


#include <main.h>

void HAL_MspInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003b8:	2003      	movs	r0, #3
 80003ba:	f000 f9d7 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <HAL_MspInit+0x40>)
 80003c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <HAL_MspInit+0x40>)
 80003c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80003c8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	f06f 000b 	mvn.w	r0, #11
 80003d2:	f000 f9d6 	bl	8000782 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	f06f 000a 	mvn.w	r0, #10
 80003de:	f000 f9d0 	bl	8000782 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	f06f 0009 	mvn.w	r0, #9
 80003ea:	f000 f9ca 	bl	8000782 <HAL_NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htimer)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef tim2ch1_gpio;

    /* 1. Enable the clock for timer 2: */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 8000406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000408:	4a17      	ldr	r2, [pc, #92]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6413      	str	r3, [r2, #64]	; 0x40
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 8000412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a10      	ldr	r2, [pc, #64]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_TIM_IC_MspInit+0x70>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]

    /* 2. Configure a gpio to behave as timer2 channel 1 */
    tim2ch1_gpio.Pin = GPIO_PIN_0;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
    tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 800043c:	2302      	movs	r3, #2
 800043e:	61bb      	str	r3, [r7, #24]
    tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8000440:	2301      	movs	r3, #1
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	4808      	ldr	r0, [pc, #32]	; (800046c <HAL_TIM_IC_MspInit+0x74>)
 800044c:	f000 f9dc 	bl	8000808 <HAL_GPIO_Init>
    
    /* 3. nvic settings for IRQ */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	210f      	movs	r1, #15
 8000454:	201c      	movs	r0, #28
 8000456:	f000 f994 	bl	8000782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800045a:	201c      	movs	r0, #28
 800045c:	f000 f9ad 	bl	80007ba <HAL_NVIC_EnableIRQ>

 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	; 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40023800 	.word	0x40023800
 800046c:	40020000 	.word	0x40020000

08000470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <SystemInit+0x20>)
 8000476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800047a:	4a05      	ldr	r2, [pc, #20]	; (8000490 <SystemInit+0x20>)
 800047c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800049a:	490e      	ldr	r1, [pc, #56]	; (80004d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800049c:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004b0:	4c0b      	ldr	r4, [pc, #44]	; (80004e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004be:	f7ff ffd7 	bl	8000470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c2:	f001 f9dd 	bl	8001880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c6:	f7ff fe97 	bl	80001f8 <main>
  bx  lr    
 80004ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004d8:	080018e8 	.word	0x080018e8
  ldr r2, =_sbss
 80004dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004e0:	20000074 	.word	0x20000074

080004e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC_IRQHandler>
	...

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f92b 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f7ff ff4a 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f943 	bl	80007d6 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90b 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000070 	.word	0x20000070

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000070 	.word	0x20000070

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <__NVIC_EnableIRQ+0x38>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff29 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff3e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff31 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffa2 	bl	8000728 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007f2:	f000 f802 	bl	80007fa <HAL_SYSTICK_Callback>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	e159      	b.n	8000ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000824:	2201      	movs	r2, #1
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8148 	bne.w	8000ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	2b01      	cmp	r3, #1
 800084c:	d005      	beq.n	800085a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000856:	2b02      	cmp	r3, #2
 8000858:	d130      	bne.n	80008bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	2203      	movs	r2, #3
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4013      	ands	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f003 0201 	and.w	r2, r3, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d017      	beq.n	80008f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d123      	bne.n	800094c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	08da      	lsrs	r2, r3, #3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3208      	adds	r2, #8
 800090c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	220f      	movs	r2, #15
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4013      	ands	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	691a      	ldr	r2, [r3, #16]
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4313      	orrs	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3208      	adds	r2, #8
 8000946:	69b9      	ldr	r1, [r7, #24]
 8000948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 0203 	and.w	r2, r3, #3
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80a2 	beq.w	8000ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b57      	ldr	r3, [pc, #348]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009aa:	4a52      	ldr	r2, [pc, #328]	; (8000af4 <HAL_GPIO_Init+0x2ec>)
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <HAL_GPIO_Init+0x2f0>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x202>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <HAL_GPIO_Init+0x2f4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x1fe>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a47      	ldr	r2, [pc, #284]	; (8000b00 <HAL_GPIO_Init+0x2f8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x1fa>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x1f6>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a45      	ldr	r2, [pc, #276]	; (8000b08 <HAL_GPIO_Init+0x300>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x1f2>
 80009f6:	2304      	movs	r3, #4
 80009f8:	e008      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fe:	2303      	movs	r3, #3
 8000a00:	e004      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e002      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	f002 0203 	and.w	r2, r2, #3
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4093      	lsls	r3, r2
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a1c:	4935      	ldr	r1, [pc, #212]	; (8000af4 <HAL_GPIO_Init+0x2ec>)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4013      	ands	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a78:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa2:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_GPIO_Init+0x304>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	f67f aea2 	bls.w	8000824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e267      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d075      	beq.n	8000c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2e:	4b88      	ldr	r3, [pc, #544]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d00c      	beq.n	8000b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3a:	4b85      	ldr	r3, [pc, #532]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d112      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b46:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b52:	d10b      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d05b      	beq.n	8000c18 <HAL_RCC_OscConfig+0x108>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d157      	bne.n	8000c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e242      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d106      	bne.n	8000b84 <HAL_RCC_OscConfig+0x74>
 8000b76:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a75      	ldr	r2, [pc, #468]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e01d      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x98>
 8000b8e:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a6f      	ldr	r2, [pc, #444]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a6c      	ldr	r2, [pc, #432]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000ba8:	4b69      	ldr	r3, [pc, #420]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a68      	ldr	r2, [pc, #416]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a65      	ldr	r2, [pc, #404]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcf4 	bl	80005b4 <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fcf0 	bl	80005b4 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e207      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0xc0>
 8000bee:	e014      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fce0 	bl	80005b4 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcdc 	bl	80005b4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e1f3      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	4b51      	ldr	r3, [pc, #324]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xe8>
 8000c16:	e000      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d11c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d116      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1c7      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	e03a      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d020      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_RCC_OscConfig+0x244>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c86:	f7ff fc95 	bl	80005b4 <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc91 	bl	80005b4 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e1a8      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4925      	ldr	r1, [pc, #148]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_RCC_OscConfig+0x244>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc74 	bl	80005b4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc70 	bl	80005b4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e187      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d036      	beq.n	8000d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d016      	beq.n	8000d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_RCC_OscConfig+0x248>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc54 	bl	80005b4 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc50 	bl	80005b4 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e167      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_RCC_OscConfig+0x240>)
 8000d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x200>
 8000d2e:	e01b      	b.n	8000d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_RCC_OscConfig+0x248>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d36:	f7ff fc3d 	bl	80005b4 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	e00e      	b.n	8000d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc39 	bl	80005b4 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d907      	bls.n	8000d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e150      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
 8000d50:	40023800 	.word	0x40023800
 8000d54:	42470000 	.word	0x42470000
 8000d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4b88      	ldr	r3, [pc, #544]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1ea      	bne.n	8000d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 8097 	beq.w	8000ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b81      	ldr	r3, [pc, #516]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b7d      	ldr	r3, [pc, #500]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a7c      	ldr	r2, [pc, #496]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b7a      	ldr	r3, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da2:	2301      	movs	r3, #1
 8000da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	4b77      	ldr	r3, [pc, #476]	; (8000f84 <HAL_RCC_OscConfig+0x474>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d118      	bne.n	8000de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db2:	4b74      	ldr	r3, [pc, #464]	; (8000f84 <HAL_RCC_OscConfig+0x474>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a73      	ldr	r2, [pc, #460]	; (8000f84 <HAL_RCC_OscConfig+0x474>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fbf9 	bl	80005b4 <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc6:	f7ff fbf5 	bl	80005b4 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e10c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd8:	4b6a      	ldr	r3, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x474>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d106      	bne.n	8000dfa <HAL_RCC_OscConfig+0x2ea>
 8000dec:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df0:	4a63      	ldr	r2, [pc, #396]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6713      	str	r3, [r2, #112]	; 0x70
 8000df8:	e01c      	b.n	8000e34 <HAL_RCC_OscConfig+0x324>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x30c>
 8000e02:	4b5f      	ldr	r3, [pc, #380]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e06:	4a5e      	ldr	r2, [pc, #376]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0e:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e12:	4a5b      	ldr	r2, [pc, #364]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0x324>
 8000e1c:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e20:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6713      	str	r3, [r2, #112]	; 0x70
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2c:	4a54      	ldr	r2, [pc, #336]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e2e:	f023 0304 	bic.w	r3, r3, #4
 8000e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e3c:	f7ff fbba 	bl	80005b4 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e42:	e00a      	b.n	8000e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f7ff fbb6 	bl	80005b4 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e0cb      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0ee      	beq.n	8000e44 <HAL_RCC_OscConfig+0x334>
 8000e66:	e014      	b.n	8000e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e68:	f7ff fba4 	bl	80005b4 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6e:	e00a      	b.n	8000e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e70:	f7ff fba0 	bl	80005b4 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e0b5      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e86:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1ee      	bne.n	8000e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80a1 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d05c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d141      	bne.n	8000f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <HAL_RCC_OscConfig+0x478>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fb74 	bl	80005b4 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed0:	f7ff fb70 	bl	80005b4 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e087      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	085b      	lsrs	r3, r3, #1
 8000f06:	3b01      	subs	r3, #1
 8000f08:	041b      	lsls	r3, r3, #16
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	061b      	lsls	r3, r3, #24
 8000f12:	491b      	ldr	r1, [pc, #108]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_RCC_OscConfig+0x478>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fb49 	bl	80005b4 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f26:	f7ff fb45 	bl	80005b4 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e05c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x416>
 8000f44:	e054      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_RCC_OscConfig+0x478>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fb32 	bl	80005b4 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f54:	f7ff fb2e 	bl	80005b4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e045      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_RCC_OscConfig+0x470>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x444>
 8000f72:	e03d      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d107      	bne.n	8000f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e038      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000
 8000f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_RCC_OscConfig+0x4ec>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d028      	beq.n	8000fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d121      	bne.n	8000fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d11a      	bne.n	8000fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d111      	bne.n	8000fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d107      	bne.n	8000fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d129      	bne.n	8001066 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	481f      	ldr	r0, [pc, #124]	; (80010c8 <HAL_RCC_MCOConfig+0xc8>)
 800104c:	f7ff fbdc 	bl	8000808 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	430b      	orrs	r3, r1
 800105e:	4919      	ldr	r1, [pc, #100]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001064:	e029      	b.n	80010ba <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <HAL_RCC_MCOConfig+0xcc>)
 80010a0:	f7ff fbb2 	bl	8000808 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	00d9      	lsls	r1, r3, #3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	430b      	orrs	r3, r1
 80010b4:	4903      	ldr	r1, [pc, #12]	; (80010c4 <HAL_RCC_MCOConfig+0xc4>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	608b      	str	r3, [r1, #8]
}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020800 	.word	0x40020800

080010d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e041      	b.n	8001166 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff f97e 	bl	80003f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f000 fa04 	bl	800151c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b02      	cmp	r3, #2
 8001182:	d122      	bne.n	80011ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d11b      	bne.n	80011ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f06f 0202 	mvn.w	r2, #2
 800119a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f994 	bl	80014de <HAL_TIM_IC_CaptureCallback>
 80011b6:	e005      	b.n	80011c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f986 	bl	80014ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f997 	bl	80014f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d122      	bne.n	800121e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d11b      	bne.n	800121e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f06f 0204 	mvn.w	r2, #4
 80011ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f96a 	bl	80014de <HAL_TIM_IC_CaptureCallback>
 800120a:	e005      	b.n	8001218 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f95c 	bl	80014ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f96d 	bl	80014f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b08      	cmp	r3, #8
 800122a:	d122      	bne.n	8001272 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11b      	bne.n	8001272 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f06f 0208 	mvn.w	r2, #8
 8001242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f940 	bl	80014de <HAL_TIM_IC_CaptureCallback>
 800125e:	e005      	b.n	800126c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f932 	bl	80014ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f943 	bl	80014f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b10      	cmp	r3, #16
 800127e:	d122      	bne.n	80012c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b10      	cmp	r3, #16
 800128c:	d11b      	bne.n	80012c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f06f 0210 	mvn.w	r2, #16
 8001296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2208      	movs	r2, #8
 800129c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f916 	bl	80014de <HAL_TIM_IC_CaptureCallback>
 80012b2:	e005      	b.n	80012c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f908 	bl	80014ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f919 	bl	80014f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d10e      	bne.n	80012f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f06f 0201 	mvn.w	r2, #1
 80012ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8e2 	bl	80014b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fc:	2b80      	cmp	r3, #128	; 0x80
 80012fe:	d10e      	bne.n	800131e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b80      	cmp	r3, #128	; 0x80
 800130c:	d107      	bne.n	800131e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 faa7 	bl	800186c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d10e      	bne.n	800134a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	2b40      	cmp	r3, #64	; 0x40
 8001338:	d107      	bne.n	800134a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f8de 	bl	8001506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b20      	cmp	r3, #32
 8001356:	d10e      	bne.n	8001376 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b20      	cmp	r3, #32
 8001364:	d107      	bne.n	8001376 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0220 	mvn.w	r2, #32
 800136e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fa71 	bl	8001858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_TIM_IC_ConfigChannel+0x1e>
 8001398:	2302      	movs	r3, #2
 800139a:	e088      	b.n	80014ae <HAL_TIM_IC_ConfigChannel+0x130>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11b      	bne.n	80013e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f000 f92f 	bl	800161c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 020c 	bic.w	r2, r2, #12
 80013cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6999      	ldr	r1, [r3, #24]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	619a      	str	r2, [r3, #24]
 80013e0:	e060      	b.n	80014a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d11c      	bne.n	8001422 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f000 f978 	bl	80016ec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800140a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6999      	ldr	r1, [r3, #24]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	021a      	lsls	r2, r3, #8
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	619a      	str	r2, [r3, #24]
 8001420:	e040      	b.n	80014a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d11b      	bne.n	8001460 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f000 f995 	bl	8001766 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020c 	bic.w	r2, r2, #12
 800144a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69d9      	ldr	r1, [r3, #28]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	61da      	str	r2, [r3, #28]
 800145e:	e021      	b.n	80014a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d11c      	bne.n	80014a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f000 f9b2 	bl	80017de <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001488:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69d9      	ldr	r1, [r3, #28]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	021a      	lsls	r2, r3, #8
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	61da      	str	r2, [r3, #28]
 800149e:	e001      	b.n	80014a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a34      	ldr	r2, [pc, #208]	; (8001600 <TIM_Base_SetConfig+0xe4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00f      	beq.n	8001554 <TIM_Base_SetConfig+0x38>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153a:	d00b      	beq.n	8001554 <TIM_Base_SetConfig+0x38>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a31      	ldr	r2, [pc, #196]	; (8001604 <TIM_Base_SetConfig+0xe8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <TIM_Base_SetConfig+0x38>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a30      	ldr	r2, [pc, #192]	; (8001608 <TIM_Base_SetConfig+0xec>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d003      	beq.n	8001554 <TIM_Base_SetConfig+0x38>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <TIM_Base_SetConfig+0xf0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d108      	bne.n	8001566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a25      	ldr	r2, [pc, #148]	; (8001600 <TIM_Base_SetConfig+0xe4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01b      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d017      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <TIM_Base_SetConfig+0xe8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <TIM_Base_SetConfig+0xec>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00f      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <TIM_Base_SetConfig+0xf0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00b      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <TIM_Base_SetConfig+0xf4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <TIM_Base_SetConfig+0xf8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d003      	beq.n	80015a6 <TIM_Base_SetConfig+0x8a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <TIM_Base_SetConfig+0xfc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d108      	bne.n	80015b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <TIM_Base_SetConfig+0xe4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d103      	bne.n	80015ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	615a      	str	r2, [r3, #20]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40010000 	.word	0x40010000
 8001604:	40000400 	.word	0x40000400
 8001608:	40000800 	.word	0x40000800
 800160c:	40000c00 	.word	0x40000c00
 8001610:	40014000 	.word	0x40014000
 8001614:	40014400 	.word	0x40014400
 8001618:	40014800 	.word	0x40014800

0800161c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f023 0201 	bic.w	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <TIM_TI1_SetConfig+0xbc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <TIM_TI1_SetConfig+0x56>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001650:	d00f      	beq.n	8001672 <TIM_TI1_SetConfig+0x56>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <TIM_TI1_SetConfig+0xc0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00b      	beq.n	8001672 <TIM_TI1_SetConfig+0x56>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <TIM_TI1_SetConfig+0xc4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <TIM_TI1_SetConfig+0x56>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <TIM_TI1_SetConfig+0xc8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d003      	beq.n	8001672 <TIM_TI1_SetConfig+0x56>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <TIM_TI1_SetConfig+0xcc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <TIM_TI1_SetConfig+0x5a>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <TIM_TI1_SetConfig+0x5c>
 8001676:	2300      	movs	r3, #0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e003      	b.n	8001696 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800169c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f023 030a 	bic.w	r3, r3, #10
 80016b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 030a 	and.w	r3, r3, #10
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	621a      	str	r2, [r3, #32]
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40000c00 	.word	0x40000c00
 80016e8:	40014000 	.word	0x40014000

080016ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	f023 0210 	bic.w	r2, r3, #16
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800172a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	031b      	lsls	r3, r3, #12
 8001730:	b29b      	uxth	r3, r3
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800173e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	621a      	str	r2, [r3, #32]
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80017b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	621a      	str	r2, [r3, #32]
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800180a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800181c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	031b      	lsls	r3, r3, #12
 8001822:	b29b      	uxth	r3, r3
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001830:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	031b      	lsls	r3, r3, #12
 8001836:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	621a      	str	r2, [r3, #32]
}
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <__libc_init_array>:
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4d0d      	ldr	r5, [pc, #52]	; (80018b8 <__libc_init_array+0x38>)
 8001884:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <__libc_init_array+0x3c>)
 8001886:	1b64      	subs	r4, r4, r5
 8001888:	10a4      	asrs	r4, r4, #2
 800188a:	2600      	movs	r6, #0
 800188c:	42a6      	cmp	r6, r4
 800188e:	d109      	bne.n	80018a4 <__libc_init_array+0x24>
 8001890:	4d0b      	ldr	r5, [pc, #44]	; (80018c0 <__libc_init_array+0x40>)
 8001892:	4c0c      	ldr	r4, [pc, #48]	; (80018c4 <__libc_init_array+0x44>)
 8001894:	f000 f818 	bl	80018c8 <_init>
 8001898:	1b64      	subs	r4, r4, r5
 800189a:	10a4      	asrs	r4, r4, #2
 800189c:	2600      	movs	r6, #0
 800189e:	42a6      	cmp	r6, r4
 80018a0:	d105      	bne.n	80018ae <__libc_init_array+0x2e>
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
 80018a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a8:	4798      	blx	r3
 80018aa:	3601      	adds	r6, #1
 80018ac:	e7ee      	b.n	800188c <__libc_init_array+0xc>
 80018ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b2:	4798      	blx	r3
 80018b4:	3601      	adds	r6, #1
 80018b6:	e7f2      	b.n	800189e <__libc_init_array+0x1e>
 80018b8:	080018e0 	.word	0x080018e0
 80018bc:	080018e0 	.word	0x080018e0
 80018c0:	080018e0 	.word	0x080018e0
 80018c4:	080018e4 	.word	0x080018e4

080018c8 <_init>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr

080018d4 <_fini>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	bf00      	nop
 80018d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018da:	bc08      	pop	{r3}
 80018dc:	469e      	mov	lr, r3
 80018de:	4770      	bx	lr
