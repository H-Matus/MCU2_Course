
timer_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000113c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d0  080012d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012d0  080012d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012d0  080012d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d0  080012d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080012e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080012e4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008797  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a9  00000000  00000000  000287d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00029a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015548  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c26  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896d6  00000000  00000000  00048c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d231c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000231c  00000000  00000000  000d236c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080012b8 	.word	0x080012b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080012b8 	.word	0x080012b8

080001d4 <SysTick_Handler>:
#include <main.h>

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001d8:	f000 f9bc 	bl	8000554 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001dc:	f000 fadf 	bl	800079e <HAL_SYSTICK_IRQHandler>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htimer2);
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <TIM2_IRQHandler+0x10>)
 80001ea:	f000 fcb8 	bl	8000b5e <HAL_TIM_IRQHandler>
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <main>:
void TIMER2_Init(void);

TIM_HandleTypeDef htimer2;

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_Init();
 80001fc:	f000 f958 	bl	80004b0 <HAL_Init>

	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000200:	2032      	movs	r0, #50	; 0x32
 8000202:	f000 f805 	bl	8000210 <SystemClockConfig>

	GPIO_Init();
 8000206:	f000 f85f 	bl	80002c8 <GPIO_Init>

    TIMER2_Init();
 800020a:	f000 f881 	bl	8000310 <TIMER2_Init>

    while(1);
 800020e:	e7fe      	b.n	800020e <main+0x16>

08000210 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig( uint8_t clock_freq )
{
 8000210:	b480      	push	{r7}
 8000212:	b095      	sub	sp, #84	; 0x54
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
    RCC_OscInitTypeDef Osc_Init;
    RCC_ClkInitTypeDef Clk_Init;

    Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	623b      	str	r3, [r7, #32]
    Osc_Init.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
    Osc_Init.HSICalibrationValue = 16;
 8000222:	2310      	movs	r3, #16
 8000224:	633b      	str	r3, [r7, #48]	; 0x30
    Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
    Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022a:	2300      	movs	r3, #0
 800022c:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch(clock_freq)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b78      	cmp	r3, #120	; 0x78
 8000232:	d02e      	beq.n	8000292 <SystemClockConfig+0x82>
 8000234:	2b78      	cmp	r3, #120	; 0x78
 8000236:	dc41      	bgt.n	80002bc <SystemClockConfig+0xac>
 8000238:	2b32      	cmp	r3, #50	; 0x32
 800023a:	d002      	beq.n	8000242 <SystemClockConfig+0x32>
 800023c:	2b54      	cmp	r3, #84	; 0x54
 800023e:	d014      	beq.n	800026a <SystemClockConfig+0x5a>
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
            break;
        }
        default:
        {
            return;
 8000240:	e03c      	b.n	80002bc <SystemClockConfig+0xac>
            Osc_Init.PLL.PLLM = 8;
 8000242:	2308      	movs	r3, #8
 8000244:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 50;
 8000246:	2332      	movs	r3, #50	; 0x32
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800024a:	2302      	movs	r3, #2
 800024c:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 800024e:	2302      	movs	r3, #2
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000252:	230f      	movs	r3, #15
 8000254:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000262:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	61fb      	str	r3, [r7, #28]
            break;
 8000268:	e029      	b.n	80002be <SystemClockConfig+0xae>
            Osc_Init.PLL.PLLM = 8;
 800026a:	2308      	movs	r3, #8
 800026c:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 84;
 800026e:	2354      	movs	r3, #84	; 0x54
 8000270:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 8000276:	2302      	movs	r3, #2
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800027a:	230f      	movs	r3, #15
 800027c:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028a:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
            break;
 8000290:	e015      	b.n	80002be <SystemClockConfig+0xae>
            Osc_Init.PLL.PLLM = 8;
 8000292:	2308      	movs	r3, #8
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 120;
 8000296:	2378      	movs	r3, #120	; 0x78
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 800029e:	2302      	movs	r3, #2
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002a2:	230f      	movs	r3, #15
 80002a4:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80002ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80002b2:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b8:	61fb      	str	r3, [r7, #28]
            break;
 80002ba:	e000      	b.n	80002be <SystemClockConfig+0xae>
            return;
 80002bc:	bf00      	nop
        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

        /* SysTick_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
    }
}
 80002be:	3754      	adds	r7, #84	; 0x54
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <GPIO_Init>:

void GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	2300      	movs	r3, #0
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <GPIO_Init+0x40>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <GPIO_Init+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6313      	str	r3, [r2, #48]	; 0x30
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <GPIO_Init+0x40>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80002ea:	2320      	movs	r3, #32
 80002ec:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	4804      	ldr	r0, [pc, #16]	; (800030c <GPIO_Init+0x44>)
 80002fc:	f000 fa5c 	bl	80007b8 <HAL_GPIO_Init>
}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000

08000310 <TIMER2_Init>:

void TIMER2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
    TIM_IC_InitTypeDef timer2IC_Config;

    htimer2.Instance = TIM2;
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <TIMER2_Init+0x60>)
 8000318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031c:	601a      	str	r2, [r3, #0]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <TIMER2_Init+0x60>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = 0xFFFFFFFF;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <TIMER2_Init+0x60>)
 8000326:	f04f 32ff 	mov.w	r2, #4294967295
 800032a:	60da      	str	r2, [r3, #12]
    htimer2.Init.Prescaler = 1;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <TIMER2_Init+0x60>)
 800032e:	2201      	movs	r2, #1
 8000330:	605a      	str	r2, [r3, #4]
    if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK )
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <TIMER2_Init+0x60>)
 8000334:	f000 fbc4 	bl	8000ac0 <HAL_TIM_IC_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <TIMER2_Init+0x32>
    {
        Error_handler();
 800033e:	f000 f819 	bl	8000374 <Error_handler>
    }

    timer2IC_Config.ICFilter = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
    timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
    timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
    timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800034e:	2301      	movs	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
    if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK )
 8000352:	463b      	mov	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <TIMER2_Init+0x60>)
 800035a:	f000 fd08 	bl	8000d6e <HAL_TIM_IC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <TIMER2_Init+0x58>
    {
        Error_handler();
 8000364:	f000 f806 	bl	8000374 <Error_handler>
    }

}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028

08000374 <Error_handler>:

void Error_handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	while(1);
 8000378:	e7fe      	b.n	8000378 <Error_handler+0x4>
	...

0800037c <HAL_MspInit>:


#include <main.h>

void HAL_MspInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000380:	2003      	movs	r0, #3
 8000382:	f000 f9cb 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <HAL_MspInit+0x40>)
 8000388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038a:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <HAL_MspInit+0x40>)
 800038c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000390:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	f06f 000b 	mvn.w	r0, #11
 800039a:	f000 f9ca 	bl	8000732 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	f06f 000a 	mvn.w	r0, #10
 80003a6:	f000 f9c4 	bl	8000732 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	f06f 0009 	mvn.w	r0, #9
 80003b2:	f000 f9be 	bl	8000732 <HAL_NVIC_SetPriority>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htimer)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef tim2ch1_gpio;

    /* 1. Enable the clock for timer 2: */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6413      	str	r3, [r2, #64]	; 0x40
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <HAL_TIM_IC_MspInit+0x70>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    /* 2. Configure a gpio to behave as timer2 channel 1 */
    tim2ch1_gpio.Pin = GPIO_PIN_0;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
    tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8000404:	2302      	movs	r3, #2
 8000406:	61bb      	str	r3, [r7, #24]
    tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8000408:	2301      	movs	r3, #1
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	4808      	ldr	r0, [pc, #32]	; (8000434 <HAL_TIM_IC_MspInit+0x74>)
 8000414:	f000 f9d0 	bl	80007b8 <HAL_GPIO_Init>
    
    /* 3. nvic settings for IRQ */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	210f      	movs	r1, #15
 800041c:	201c      	movs	r0, #28
 800041e:	f000 f988 	bl	8000732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000422:	201c      	movs	r0, #28
 8000424:	f000 f9a1 	bl	800076a <HAL_NVIC_EnableIRQ>

 8000428:	bf00      	nop
 800042a:	3728      	adds	r7, #40	; 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000

08000438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <SystemInit+0x20>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <SystemInit+0x20>)
 8000444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800045c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000462:	490e      	ldr	r1, [pc, #56]	; (800049c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000478:	4c0b      	ldr	r4, [pc, #44]	; (80004a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000486:	f7ff ffd7 	bl	8000438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f000 fef1 	bl	8001270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800048e:	f7ff feb3 	bl	80001f8 <main>
  bx  lr    
 8000492:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000494:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004a0:	080012d8 	.word	0x080012d8
  ldr r2, =_sbss
 80004a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a8:	20000074 	.word	0x20000074

080004ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC_IRQHandler>
	...

080004b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <HAL_Init+0x40>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <HAL_Init+0x40>)
 80004ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_Init+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <HAL_Init+0x40>)
 80004c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <HAL_Init+0x40>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d8:	2003      	movs	r0, #3
 80004da:	f000 f91f 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 f808 	bl	80004f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e4:	f7ff ff4a 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40023c00 	.word	0x40023c00

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_InitTick+0x54>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_InitTick+0x58>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f1 	udiv	r3, r3, r1
 800050e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f937 	bl	8000786 <HAL_SYSTICK_Config>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
 8000520:	e00e      	b.n	8000540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d80a      	bhi.n	800053e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	2200      	movs	r2, #0
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 f8ff 	bl	8000732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <HAL_InitTick+0x5c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800053a:	2300      	movs	r3, #0
 800053c:	e000      	b.n	8000540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000000 	.word	0x20000000
 800054c:	20000008 	.word	0x20000008
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000008 	.word	0x20000008
 8000578:	20000070 	.word	0x20000070

0800057c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	60d3      	str	r3, [r2, #12]
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__NVIC_GetPriorityGrouping+0x18>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	f003 0307 	and.w	r3, r3, #7
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db0b      	blt.n	800060a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 021f 	and.w	r2, r3, #31
 80005f8:	4907      	ldr	r1, [pc, #28]	; (8000618 <__NVIC_EnableIRQ+0x38>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	095b      	lsrs	r3, r3, #5
 8000600:	2001      	movs	r0, #1
 8000602:	fa00 f202 	lsl.w	r2, r0, r2
 8000606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e100 	.word	0xe000e100

0800061c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	db0a      	blt.n	8000646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	490c      	ldr	r1, [pc, #48]	; (8000668 <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	440b      	add	r3, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000644:	e00a      	b.n	800065c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	0112      	lsls	r2, r2, #4
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	440b      	add	r3, r1
 800065a:	761a      	strb	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000670:	b480      	push	{r7}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	f1c3 0307 	rsb	r3, r3, #7
 800068a:	2b04      	cmp	r3, #4
 800068c:	bf28      	it	cs
 800068e:	2304      	movcs	r3, #4
 8000690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3304      	adds	r3, #4
 8000696:	2b06      	cmp	r3, #6
 8000698:	d902      	bls.n	80006a0 <NVIC_EncodePriority+0x30>
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3b03      	subs	r3, #3
 800069e:	e000      	b.n	80006a2 <NVIC_EncodePriority+0x32>
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 32ff 	mov.w	r2, #4294967295
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43da      	mvns	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	401a      	ands	r2, r3
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b8:	f04f 31ff 	mov.w	r1, #4294967295
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	43d9      	mvns	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e8:	d301      	bcc.n	80006ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00f      	b.n	800070e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SysTick_Config+0x40>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f6:	210f      	movs	r1, #15
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f7ff ff8e 	bl	800061c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SysTick_Config+0x40>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <SysTick_Config+0x40>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff29 	bl	800057c <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff3e 	bl	80005c4 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ff8e 	bl	8000670 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff5d 	bl	800061c <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff31 	bl	80005e0 <__NVIC_EnableIRQ>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ffa2 	bl	80006d8 <SysTick_Config>
 8000794:	4603      	mov	r3, r0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007a2:	f000 f802 	bl	80007aa <HAL_SYSTICK_Callback>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	e159      	b.n	8000a88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d4:	2201      	movs	r2, #1
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f040 8148 	bne.w	8000a82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d005      	beq.n	800080a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000806:	2b02      	cmp	r3, #2
 8000808:	d130      	bne.n	800086c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	68da      	ldr	r2, [r3, #12]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	4313      	orrs	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	4013      	ands	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	f003 0201 	and.w	r2, r3, #1
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4313      	orrs	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b03      	cmp	r3, #3
 8000876:	d017      	beq.n	80008a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4013      	ands	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d123      	bne.n	80008fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	08da      	lsrs	r2, r3, #3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3208      	adds	r2, #8
 80008bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	220f      	movs	r2, #15
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	691a      	ldr	r2, [r3, #16]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3208      	adds	r2, #8
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0203 	and.w	r2, r3, #3
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 80a2 	beq.w	8000a82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <HAL_GPIO_Init+0x2e8>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <HAL_GPIO_Init+0x2e8>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <HAL_GPIO_Init+0x2e8>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095a:	4a52      	ldr	r2, [pc, #328]	; (8000aa4 <HAL_GPIO_Init+0x2ec>)
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	3302      	adds	r3, #2
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a49      	ldr	r2, [pc, #292]	; (8000aa8 <HAL_GPIO_Init+0x2f0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d019      	beq.n	80009ba <HAL_GPIO_Init+0x202>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a48      	ldr	r2, [pc, #288]	; (8000aac <HAL_GPIO_Init+0x2f4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x1fe>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a47      	ldr	r2, [pc, #284]	; (8000ab0 <HAL_GPIO_Init+0x2f8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x1fa>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a46      	ldr	r2, [pc, #280]	; (8000ab4 <HAL_GPIO_Init+0x2fc>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x1f6>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a45      	ldr	r2, [pc, #276]	; (8000ab8 <HAL_GPIO_Init+0x300>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x1f2>
 80009a6:	2304      	movs	r3, #4
 80009a8:	e008      	b.n	80009bc <HAL_GPIO_Init+0x204>
 80009aa:	2307      	movs	r3, #7
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x204>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x204>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x204>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x204>
 80009ba:	2300      	movs	r3, #0
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009cc:	4935      	ldr	r1, [pc, #212]	; (8000aa4 <HAL_GPIO_Init+0x2ec>)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <HAL_GPIO_Init+0x304>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a28:	4a24      	ldr	r2, [pc, #144]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	f67f aea2 	bls.w	80007d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e041      	b.n	8000b56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fc6a 	bl	80003c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2202      	movs	r2, #2
 8000af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3304      	adds	r3, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4610      	mov	r0, r2
 8000b00:	f000 fa04 	bl	8000f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d122      	bne.n	8000bba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d11b      	bne.n	8000bba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f06f 0202 	mvn.w	r2, #2
 8000b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f994 	bl	8000ece <HAL_TIM_IC_CaptureCallback>
 8000ba6:	e005      	b.n	8000bb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f986 	bl	8000eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f997 	bl	8000ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d122      	bne.n	8000c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d11b      	bne.n	8000c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f06f 0204 	mvn.w	r2, #4
 8000bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f96a 	bl	8000ece <HAL_TIM_IC_CaptureCallback>
 8000bfa:	e005      	b.n	8000c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f95c 	bl	8000eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f96d 	bl	8000ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d122      	bne.n	8000c62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d11b      	bne.n	8000c62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f06f 0208 	mvn.w	r2, #8
 8000c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2204      	movs	r2, #4
 8000c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f940 	bl	8000ece <HAL_TIM_IC_CaptureCallback>
 8000c4e:	e005      	b.n	8000c5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f932 	bl	8000eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 f943 	bl	8000ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d122      	bne.n	8000cb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	2b10      	cmp	r3, #16
 8000c7c:	d11b      	bne.n	8000cb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f06f 0210 	mvn.w	r2, #16
 8000c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f916 	bl	8000ece <HAL_TIM_IC_CaptureCallback>
 8000ca2:	e005      	b.n	8000cb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f908 	bl	8000eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f919 	bl	8000ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10e      	bne.n	8000ce2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f06f 0201 	mvn.w	r2, #1
 8000cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f8e2 	bl	8000ea6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cec:	2b80      	cmp	r3, #128	; 0x80
 8000cee:	d10e      	bne.n	8000d0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	2b80      	cmp	r3, #128	; 0x80
 8000cfc:	d107      	bne.n	8000d0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 faa7 	bl	800125c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d18:	2b40      	cmp	r3, #64	; 0x40
 8000d1a:	d10e      	bne.n	8000d3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	2b40      	cmp	r3, #64	; 0x40
 8000d28:	d107      	bne.n	8000d3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f8de 	bl	8000ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d10e      	bne.n	8000d66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d107      	bne.n	8000d66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f06f 0220 	mvn.w	r2, #32
 8000d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 fa71 	bl	8001248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e088      	b.n	8000e9e <HAL_TIM_IC_ConfigChannel+0x130>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d11b      	bne.n	8000dd2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f000 f92f 	bl	800100c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 020c 	bic.w	r2, r2, #12
 8000dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6999      	ldr	r1, [r3, #24]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	619a      	str	r2, [r3, #24]
 8000dd0:	e060      	b.n	8000e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d11c      	bne.n	8000e12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	f000 f978 	bl	80010dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6999      	ldr	r1, [r3, #24]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	021a      	lsls	r2, r3, #8
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	e040      	b.n	8000e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d11b      	bne.n	8000e50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	f000 f995 	bl	8001156 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	69da      	ldr	r2, [r3, #28]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020c 	bic.w	r2, r2, #12
 8000e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	69d9      	ldr	r1, [r3, #28]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	61da      	str	r2, [r3, #28]
 8000e4e:	e021      	b.n	8000e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d11c      	bne.n	8000e90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	f000 f9b2 	bl	80011ce <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000e78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	69d9      	ldr	r1, [r3, #28]
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	021a      	lsls	r2, r3, #8
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	61da      	str	r2, [r3, #28]
 8000e8e:	e001      	b.n	8000e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <TIM_Base_SetConfig+0xe4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00f      	beq.n	8000f44 <TIM_Base_SetConfig+0x38>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2a:	d00b      	beq.n	8000f44 <TIM_Base_SetConfig+0x38>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a31      	ldr	r2, [pc, #196]	; (8000ff4 <TIM_Base_SetConfig+0xe8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <TIM_Base_SetConfig+0x38>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <TIM_Base_SetConfig+0xec>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <TIM_Base_SetConfig+0x38>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <TIM_Base_SetConfig+0xf0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d108      	bne.n	8000f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <TIM_Base_SetConfig+0xe4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01b      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d017      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <TIM_Base_SetConfig+0xe8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <TIM_Base_SetConfig+0xec>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00f      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <TIM_Base_SetConfig+0xf0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00b      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <TIM_Base_SetConfig+0xf4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <TIM_Base_SetConfig+0xf8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d003      	beq.n	8000f96 <TIM_Base_SetConfig+0x8a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <TIM_Base_SetConfig+0xfc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d108      	bne.n	8000fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <TIM_Base_SetConfig+0xe4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d103      	bne.n	8000fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40000800 	.word	0x40000800
 8000ffc:	40000c00 	.word	0x40000c00
 8001000:	40014000 	.word	0x40014000
 8001004:	40014400 	.word	0x40014400
 8001008:	40014800 	.word	0x40014800

0800100c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f023 0201 	bic.w	r2, r3, #1
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <TIM_TI1_SetConfig+0xbc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <TIM_TI1_SetConfig+0x56>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d00f      	beq.n	8001062 <TIM_TI1_SetConfig+0x56>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <TIM_TI1_SetConfig+0xc0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00b      	beq.n	8001062 <TIM_TI1_SetConfig+0x56>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <TIM_TI1_SetConfig+0xc4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <TIM_TI1_SetConfig+0x56>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <TIM_TI1_SetConfig+0xc8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d003      	beq.n	8001062 <TIM_TI1_SetConfig+0x56>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <TIM_TI1_SetConfig+0xcc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <TIM_TI1_SetConfig+0x5a>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <TIM_TI1_SetConfig+0x5c>
 8001066:	2300      	movs	r3, #0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e003      	b.n	8001086 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800108c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	b2db      	uxtb	r3, r3
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4313      	orrs	r3, r2
 8001098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f023 030a 	bic.w	r3, r3, #10
 80010a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f003 030a 	and.w	r3, r3, #10
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	621a      	str	r2, [r3, #32]
}
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40000400 	.word	0x40000400
 80010d0:	40000800 	.word	0x40000800
 80010d4:	40000c00 	.word	0x40000c00
 80010d8:	40014000 	.word	0x40014000

080010dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	f023 0210 	bic.w	r2, r3, #16
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800111a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	031b      	lsls	r3, r3, #12
 8001120:	b29b      	uxth	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800112e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	621a      	str	r2, [r3, #32]
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001156:	b480      	push	{r7}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001192:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	b2db      	uxtb	r3, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80011a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	621a      	str	r2, [r3, #32]
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b087      	sub	sp, #28
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800120c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	031b      	lsls	r3, r3, #12
 8001212:	b29b      	uxth	r3, r3
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001220:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	031b      	lsls	r3, r3, #12
 8001226:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	621a      	str	r2, [r3, #32]
}
 800123c:	bf00      	nop
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <__libc_init_array>:
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	4d0d      	ldr	r5, [pc, #52]	; (80012a8 <__libc_init_array+0x38>)
 8001274:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <__libc_init_array+0x3c>)
 8001276:	1b64      	subs	r4, r4, r5
 8001278:	10a4      	asrs	r4, r4, #2
 800127a:	2600      	movs	r6, #0
 800127c:	42a6      	cmp	r6, r4
 800127e:	d109      	bne.n	8001294 <__libc_init_array+0x24>
 8001280:	4d0b      	ldr	r5, [pc, #44]	; (80012b0 <__libc_init_array+0x40>)
 8001282:	4c0c      	ldr	r4, [pc, #48]	; (80012b4 <__libc_init_array+0x44>)
 8001284:	f000 f818 	bl	80012b8 <_init>
 8001288:	1b64      	subs	r4, r4, r5
 800128a:	10a4      	asrs	r4, r4, #2
 800128c:	2600      	movs	r6, #0
 800128e:	42a6      	cmp	r6, r4
 8001290:	d105      	bne.n	800129e <__libc_init_array+0x2e>
 8001292:	bd70      	pop	{r4, r5, r6, pc}
 8001294:	f855 3b04 	ldr.w	r3, [r5], #4
 8001298:	4798      	blx	r3
 800129a:	3601      	adds	r6, #1
 800129c:	e7ee      	b.n	800127c <__libc_init_array+0xc>
 800129e:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a2:	4798      	blx	r3
 80012a4:	3601      	adds	r6, #1
 80012a6:	e7f2      	b.n	800128e <__libc_init_array+0x1e>
 80012a8:	080012d0 	.word	0x080012d0
 80012ac:	080012d0 	.word	0x080012d0
 80012b0:	080012d0 	.word	0x080012d0
 80012b4:	080012d4 	.word	0x080012d4

080012b8 <_init>:
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	bf00      	nop
 80012bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012be:	bc08      	pop	{r3}
 80012c0:	469e      	mov	lr, r3
 80012c2:	4770      	bx	lr

080012c4 <_fini>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	bf00      	nop
 80012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ca:	bc08      	pop	{r3}
 80012cc:	469e      	mov	lr, r3
 80012ce:	4770      	bx	lr
