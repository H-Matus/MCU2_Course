
timer_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08004e90  08004e90  00014e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800529c  0800529c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800529c  0800529c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  200001dc  08005480  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005480  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aac  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  00029cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016925  00000000  00000000  0002c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a76d  00000000  00000000  000430fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c169  00000000  00000000  0004d86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d99d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  000d9a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e78 	.word	0x08004e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004e78 	.word	0x08004e78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <SysTick_Handler>:
#include <main.h>

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000bbc:	f000 fb3a 	bl	8001234 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000bc0:	f000 fc5d 	bl	800147e <HAL_SYSTICK_IRQHandler>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htimer2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM2_IRQHandler+0x10>)
 8000bce:	f000 febe 	bl	800194e <HAL_TIM_IRQHandler>
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001f8 	.word	0x200001f8

08000bdc <main>:
uint32_t input_captures[2] = {0};
uint8_t count = 0;
uint8_t is_capture_done = FALSE;

int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0a4      	sub	sp, #144	; 0x90
 8000be0:	af00      	add	r7, sp, #0
    uint32_t capture_diff = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    double timer2_cnt_freq = 0;
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    double timer2_cnt_res = 0;
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    double user_signal_time_period = 0;
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    double user_signal_freq = 0;
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    char user_msg[100];

	HAL_Init();
 8000c18:	f000 faba 	bl	8001190 <HAL_Init>

	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000c1c:	2032      	movs	r0, #50	; 0x32
 8000c1e:	f000 f865 	bl	8000cec <SystemClockConfig>

	GPIO_Init();
 8000c22:	f000 f8c1 	bl	8000da8 <GPIO_Init>

    TIMER2_Init();
 8000c26:	f000 f8e3 	bl	8000df0 <TIMER2_Init>

    LSE_Configuration();
 8000c2a:	f000 f913 	bl	8000e54 <LSE_Configuration>

    while(1)
    {
        if(is_capture_done)
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <main+0xfc>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0fb      	beq.n	8000c2e <main+0x52>
        {
            if(input_captures[1] > input_captures[0])
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <main+0x100>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <main+0x100>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <main+0x76>
            {
                capture_diff = input_captures[1] - input_captures[0];
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <main+0x100>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <main+0x100>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000c50:	e007      	b.n	8000c62 <main+0x86>
            }
            else
            {
                capture_diff = (0xFFFFFFFF - input_captures[0]) + input_captures[1];
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <main+0x100>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <main+0x100>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* After this we can calculate the time period of the applied input signal. */
            timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / htimer2.Init.Prescaler;
 8000c62:	f000 fe11 	bl	8001888 <HAL_RCC_GetPCLK1Freq>
 8000c66:	4603      	mov	r3, r0
 8000c68:	005a      	lsls	r2, r3, #1
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <main+0x104>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc4e 	bl	8000514 <__aeabi_ui2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
            timer2_cnt_res = 1 / timer2_cnt_freq;
 8000c80:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4916      	ldr	r1, [pc, #88]	; (8000ce4 <main+0x108>)
 8000c8a:	f7ff fde7 	bl	800085c <__aeabi_ddiv>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
            user_signal_time_period = capture_diff * timer2_cnt_res;
 8000c96:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000c9a:	f7ff fc3b 	bl	8000514 <__aeabi_ui2d>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000ca6:	f7ff fcaf 	bl	8000608 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
            user_signal_freq = 1 / user_signal_time_period;
 8000cb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	490a      	ldr	r1, [pc, #40]	; (8000ce4 <main+0x108>)
 8000cbc:	f7ff fdce 	bl	800085c <__aeabi_ddiv>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

            sprintf(user_msg, "Frequency of the signal applied = %f\r\n", user_signal_freq);
 8000cc8:	1d38      	adds	r0, r7, #4
 8000cca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000cce:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <main+0x10c>)
 8000cd0:	f001 fe58 	bl	8002984 <siprintf>
        if(is_capture_done)
 8000cd4:	e7ab      	b.n	8000c2e <main+0x52>
 8000cd6:	bf00      	nop
 8000cd8:	20000249 	.word	0x20000249
 8000cdc:	20000240 	.word	0x20000240
 8000ce0:	200001f8 	.word	0x200001f8
 8000ce4:	3ff00000 	.word	0x3ff00000
 8000ce8:	08004e90 	.word	0x08004e90

08000cec <SystemClockConfig>:
	return 0;
}


void SystemClockConfig( uint8_t clock_freq )
{
 8000cec:	b480      	push	{r7}
 8000cee:	b095      	sub	sp, #84	; 0x54
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
    RCC_OscInitTypeDef Osc_Init;
    RCC_ClkInitTypeDef Clk_Init;

    Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	623b      	str	r3, [r7, #32]
    Osc_Init.HSIState = RCC_HSI_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Osc_Init.LSEState = RCC_LSE_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    Osc_Init.HSICalibrationValue = 16;
 8000d02:	2310      	movs	r3, #16
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
    Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch(clock_freq)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b78      	cmp	r3, #120	; 0x78
 8000d12:	d02e      	beq.n	8000d72 <SystemClockConfig+0x86>
 8000d14:	2b78      	cmp	r3, #120	; 0x78
 8000d16:	dc41      	bgt.n	8000d9c <SystemClockConfig+0xb0>
 8000d18:	2b32      	cmp	r3, #50	; 0x32
 8000d1a:	d002      	beq.n	8000d22 <SystemClockConfig+0x36>
 8000d1c:	2b54      	cmp	r3, #84	; 0x54
 8000d1e:	d014      	beq.n	8000d4a <SystemClockConfig+0x5e>
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
            break;
        }
        default:
        {
            return;
 8000d20:	e03c      	b.n	8000d9c <SystemClockConfig+0xb0>
            Osc_Init.PLL.PLLM = 8;
 8000d22:	2308      	movs	r3, #8
 8000d24:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 50;
 8000d26:	2332      	movs	r3, #50	; 0x32
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d32:	230f      	movs	r3, #15
 8000d34:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
            break;
 8000d48:	e029      	b.n	8000d9e <SystemClockConfig+0xb2>
            Osc_Init.PLL.PLLM = 8;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 84;
 8000d4e:	2354      	movs	r3, #84	; 0x54
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
            break;
 8000d70:	e015      	b.n	8000d9e <SystemClockConfig+0xb2>
            Osc_Init.PLL.PLLM = 8;
 8000d72:	2308      	movs	r3, #8
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
            Osc_Init.PLL.PLLN = 120;
 8000d76:	2378      	movs	r3, #120	; 0x78
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
            Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64bb      	str	r3, [r7, #72]	; 0x48
            Osc_Init.PLL.PLLQ = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
            Clk_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d82:	230f      	movs	r3, #15
 8000d84:	60fb      	str	r3, [r7, #12]
            Clk_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
            Clk_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
            Clk_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d92:	61bb      	str	r3, [r7, #24]
            Clk_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	61fb      	str	r3, [r7, #28]
            break;
 8000d9a:	e000      	b.n	8000d9e <SystemClockConfig+0xb2>
            return;
 8000d9c:	bf00      	nop
        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

        /* SysTick_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
    }
}
 8000d9e:	3754      	adds	r7, #84	; 0x54
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <GPIO_Init>:

void GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <GPIO_Init+0x40>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <GPIO_Init+0x40>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <GPIO_Init+0x40>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <GPIO_Init+0x44>)
 8000ddc:	f000 fb5c 	bl	8001498 <HAL_GPIO_Init>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <TIMER2_Init>:

void TIMER2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
    TIM_IC_InitTypeDef timer2IC_Config;

    htimer2.Instance = TIM2;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <TIMER2_Init+0x60>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <TIMER2_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = 0xFFFFFFFF;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <TIMER2_Init+0x60>)
 8000e06:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0a:	60da      	str	r2, [r3, #12]
    htimer2.Init.Prescaler = 1;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <TIMER2_Init+0x60>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	605a      	str	r2, [r3, #4]
    if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK )
 8000e12:	480f      	ldr	r0, [pc, #60]	; (8000e50 <TIMER2_Init+0x60>)
 8000e14:	f000 fd4c 	bl	80018b0 <HAL_TIM_IC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <TIMER2_Init+0x32>
    {
        Error_handler();
 8000e1e:	f000 f853 	bl	8000ec8 <Error_handler>
    }

    timer2IC_Config.ICFilter = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
    timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
    timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
    timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
    if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK )
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <TIMER2_Init+0x60>)
 8000e3a:	f000 fe90 	bl	8001b5e <HAL_TIM_IC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <TIMER2_Init+0x58>
    {
        Error_handler();
 8000e44:	f000 f840 	bl	8000ec8 <Error_handler>
    }

}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001f8 	.word	0x200001f8

08000e54 <LSE_Configuration>:

void LSE_Configuration(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    /* Supplying the LSE oscillator via GPIO */
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 fc9e 	bl	80017a0 <HAL_RCC_MCOConfig>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    if(count == 1)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10b      	bne.n	8000e90 <HAL_TIM_IC_CaptureCallback+0x28>
    {
        input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000e80:	6013      	str	r3, [r2, #0]
        count++;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e8c:	701a      	strb	r2, [r3, #0]
        input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
        count = 1;
        is_capture_done = TRUE;
    }

}
 8000e8e:	e00e      	b.n	8000eae <HAL_TIM_IC_CaptureCallback+0x46>
    else if(count == 2)
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d10a      	bne.n	8000eae <HAL_TIM_IC_CaptureCallback+0x46>
        input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000ea0:	6053      	str	r3, [r2, #4]
        count = 1;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
        is_capture_done = TRUE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000248 	.word	0x20000248
 8000ec0:	20000240 	.word	0x20000240
 8000ec4:	20000249 	.word	0x20000249

08000ec8 <Error_handler>:

void Error_handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	while(1);
 8000ecc:	e7fe      	b.n	8000ecc <Error_handler+0x4>
	...

08000ed0 <HAL_MspInit>:


#include <main.h>

void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fa91 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x40>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_MspInit+0x40>)
 8000ee0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ee4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f06f 000b 	mvn.w	r0, #11
 8000eee:	f000 fa90 	bl	8001412 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f06f 000a 	mvn.w	r0, #10
 8000efa:	f000 fa8a 	bl	8001412 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	f06f 0009 	mvn.w	r0, #9
 8000f06:	f000 fa84 	bl	8001412 <HAL_NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htimer)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef tim2ch1_gpio;

    /* 1. Enable the clock for timer 2: */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_IC_MspInit+0x70>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    /* 2. Configure a gpio to behave as timer2 channel 1 */
    tim2ch1_gpio.Pin = GPIO_PIN_0;
 8000f54:	2301      	movs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
    tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_TIM_IC_MspInit+0x74>)
 8000f68:	f000 fa96 	bl	8001498 <HAL_GPIO_Init>
    
    /* 3. nvic settings for IRQ */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	210f      	movs	r1, #15
 8000f70:	201c      	movs	r0, #28
 8000f72:	f000 fa4e 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f76:	201c      	movs	r0, #28
 8000f78:	f000 fa67 	bl	800144a <HAL_NVIC_EnableIRQ>

 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return 1;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_kill>:

int _kill(int pid, int sig)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fa6:	f001 f851 	bl	800204c <__errno>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2216      	movs	r2, #22
 8000fae:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_exit>:

void _exit (int status)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffe7 	bl	8000f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fce:	e7fe      	b.n	8000fce <_exit+0x12>

08000fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe2:	f3af 8000 	nop.w
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <_read+0x12>
  }

  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e009      	b.n	8001030 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf1      	blt.n	800101c <_write+0x12>
  }
  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_close>:

int _close(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106a:	605a      	str	r2, [r3, #4]
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_isatty>:

int _isatty(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f000 ffb6 	bl	800204c <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20018000 	.word	0x20018000
 800110c:	00000400 	.word	0x00000400
 8001110:	2000024c 	.word	0x2000024c
 8001114:	20000268 	.word	0x20000268

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f000 ff75 	bl	8002058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fd35 	bl	8000bdc <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001180:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 8001184:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001188:	20000264 	.word	0x20000264

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f91f 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fe84 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f937 	bl	8001466 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f8ff 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000250 	.word	0x20000250

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001482:	f000 f802 	bl	800148a <HAL_SYSTICK_Callback>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e159      	b.n	8001768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8148 	bne.w	8001762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a2 	beq.w	8001762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x202>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2f4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x1fe>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x1fa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_GPIO_Init+0x2fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x1f6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x1f2>
 8001686:	2304      	movs	r3, #4
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168a:	2307      	movs	r3, #7
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x204>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x304>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x304>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_GPIO_Init+0x304>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_Init+0x304>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_GPIO_Init+0x304>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f aea2 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d129      	bne.n	8001806 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	481f      	ldr	r0, [pc, #124]	; (8001868 <HAL_RCC_MCOConfig+0xc8>)
 80017ec:	f7ff fe54 	bl	8001498 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	4919      	ldr	r1, [pc, #100]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001804:	e029      	b.n	800185a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_RCC_MCOConfig+0xcc>)
 8001840:	f7ff fe2a 	bl	8001498 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	00d9      	lsls	r1, r3, #3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	430b      	orrs	r3, r1
 8001854:	4903      	ldr	r1, [pc, #12]	; (8001864 <HAL_RCC_MCOConfig+0xc4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
}
 800185a:	bf00      	nop
 800185c:	3730      	adds	r7, #48	; 0x30
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000
 800186c:	40020800 	.word	0x40020800

08001870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_RCC_GetHCLKFreq+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000

08001888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800188c:	f7ff fff0 	bl	8001870 <HAL_RCC_GetHCLKFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	4903      	ldr	r1, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08004eb8 	.word	0x08004eb8

080018b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e041      	b.n	8001946 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fb1c 	bl	8000f14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f000 f9fa 	bl	8001ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	d122      	bne.n	80019aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b02      	cmp	r3, #2
 8001970:	d11b      	bne.n	80019aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f06f 0202 	mvn.w	r2, #2
 800197a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fa69 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8001996:	e005      	b.n	80019a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f986 	bl	8001caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f98d 	bl	8001cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d122      	bne.n	80019fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d11b      	bne.n	80019fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0204 	mvn.w	r2, #4
 80019ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fa3f 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80019ea:	e005      	b.n	80019f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f95c 	bl	8001caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f963 	bl	8001cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d122      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11b      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0208 	mvn.w	r2, #8
 8001a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fa15 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8001a3e:	e005      	b.n	8001a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f932 	bl	8001caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f939 	bl	8001cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d122      	bne.n	8001aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0210 	mvn.w	r2, #16
 8001a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f9eb 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8001a92:	e005      	b.n	8001aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f908 	bl	8001caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f90f 	bl	8001cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f06f 0201 	mvn.w	r2, #1
 8001aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8e2 	bl	8001c96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d10e      	bne.n	8001afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b80      	cmp	r3, #128	; 0x80
 8001aec:	d107      	bne.n	8001afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fa9d 	bl	8002038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	d10e      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b40      	cmp	r3, #64	; 0x40
 8001b18:	d107      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8d4 	bl	8001cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d10e      	bne.n	8001b56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d107      	bne.n	8001b56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0220 	mvn.w	r2, #32
 8001b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fa67 	bl	8002024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e088      	b.n	8001c8e <HAL_TIM_IC_ConfigChannel+0x130>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11b      	bne.n	8001bc2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f000 f925 	bl	8001de8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020c 	bic.w	r2, r2, #12
 8001bac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6999      	ldr	r1, [r3, #24]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	e060      	b.n	8001c84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d11c      	bne.n	8001c02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f000 f96e 	bl	8001eb8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001bea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	021a      	lsls	r2, r3, #8
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	e040      	b.n	8001c84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f000 f98b 	bl	8001f32 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020c 	bic.w	r2, r2, #12
 8001c2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69d9      	ldr	r1, [r3, #28]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	61da      	str	r2, [r3, #28]
 8001c3e:	e021      	b.n	8001c84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d11c      	bne.n	8001c80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f000 f9a8 	bl	8001faa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69d9      	ldr	r1, [r3, #28]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	021a      	lsls	r2, r3, #8
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	e001      	b.n	8001c84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <TIM_Base_SetConfig+0xe8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <TIM_Base_SetConfig+0xec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <TIM_Base_SetConfig+0xf0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <TIM_Base_SetConfig+0xe8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <TIM_Base_SetConfig+0xec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <TIM_Base_SetConfig+0xf0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <TIM_Base_SetConfig+0xf4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <TIM_Base_SetConfig+0xf8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <TIM_Base_SetConfig+0xfc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d103      	bne.n	8001db8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	615a      	str	r2, [r3, #20]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40014400 	.word	0x40014400
 8001de4:	40014800 	.word	0x40014800

08001de8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	f023 0201 	bic.w	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <TIM_TI1_SetConfig+0xbc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <TIM_TI1_SetConfig+0x56>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1c:	d00f      	beq.n	8001e3e <TIM_TI1_SetConfig+0x56>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <TIM_TI1_SetConfig+0xc0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00b      	beq.n	8001e3e <TIM_TI1_SetConfig+0x56>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <TIM_TI1_SetConfig+0xc4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <TIM_TI1_SetConfig+0x56>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <TIM_TI1_SetConfig+0xc8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_TI1_SetConfig+0x56>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <TIM_TI1_SetConfig+0xcc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <TIM_TI1_SetConfig+0x5a>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <TIM_TI1_SetConfig+0x5c>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e003      	b.n	8001e62 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f023 030a 	bic.w	r3, r3, #10
 8001e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 030a 	and.w	r3, r3, #10
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	621a      	str	r2, [r3, #32]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40014000 	.word	0x40014000

08001eb8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f023 0210 	bic.w	r2, r3, #16
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ef6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	031b      	lsls	r3, r3, #12
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0303 	bic.w	r3, r3, #3
 8001f5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001f82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	621a      	str	r2, [r3, #32]
}
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fe8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	031b      	lsls	r3, r3, #12
 8002002:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	621a      	str	r2, [r3, #32]
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <__errno>:
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <__errno+0x8>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4d0d      	ldr	r5, [pc, #52]	; (8002090 <__libc_init_array+0x38>)
 800205c:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 800205e:	1b64      	subs	r4, r4, r5
 8002060:	10a4      	asrs	r4, r4, #2
 8002062:	2600      	movs	r6, #0
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	4d0b      	ldr	r5, [pc, #44]	; (8002098 <__libc_init_array+0x40>)
 800206a:	4c0c      	ldr	r4, [pc, #48]	; (800209c <__libc_init_array+0x44>)
 800206c:	f002 ff04 	bl	8004e78 <_init>
 8002070:	1b64      	subs	r4, r4, r5
 8002072:	10a4      	asrs	r4, r4, #2
 8002074:	2600      	movs	r6, #0
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	4798      	blx	r3
 8002082:	3601      	adds	r6, #1
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	4798      	blx	r3
 800208c:	3601      	adds	r6, #1
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	0800529c 	.word	0x0800529c
 8002094:	0800529c 	.word	0x0800529c
 8002098:	0800529c 	.word	0x0800529c
 800209c:	080052a0 	.word	0x080052a0

080020a0 <memset>:
 80020a0:	4402      	add	r2, r0
 80020a2:	4603      	mov	r3, r0
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d100      	bne.n	80020aa <memset+0xa>
 80020a8:	4770      	bx	lr
 80020aa:	f803 1b01 	strb.w	r1, [r3], #1
 80020ae:	e7f9      	b.n	80020a4 <memset+0x4>

080020b0 <__cvt>:
 80020b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020b4:	ec55 4b10 	vmov	r4, r5, d0
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	460e      	mov	r6, r1
 80020bc:	4619      	mov	r1, r3
 80020be:	462b      	mov	r3, r5
 80020c0:	bfbb      	ittet	lt
 80020c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80020c6:	461d      	movlt	r5, r3
 80020c8:	2300      	movge	r3, #0
 80020ca:	232d      	movlt	r3, #45	; 0x2d
 80020cc:	700b      	strb	r3, [r1, #0]
 80020ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80020d4:	4691      	mov	r9, r2
 80020d6:	f023 0820 	bic.w	r8, r3, #32
 80020da:	bfbc      	itt	lt
 80020dc:	4622      	movlt	r2, r4
 80020de:	4614      	movlt	r4, r2
 80020e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80020e4:	d005      	beq.n	80020f2 <__cvt+0x42>
 80020e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80020ea:	d100      	bne.n	80020ee <__cvt+0x3e>
 80020ec:	3601      	adds	r6, #1
 80020ee:	2102      	movs	r1, #2
 80020f0:	e000      	b.n	80020f4 <__cvt+0x44>
 80020f2:	2103      	movs	r1, #3
 80020f4:	ab03      	add	r3, sp, #12
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	ab02      	add	r3, sp, #8
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	ec45 4b10 	vmov	d0, r4, r5
 8002100:	4653      	mov	r3, sl
 8002102:	4632      	mov	r2, r6
 8002104:	f000 fcec 	bl	8002ae0 <_dtoa_r>
 8002108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800210c:	4607      	mov	r7, r0
 800210e:	d102      	bne.n	8002116 <__cvt+0x66>
 8002110:	f019 0f01 	tst.w	r9, #1
 8002114:	d022      	beq.n	800215c <__cvt+0xac>
 8002116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800211a:	eb07 0906 	add.w	r9, r7, r6
 800211e:	d110      	bne.n	8002142 <__cvt+0x92>
 8002120:	783b      	ldrb	r3, [r7, #0]
 8002122:	2b30      	cmp	r3, #48	; 0x30
 8002124:	d10a      	bne.n	800213c <__cvt+0x8c>
 8002126:	2200      	movs	r2, #0
 8002128:	2300      	movs	r3, #0
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe fcd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002132:	b918      	cbnz	r0, 800213c <__cvt+0x8c>
 8002134:	f1c6 0601 	rsb	r6, r6, #1
 8002138:	f8ca 6000 	str.w	r6, [sl]
 800213c:	f8da 3000 	ldr.w	r3, [sl]
 8002140:	4499      	add	r9, r3
 8002142:	2200      	movs	r2, #0
 8002144:	2300      	movs	r3, #0
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800214e:	b108      	cbz	r0, 8002154 <__cvt+0xa4>
 8002150:	f8cd 900c 	str.w	r9, [sp, #12]
 8002154:	2230      	movs	r2, #48	; 0x30
 8002156:	9b03      	ldr	r3, [sp, #12]
 8002158:	454b      	cmp	r3, r9
 800215a:	d307      	bcc.n	800216c <__cvt+0xbc>
 800215c:	9b03      	ldr	r3, [sp, #12]
 800215e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002160:	1bdb      	subs	r3, r3, r7
 8002162:	4638      	mov	r0, r7
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	b004      	add	sp, #16
 8002168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	9103      	str	r1, [sp, #12]
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e7f0      	b.n	8002156 <__cvt+0xa6>

08002174 <__exponent>:
 8002174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002176:	4603      	mov	r3, r0
 8002178:	2900      	cmp	r1, #0
 800217a:	bfb8      	it	lt
 800217c:	4249      	neglt	r1, r1
 800217e:	f803 2b02 	strb.w	r2, [r3], #2
 8002182:	bfb4      	ite	lt
 8002184:	222d      	movlt	r2, #45	; 0x2d
 8002186:	222b      	movge	r2, #43	; 0x2b
 8002188:	2909      	cmp	r1, #9
 800218a:	7042      	strb	r2, [r0, #1]
 800218c:	dd2a      	ble.n	80021e4 <__exponent+0x70>
 800218e:	f10d 0407 	add.w	r4, sp, #7
 8002192:	46a4      	mov	ip, r4
 8002194:	270a      	movs	r7, #10
 8002196:	46a6      	mov	lr, r4
 8002198:	460a      	mov	r2, r1
 800219a:	fb91 f6f7 	sdiv	r6, r1, r7
 800219e:	fb07 1516 	mls	r5, r7, r6, r1
 80021a2:	3530      	adds	r5, #48	; 0x30
 80021a4:	2a63      	cmp	r2, #99	; 0x63
 80021a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80021aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80021ae:	4631      	mov	r1, r6
 80021b0:	dcf1      	bgt.n	8002196 <__exponent+0x22>
 80021b2:	3130      	adds	r1, #48	; 0x30
 80021b4:	f1ae 0502 	sub.w	r5, lr, #2
 80021b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80021bc:	1c44      	adds	r4, r0, #1
 80021be:	4629      	mov	r1, r5
 80021c0:	4561      	cmp	r1, ip
 80021c2:	d30a      	bcc.n	80021da <__exponent+0x66>
 80021c4:	f10d 0209 	add.w	r2, sp, #9
 80021c8:	eba2 020e 	sub.w	r2, r2, lr
 80021cc:	4565      	cmp	r5, ip
 80021ce:	bf88      	it	hi
 80021d0:	2200      	movhi	r2, #0
 80021d2:	4413      	add	r3, r2
 80021d4:	1a18      	subs	r0, r3, r0
 80021d6:	b003      	add	sp, #12
 80021d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80021e2:	e7ed      	b.n	80021c0 <__exponent+0x4c>
 80021e4:	2330      	movs	r3, #48	; 0x30
 80021e6:	3130      	adds	r1, #48	; 0x30
 80021e8:	7083      	strb	r3, [r0, #2]
 80021ea:	70c1      	strb	r1, [r0, #3]
 80021ec:	1d03      	adds	r3, r0, #4
 80021ee:	e7f1      	b.n	80021d4 <__exponent+0x60>

080021f0 <_printf_float>:
 80021f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f4:	ed2d 8b02 	vpush	{d8}
 80021f8:	b08d      	sub	sp, #52	; 0x34
 80021fa:	460c      	mov	r4, r1
 80021fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002200:	4616      	mov	r6, r2
 8002202:	461f      	mov	r7, r3
 8002204:	4605      	mov	r5, r0
 8002206:	f001 fa59 	bl	80036bc <_localeconv_r>
 800220a:	f8d0 a000 	ldr.w	sl, [r0]
 800220e:	4650      	mov	r0, sl
 8002210:	f7fd ffe6 	bl	80001e0 <strlen>
 8002214:	2300      	movs	r3, #0
 8002216:	930a      	str	r3, [sp, #40]	; 0x28
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	9305      	str	r3, [sp, #20]
 800221c:	f8d8 3000 	ldr.w	r3, [r8]
 8002220:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002224:	3307      	adds	r3, #7
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	f8c8 2000 	str.w	r2, [r8]
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800223a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800223e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002242:	9307      	str	r3, [sp, #28]
 8002244:	f8cd 8018 	str.w	r8, [sp, #24]
 8002248:	ee08 0a10 	vmov	s16, r0
 800224c:	4b9f      	ldr	r3, [pc, #636]	; (80024cc <_printf_float+0x2dc>)
 800224e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002252:	f04f 32ff 	mov.w	r2, #4294967295
 8002256:	f7fe fc71 	bl	8000b3c <__aeabi_dcmpun>
 800225a:	bb88      	cbnz	r0, 80022c0 <_printf_float+0xd0>
 800225c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002260:	4b9a      	ldr	r3, [pc, #616]	; (80024cc <_printf_float+0x2dc>)
 8002262:	f04f 32ff 	mov.w	r2, #4294967295
 8002266:	f7fe fc4b 	bl	8000b00 <__aeabi_dcmple>
 800226a:	bb48      	cbnz	r0, 80022c0 <_printf_float+0xd0>
 800226c:	2200      	movs	r2, #0
 800226e:	2300      	movs	r3, #0
 8002270:	4640      	mov	r0, r8
 8002272:	4649      	mov	r1, r9
 8002274:	f7fe fc3a 	bl	8000aec <__aeabi_dcmplt>
 8002278:	b110      	cbz	r0, 8002280 <_printf_float+0x90>
 800227a:	232d      	movs	r3, #45	; 0x2d
 800227c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002280:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <_printf_float+0x2e0>)
 8002282:	4894      	ldr	r0, [pc, #592]	; (80024d4 <_printf_float+0x2e4>)
 8002284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002288:	bf94      	ite	ls
 800228a:	4698      	movls	r8, r3
 800228c:	4680      	movhi	r8, r0
 800228e:	2303      	movs	r3, #3
 8002290:	6123      	str	r3, [r4, #16]
 8002292:	9b05      	ldr	r3, [sp, #20]
 8002294:	f023 0204 	bic.w	r2, r3, #4
 8002298:	6022      	str	r2, [r4, #0]
 800229a:	f04f 0900 	mov.w	r9, #0
 800229e:	9700      	str	r7, [sp, #0]
 80022a0:	4633      	mov	r3, r6
 80022a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80022a4:	4621      	mov	r1, r4
 80022a6:	4628      	mov	r0, r5
 80022a8:	f000 f9d8 	bl	800265c <_printf_common>
 80022ac:	3001      	adds	r0, #1
 80022ae:	f040 8090 	bne.w	80023d2 <_printf_float+0x1e2>
 80022b2:	f04f 30ff 	mov.w	r0, #4294967295
 80022b6:	b00d      	add	sp, #52	; 0x34
 80022b8:	ecbd 8b02 	vpop	{d8}
 80022bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	4640      	mov	r0, r8
 80022c6:	4649      	mov	r1, r9
 80022c8:	f7fe fc38 	bl	8000b3c <__aeabi_dcmpun>
 80022cc:	b140      	cbz	r0, 80022e0 <_printf_float+0xf0>
 80022ce:	464b      	mov	r3, r9
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfbc      	itt	lt
 80022d4:	232d      	movlt	r3, #45	; 0x2d
 80022d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80022da:	487f      	ldr	r0, [pc, #508]	; (80024d8 <_printf_float+0x2e8>)
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <_printf_float+0x2ec>)
 80022de:	e7d1      	b.n	8002284 <_printf_float+0x94>
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80022e6:	9206      	str	r2, [sp, #24]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	d13f      	bne.n	800236c <_printf_float+0x17c>
 80022ec:	2306      	movs	r3, #6
 80022ee:	6063      	str	r3, [r4, #4]
 80022f0:	9b05      	ldr	r3, [sp, #20]
 80022f2:	6861      	ldr	r1, [r4, #4]
 80022f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022f8:	2300      	movs	r3, #0
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	ab0a      	add	r3, sp, #40	; 0x28
 80022fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002302:	ab09      	add	r3, sp, #36	; 0x24
 8002304:	ec49 8b10 	vmov	d0, r8, r9
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	6022      	str	r2, [r4, #0]
 800230c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002310:	4628      	mov	r0, r5
 8002312:	f7ff fecd 	bl	80020b0 <__cvt>
 8002316:	9b06      	ldr	r3, [sp, #24]
 8002318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800231a:	2b47      	cmp	r3, #71	; 0x47
 800231c:	4680      	mov	r8, r0
 800231e:	d108      	bne.n	8002332 <_printf_float+0x142>
 8002320:	1cc8      	adds	r0, r1, #3
 8002322:	db02      	blt.n	800232a <_printf_float+0x13a>
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	4299      	cmp	r1, r3
 8002328:	dd41      	ble.n	80023ae <_printf_float+0x1be>
 800232a:	f1ab 0b02 	sub.w	fp, fp, #2
 800232e:	fa5f fb8b 	uxtb.w	fp, fp
 8002332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002336:	d820      	bhi.n	800237a <_printf_float+0x18a>
 8002338:	3901      	subs	r1, #1
 800233a:	465a      	mov	r2, fp
 800233c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002340:	9109      	str	r1, [sp, #36]	; 0x24
 8002342:	f7ff ff17 	bl	8002174 <__exponent>
 8002346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002348:	1813      	adds	r3, r2, r0
 800234a:	2a01      	cmp	r2, #1
 800234c:	4681      	mov	r9, r0
 800234e:	6123      	str	r3, [r4, #16]
 8002350:	dc02      	bgt.n	8002358 <_printf_float+0x168>
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	07d2      	lsls	r2, r2, #31
 8002356:	d501      	bpl.n	800235c <_printf_float+0x16c>
 8002358:	3301      	adds	r3, #1
 800235a:	6123      	str	r3, [r4, #16]
 800235c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002360:	2b00      	cmp	r3, #0
 8002362:	d09c      	beq.n	800229e <_printf_float+0xae>
 8002364:	232d      	movs	r3, #45	; 0x2d
 8002366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800236a:	e798      	b.n	800229e <_printf_float+0xae>
 800236c:	9a06      	ldr	r2, [sp, #24]
 800236e:	2a47      	cmp	r2, #71	; 0x47
 8002370:	d1be      	bne.n	80022f0 <_printf_float+0x100>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1bc      	bne.n	80022f0 <_printf_float+0x100>
 8002376:	2301      	movs	r3, #1
 8002378:	e7b9      	b.n	80022ee <_printf_float+0xfe>
 800237a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800237e:	d118      	bne.n	80023b2 <_printf_float+0x1c2>
 8002380:	2900      	cmp	r1, #0
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	dd0b      	ble.n	800239e <_printf_float+0x1ae>
 8002386:	6121      	str	r1, [r4, #16]
 8002388:	b913      	cbnz	r3, 8002390 <_printf_float+0x1a0>
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	07d0      	lsls	r0, r2, #31
 800238e:	d502      	bpl.n	8002396 <_printf_float+0x1a6>
 8002390:	3301      	adds	r3, #1
 8002392:	440b      	add	r3, r1
 8002394:	6123      	str	r3, [r4, #16]
 8002396:	65a1      	str	r1, [r4, #88]	; 0x58
 8002398:	f04f 0900 	mov.w	r9, #0
 800239c:	e7de      	b.n	800235c <_printf_float+0x16c>
 800239e:	b913      	cbnz	r3, 80023a6 <_printf_float+0x1b6>
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	07d2      	lsls	r2, r2, #31
 80023a4:	d501      	bpl.n	80023aa <_printf_float+0x1ba>
 80023a6:	3302      	adds	r3, #2
 80023a8:	e7f4      	b.n	8002394 <_printf_float+0x1a4>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e7f2      	b.n	8002394 <_printf_float+0x1a4>
 80023ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80023b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023b4:	4299      	cmp	r1, r3
 80023b6:	db05      	blt.n	80023c4 <_printf_float+0x1d4>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	6121      	str	r1, [r4, #16]
 80023bc:	07d8      	lsls	r0, r3, #31
 80023be:	d5ea      	bpl.n	8002396 <_printf_float+0x1a6>
 80023c0:	1c4b      	adds	r3, r1, #1
 80023c2:	e7e7      	b.n	8002394 <_printf_float+0x1a4>
 80023c4:	2900      	cmp	r1, #0
 80023c6:	bfd4      	ite	le
 80023c8:	f1c1 0202 	rsble	r2, r1, #2
 80023cc:	2201      	movgt	r2, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	e7e0      	b.n	8002394 <_printf_float+0x1a4>
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	055a      	lsls	r2, r3, #21
 80023d6:	d407      	bmi.n	80023e8 <_printf_float+0x1f8>
 80023d8:	6923      	ldr	r3, [r4, #16]
 80023da:	4642      	mov	r2, r8
 80023dc:	4631      	mov	r1, r6
 80023de:	4628      	mov	r0, r5
 80023e0:	47b8      	blx	r7
 80023e2:	3001      	adds	r0, #1
 80023e4:	d12c      	bne.n	8002440 <_printf_float+0x250>
 80023e6:	e764      	b.n	80022b2 <_printf_float+0xc2>
 80023e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80023ec:	f240 80e0 	bls.w	80025b0 <_printf_float+0x3c0>
 80023f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80023f4:	2200      	movs	r2, #0
 80023f6:	2300      	movs	r3, #0
 80023f8:	f7fe fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d034      	beq.n	800246a <_printf_float+0x27a>
 8002400:	4a37      	ldr	r2, [pc, #220]	; (80024e0 <_printf_float+0x2f0>)
 8002402:	2301      	movs	r3, #1
 8002404:	4631      	mov	r1, r6
 8002406:	4628      	mov	r0, r5
 8002408:	47b8      	blx	r7
 800240a:	3001      	adds	r0, #1
 800240c:	f43f af51 	beq.w	80022b2 <_printf_float+0xc2>
 8002410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002414:	429a      	cmp	r2, r3
 8002416:	db02      	blt.n	800241e <_printf_float+0x22e>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	07d8      	lsls	r0, r3, #31
 800241c:	d510      	bpl.n	8002440 <_printf_float+0x250>
 800241e:	ee18 3a10 	vmov	r3, s16
 8002422:	4652      	mov	r2, sl
 8002424:	4631      	mov	r1, r6
 8002426:	4628      	mov	r0, r5
 8002428:	47b8      	blx	r7
 800242a:	3001      	adds	r0, #1
 800242c:	f43f af41 	beq.w	80022b2 <_printf_float+0xc2>
 8002430:	f04f 0800 	mov.w	r8, #0
 8002434:	f104 091a 	add.w	r9, r4, #26
 8002438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	4543      	cmp	r3, r8
 800243e:	dc09      	bgt.n	8002454 <_printf_float+0x264>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	079b      	lsls	r3, r3, #30
 8002444:	f100 8105 	bmi.w	8002652 <_printf_float+0x462>
 8002448:	68e0      	ldr	r0, [r4, #12]
 800244a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800244c:	4298      	cmp	r0, r3
 800244e:	bfb8      	it	lt
 8002450:	4618      	movlt	r0, r3
 8002452:	e730      	b.n	80022b6 <_printf_float+0xc6>
 8002454:	2301      	movs	r3, #1
 8002456:	464a      	mov	r2, r9
 8002458:	4631      	mov	r1, r6
 800245a:	4628      	mov	r0, r5
 800245c:	47b8      	blx	r7
 800245e:	3001      	adds	r0, #1
 8002460:	f43f af27 	beq.w	80022b2 <_printf_float+0xc2>
 8002464:	f108 0801 	add.w	r8, r8, #1
 8002468:	e7e6      	b.n	8002438 <_printf_float+0x248>
 800246a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	dc39      	bgt.n	80024e4 <_printf_float+0x2f4>
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <_printf_float+0x2f0>)
 8002472:	2301      	movs	r3, #1
 8002474:	4631      	mov	r1, r6
 8002476:	4628      	mov	r0, r5
 8002478:	47b8      	blx	r7
 800247a:	3001      	adds	r0, #1
 800247c:	f43f af19 	beq.w	80022b2 <_printf_float+0xc2>
 8002480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002484:	4313      	orrs	r3, r2
 8002486:	d102      	bne.n	800248e <_printf_float+0x29e>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	07d9      	lsls	r1, r3, #31
 800248c:	d5d8      	bpl.n	8002440 <_printf_float+0x250>
 800248e:	ee18 3a10 	vmov	r3, s16
 8002492:	4652      	mov	r2, sl
 8002494:	4631      	mov	r1, r6
 8002496:	4628      	mov	r0, r5
 8002498:	47b8      	blx	r7
 800249a:	3001      	adds	r0, #1
 800249c:	f43f af09 	beq.w	80022b2 <_printf_float+0xc2>
 80024a0:	f04f 0900 	mov.w	r9, #0
 80024a4:	f104 0a1a 	add.w	sl, r4, #26
 80024a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024aa:	425b      	negs	r3, r3
 80024ac:	454b      	cmp	r3, r9
 80024ae:	dc01      	bgt.n	80024b4 <_printf_float+0x2c4>
 80024b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024b2:	e792      	b.n	80023da <_printf_float+0x1ea>
 80024b4:	2301      	movs	r3, #1
 80024b6:	4652      	mov	r2, sl
 80024b8:	4631      	mov	r1, r6
 80024ba:	4628      	mov	r0, r5
 80024bc:	47b8      	blx	r7
 80024be:	3001      	adds	r0, #1
 80024c0:	f43f aef7 	beq.w	80022b2 <_printf_float+0xc2>
 80024c4:	f109 0901 	add.w	r9, r9, #1
 80024c8:	e7ee      	b.n	80024a8 <_printf_float+0x2b8>
 80024ca:	bf00      	nop
 80024cc:	7fefffff 	.word	0x7fefffff
 80024d0:	08004ec4 	.word	0x08004ec4
 80024d4:	08004ec8 	.word	0x08004ec8
 80024d8:	08004ed0 	.word	0x08004ed0
 80024dc:	08004ecc 	.word	0x08004ecc
 80024e0:	08004ed4 	.word	0x08004ed4
 80024e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024e8:	429a      	cmp	r2, r3
 80024ea:	bfa8      	it	ge
 80024ec:	461a      	movge	r2, r3
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	4691      	mov	r9, r2
 80024f2:	dc37      	bgt.n	8002564 <_printf_float+0x374>
 80024f4:	f04f 0b00 	mov.w	fp, #0
 80024f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024fc:	f104 021a 	add.w	r2, r4, #26
 8002500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002502:	9305      	str	r3, [sp, #20]
 8002504:	eba3 0309 	sub.w	r3, r3, r9
 8002508:	455b      	cmp	r3, fp
 800250a:	dc33      	bgt.n	8002574 <_printf_float+0x384>
 800250c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002510:	429a      	cmp	r2, r3
 8002512:	db3b      	blt.n	800258c <_printf_float+0x39c>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	07da      	lsls	r2, r3, #31
 8002518:	d438      	bmi.n	800258c <_printf_float+0x39c>
 800251a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800251c:	9a05      	ldr	r2, [sp, #20]
 800251e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002520:	1a9a      	subs	r2, r3, r2
 8002522:	eba3 0901 	sub.w	r9, r3, r1
 8002526:	4591      	cmp	r9, r2
 8002528:	bfa8      	it	ge
 800252a:	4691      	movge	r9, r2
 800252c:	f1b9 0f00 	cmp.w	r9, #0
 8002530:	dc35      	bgt.n	800259e <_printf_float+0x3ae>
 8002532:	f04f 0800 	mov.w	r8, #0
 8002536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800253a:	f104 0a1a 	add.w	sl, r4, #26
 800253e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	eba3 0309 	sub.w	r3, r3, r9
 8002548:	4543      	cmp	r3, r8
 800254a:	f77f af79 	ble.w	8002440 <_printf_float+0x250>
 800254e:	2301      	movs	r3, #1
 8002550:	4652      	mov	r2, sl
 8002552:	4631      	mov	r1, r6
 8002554:	4628      	mov	r0, r5
 8002556:	47b8      	blx	r7
 8002558:	3001      	adds	r0, #1
 800255a:	f43f aeaa 	beq.w	80022b2 <_printf_float+0xc2>
 800255e:	f108 0801 	add.w	r8, r8, #1
 8002562:	e7ec      	b.n	800253e <_printf_float+0x34e>
 8002564:	4613      	mov	r3, r2
 8002566:	4631      	mov	r1, r6
 8002568:	4642      	mov	r2, r8
 800256a:	4628      	mov	r0, r5
 800256c:	47b8      	blx	r7
 800256e:	3001      	adds	r0, #1
 8002570:	d1c0      	bne.n	80024f4 <_printf_float+0x304>
 8002572:	e69e      	b.n	80022b2 <_printf_float+0xc2>
 8002574:	2301      	movs	r3, #1
 8002576:	4631      	mov	r1, r6
 8002578:	4628      	mov	r0, r5
 800257a:	9205      	str	r2, [sp, #20]
 800257c:	47b8      	blx	r7
 800257e:	3001      	adds	r0, #1
 8002580:	f43f ae97 	beq.w	80022b2 <_printf_float+0xc2>
 8002584:	9a05      	ldr	r2, [sp, #20]
 8002586:	f10b 0b01 	add.w	fp, fp, #1
 800258a:	e7b9      	b.n	8002500 <_printf_float+0x310>
 800258c:	ee18 3a10 	vmov	r3, s16
 8002590:	4652      	mov	r2, sl
 8002592:	4631      	mov	r1, r6
 8002594:	4628      	mov	r0, r5
 8002596:	47b8      	blx	r7
 8002598:	3001      	adds	r0, #1
 800259a:	d1be      	bne.n	800251a <_printf_float+0x32a>
 800259c:	e689      	b.n	80022b2 <_printf_float+0xc2>
 800259e:	9a05      	ldr	r2, [sp, #20]
 80025a0:	464b      	mov	r3, r9
 80025a2:	4442      	add	r2, r8
 80025a4:	4631      	mov	r1, r6
 80025a6:	4628      	mov	r0, r5
 80025a8:	47b8      	blx	r7
 80025aa:	3001      	adds	r0, #1
 80025ac:	d1c1      	bne.n	8002532 <_printf_float+0x342>
 80025ae:	e680      	b.n	80022b2 <_printf_float+0xc2>
 80025b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	dc01      	bgt.n	80025ba <_printf_float+0x3ca>
 80025b6:	07db      	lsls	r3, r3, #31
 80025b8:	d538      	bpl.n	800262c <_printf_float+0x43c>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4642      	mov	r2, r8
 80025be:	4631      	mov	r1, r6
 80025c0:	4628      	mov	r0, r5
 80025c2:	47b8      	blx	r7
 80025c4:	3001      	adds	r0, #1
 80025c6:	f43f ae74 	beq.w	80022b2 <_printf_float+0xc2>
 80025ca:	ee18 3a10 	vmov	r3, s16
 80025ce:	4652      	mov	r2, sl
 80025d0:	4631      	mov	r1, r6
 80025d2:	4628      	mov	r0, r5
 80025d4:	47b8      	blx	r7
 80025d6:	3001      	adds	r0, #1
 80025d8:	f43f ae6b 	beq.w	80022b2 <_printf_float+0xc2>
 80025dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80025e0:	2200      	movs	r2, #0
 80025e2:	2300      	movs	r3, #0
 80025e4:	f7fe fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80025e8:	b9d8      	cbnz	r0, 8002622 <_printf_float+0x432>
 80025ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025ec:	f108 0201 	add.w	r2, r8, #1
 80025f0:	3b01      	subs	r3, #1
 80025f2:	4631      	mov	r1, r6
 80025f4:	4628      	mov	r0, r5
 80025f6:	47b8      	blx	r7
 80025f8:	3001      	adds	r0, #1
 80025fa:	d10e      	bne.n	800261a <_printf_float+0x42a>
 80025fc:	e659      	b.n	80022b2 <_printf_float+0xc2>
 80025fe:	2301      	movs	r3, #1
 8002600:	4652      	mov	r2, sl
 8002602:	4631      	mov	r1, r6
 8002604:	4628      	mov	r0, r5
 8002606:	47b8      	blx	r7
 8002608:	3001      	adds	r0, #1
 800260a:	f43f ae52 	beq.w	80022b2 <_printf_float+0xc2>
 800260e:	f108 0801 	add.w	r8, r8, #1
 8002612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	4543      	cmp	r3, r8
 8002618:	dcf1      	bgt.n	80025fe <_printf_float+0x40e>
 800261a:	464b      	mov	r3, r9
 800261c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002620:	e6dc      	b.n	80023dc <_printf_float+0x1ec>
 8002622:	f04f 0800 	mov.w	r8, #0
 8002626:	f104 0a1a 	add.w	sl, r4, #26
 800262a:	e7f2      	b.n	8002612 <_printf_float+0x422>
 800262c:	2301      	movs	r3, #1
 800262e:	4642      	mov	r2, r8
 8002630:	e7df      	b.n	80025f2 <_printf_float+0x402>
 8002632:	2301      	movs	r3, #1
 8002634:	464a      	mov	r2, r9
 8002636:	4631      	mov	r1, r6
 8002638:	4628      	mov	r0, r5
 800263a:	47b8      	blx	r7
 800263c:	3001      	adds	r0, #1
 800263e:	f43f ae38 	beq.w	80022b2 <_printf_float+0xc2>
 8002642:	f108 0801 	add.w	r8, r8, #1
 8002646:	68e3      	ldr	r3, [r4, #12]
 8002648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800264a:	1a5b      	subs	r3, r3, r1
 800264c:	4543      	cmp	r3, r8
 800264e:	dcf0      	bgt.n	8002632 <_printf_float+0x442>
 8002650:	e6fa      	b.n	8002448 <_printf_float+0x258>
 8002652:	f04f 0800 	mov.w	r8, #0
 8002656:	f104 0919 	add.w	r9, r4, #25
 800265a:	e7f4      	b.n	8002646 <_printf_float+0x456>

0800265c <_printf_common>:
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002660:	4616      	mov	r6, r2
 8002662:	4699      	mov	r9, r3
 8002664:	688a      	ldr	r2, [r1, #8]
 8002666:	690b      	ldr	r3, [r1, #16]
 8002668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800266c:	4293      	cmp	r3, r2
 800266e:	bfb8      	it	lt
 8002670:	4613      	movlt	r3, r2
 8002672:	6033      	str	r3, [r6, #0]
 8002674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002678:	4607      	mov	r7, r0
 800267a:	460c      	mov	r4, r1
 800267c:	b10a      	cbz	r2, 8002682 <_printf_common+0x26>
 800267e:	3301      	adds	r3, #1
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	0699      	lsls	r1, r3, #26
 8002686:	bf42      	ittt	mi
 8002688:	6833      	ldrmi	r3, [r6, #0]
 800268a:	3302      	addmi	r3, #2
 800268c:	6033      	strmi	r3, [r6, #0]
 800268e:	6825      	ldr	r5, [r4, #0]
 8002690:	f015 0506 	ands.w	r5, r5, #6
 8002694:	d106      	bne.n	80026a4 <_printf_common+0x48>
 8002696:	f104 0a19 	add.w	sl, r4, #25
 800269a:	68e3      	ldr	r3, [r4, #12]
 800269c:	6832      	ldr	r2, [r6, #0]
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	42ab      	cmp	r3, r5
 80026a2:	dc26      	bgt.n	80026f2 <_printf_common+0x96>
 80026a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026a8:	1e13      	subs	r3, r2, #0
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	bf18      	it	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	0692      	lsls	r2, r2, #26
 80026b2:	d42b      	bmi.n	800270c <_printf_common+0xb0>
 80026b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026b8:	4649      	mov	r1, r9
 80026ba:	4638      	mov	r0, r7
 80026bc:	47c0      	blx	r8
 80026be:	3001      	adds	r0, #1
 80026c0:	d01e      	beq.n	8002700 <_printf_common+0xa4>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	68e5      	ldr	r5, [r4, #12]
 80026c6:	6832      	ldr	r2, [r6, #0]
 80026c8:	f003 0306 	and.w	r3, r3, #6
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	bf08      	it	eq
 80026d0:	1aad      	subeq	r5, r5, r2
 80026d2:	68a3      	ldr	r3, [r4, #8]
 80026d4:	6922      	ldr	r2, [r4, #16]
 80026d6:	bf0c      	ite	eq
 80026d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026dc:	2500      	movne	r5, #0
 80026de:	4293      	cmp	r3, r2
 80026e0:	bfc4      	itt	gt
 80026e2:	1a9b      	subgt	r3, r3, r2
 80026e4:	18ed      	addgt	r5, r5, r3
 80026e6:	2600      	movs	r6, #0
 80026e8:	341a      	adds	r4, #26
 80026ea:	42b5      	cmp	r5, r6
 80026ec:	d11a      	bne.n	8002724 <_printf_common+0xc8>
 80026ee:	2000      	movs	r0, #0
 80026f0:	e008      	b.n	8002704 <_printf_common+0xa8>
 80026f2:	2301      	movs	r3, #1
 80026f4:	4652      	mov	r2, sl
 80026f6:	4649      	mov	r1, r9
 80026f8:	4638      	mov	r0, r7
 80026fa:	47c0      	blx	r8
 80026fc:	3001      	adds	r0, #1
 80026fe:	d103      	bne.n	8002708 <_printf_common+0xac>
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002708:	3501      	adds	r5, #1
 800270a:	e7c6      	b.n	800269a <_printf_common+0x3e>
 800270c:	18e1      	adds	r1, r4, r3
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	2030      	movs	r0, #48	; 0x30
 8002712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002716:	4422      	add	r2, r4
 8002718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800271c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002720:	3302      	adds	r3, #2
 8002722:	e7c7      	b.n	80026b4 <_printf_common+0x58>
 8002724:	2301      	movs	r3, #1
 8002726:	4622      	mov	r2, r4
 8002728:	4649      	mov	r1, r9
 800272a:	4638      	mov	r0, r7
 800272c:	47c0      	blx	r8
 800272e:	3001      	adds	r0, #1
 8002730:	d0e6      	beq.n	8002700 <_printf_common+0xa4>
 8002732:	3601      	adds	r6, #1
 8002734:	e7d9      	b.n	80026ea <_printf_common+0x8e>
	...

08002738 <_printf_i>:
 8002738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800273c:	7e0f      	ldrb	r7, [r1, #24]
 800273e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002740:	2f78      	cmp	r7, #120	; 0x78
 8002742:	4691      	mov	r9, r2
 8002744:	4680      	mov	r8, r0
 8002746:	460c      	mov	r4, r1
 8002748:	469a      	mov	sl, r3
 800274a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800274e:	d807      	bhi.n	8002760 <_printf_i+0x28>
 8002750:	2f62      	cmp	r7, #98	; 0x62
 8002752:	d80a      	bhi.n	800276a <_printf_i+0x32>
 8002754:	2f00      	cmp	r7, #0
 8002756:	f000 80d8 	beq.w	800290a <_printf_i+0x1d2>
 800275a:	2f58      	cmp	r7, #88	; 0x58
 800275c:	f000 80a3 	beq.w	80028a6 <_printf_i+0x16e>
 8002760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002768:	e03a      	b.n	80027e0 <_printf_i+0xa8>
 800276a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800276e:	2b15      	cmp	r3, #21
 8002770:	d8f6      	bhi.n	8002760 <_printf_i+0x28>
 8002772:	a101      	add	r1, pc, #4	; (adr r1, 8002778 <_printf_i+0x40>)
 8002774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002778:	080027d1 	.word	0x080027d1
 800277c:	080027e5 	.word	0x080027e5
 8002780:	08002761 	.word	0x08002761
 8002784:	08002761 	.word	0x08002761
 8002788:	08002761 	.word	0x08002761
 800278c:	08002761 	.word	0x08002761
 8002790:	080027e5 	.word	0x080027e5
 8002794:	08002761 	.word	0x08002761
 8002798:	08002761 	.word	0x08002761
 800279c:	08002761 	.word	0x08002761
 80027a0:	08002761 	.word	0x08002761
 80027a4:	080028f1 	.word	0x080028f1
 80027a8:	08002815 	.word	0x08002815
 80027ac:	080028d3 	.word	0x080028d3
 80027b0:	08002761 	.word	0x08002761
 80027b4:	08002761 	.word	0x08002761
 80027b8:	08002913 	.word	0x08002913
 80027bc:	08002761 	.word	0x08002761
 80027c0:	08002815 	.word	0x08002815
 80027c4:	08002761 	.word	0x08002761
 80027c8:	08002761 	.word	0x08002761
 80027cc:	080028db 	.word	0x080028db
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	602a      	str	r2, [r5, #0]
 80027d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0a3      	b.n	800292c <_printf_i+0x1f4>
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	6829      	ldr	r1, [r5, #0]
 80027e8:	0606      	lsls	r6, r0, #24
 80027ea:	f101 0304 	add.w	r3, r1, #4
 80027ee:	d50a      	bpl.n	8002806 <_printf_i+0xce>
 80027f0:	680e      	ldr	r6, [r1, #0]
 80027f2:	602b      	str	r3, [r5, #0]
 80027f4:	2e00      	cmp	r6, #0
 80027f6:	da03      	bge.n	8002800 <_printf_i+0xc8>
 80027f8:	232d      	movs	r3, #45	; 0x2d
 80027fa:	4276      	negs	r6, r6
 80027fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002800:	485e      	ldr	r0, [pc, #376]	; (800297c <_printf_i+0x244>)
 8002802:	230a      	movs	r3, #10
 8002804:	e019      	b.n	800283a <_printf_i+0x102>
 8002806:	680e      	ldr	r6, [r1, #0]
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800280e:	bf18      	it	ne
 8002810:	b236      	sxthne	r6, r6
 8002812:	e7ef      	b.n	80027f4 <_printf_i+0xbc>
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	1d19      	adds	r1, r3, #4
 800281a:	6029      	str	r1, [r5, #0]
 800281c:	0601      	lsls	r1, r0, #24
 800281e:	d501      	bpl.n	8002824 <_printf_i+0xec>
 8002820:	681e      	ldr	r6, [r3, #0]
 8002822:	e002      	b.n	800282a <_printf_i+0xf2>
 8002824:	0646      	lsls	r6, r0, #25
 8002826:	d5fb      	bpl.n	8002820 <_printf_i+0xe8>
 8002828:	881e      	ldrh	r6, [r3, #0]
 800282a:	4854      	ldr	r0, [pc, #336]	; (800297c <_printf_i+0x244>)
 800282c:	2f6f      	cmp	r7, #111	; 0x6f
 800282e:	bf0c      	ite	eq
 8002830:	2308      	moveq	r3, #8
 8002832:	230a      	movne	r3, #10
 8002834:	2100      	movs	r1, #0
 8002836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800283a:	6865      	ldr	r5, [r4, #4]
 800283c:	60a5      	str	r5, [r4, #8]
 800283e:	2d00      	cmp	r5, #0
 8002840:	bfa2      	ittt	ge
 8002842:	6821      	ldrge	r1, [r4, #0]
 8002844:	f021 0104 	bicge.w	r1, r1, #4
 8002848:	6021      	strge	r1, [r4, #0]
 800284a:	b90e      	cbnz	r6, 8002850 <_printf_i+0x118>
 800284c:	2d00      	cmp	r5, #0
 800284e:	d04d      	beq.n	80028ec <_printf_i+0x1b4>
 8002850:	4615      	mov	r5, r2
 8002852:	fbb6 f1f3 	udiv	r1, r6, r3
 8002856:	fb03 6711 	mls	r7, r3, r1, r6
 800285a:	5dc7      	ldrb	r7, [r0, r7]
 800285c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002860:	4637      	mov	r7, r6
 8002862:	42bb      	cmp	r3, r7
 8002864:	460e      	mov	r6, r1
 8002866:	d9f4      	bls.n	8002852 <_printf_i+0x11a>
 8002868:	2b08      	cmp	r3, #8
 800286a:	d10b      	bne.n	8002884 <_printf_i+0x14c>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	07de      	lsls	r6, r3, #31
 8002870:	d508      	bpl.n	8002884 <_printf_i+0x14c>
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	6861      	ldr	r1, [r4, #4]
 8002876:	4299      	cmp	r1, r3
 8002878:	bfde      	ittt	le
 800287a:	2330      	movle	r3, #48	; 0x30
 800287c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002884:	1b52      	subs	r2, r2, r5
 8002886:	6122      	str	r2, [r4, #16]
 8002888:	f8cd a000 	str.w	sl, [sp]
 800288c:	464b      	mov	r3, r9
 800288e:	aa03      	add	r2, sp, #12
 8002890:	4621      	mov	r1, r4
 8002892:	4640      	mov	r0, r8
 8002894:	f7ff fee2 	bl	800265c <_printf_common>
 8002898:	3001      	adds	r0, #1
 800289a:	d14c      	bne.n	8002936 <_printf_i+0x1fe>
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	b004      	add	sp, #16
 80028a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a6:	4835      	ldr	r0, [pc, #212]	; (800297c <_printf_i+0x244>)
 80028a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028ac:	6829      	ldr	r1, [r5, #0]
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80028b4:	6029      	str	r1, [r5, #0]
 80028b6:	061d      	lsls	r5, r3, #24
 80028b8:	d514      	bpl.n	80028e4 <_printf_i+0x1ac>
 80028ba:	07df      	lsls	r7, r3, #31
 80028bc:	bf44      	itt	mi
 80028be:	f043 0320 	orrmi.w	r3, r3, #32
 80028c2:	6023      	strmi	r3, [r4, #0]
 80028c4:	b91e      	cbnz	r6, 80028ce <_printf_i+0x196>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	f023 0320 	bic.w	r3, r3, #32
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	2310      	movs	r3, #16
 80028d0:	e7b0      	b.n	8002834 <_printf_i+0xfc>
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	f043 0320 	orr.w	r3, r3, #32
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	2378      	movs	r3, #120	; 0x78
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <_printf_i+0x248>)
 80028de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028e2:	e7e3      	b.n	80028ac <_printf_i+0x174>
 80028e4:	0659      	lsls	r1, r3, #25
 80028e6:	bf48      	it	mi
 80028e8:	b2b6      	uxthmi	r6, r6
 80028ea:	e7e6      	b.n	80028ba <_printf_i+0x182>
 80028ec:	4615      	mov	r5, r2
 80028ee:	e7bb      	b.n	8002868 <_printf_i+0x130>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	6826      	ldr	r6, [r4, #0]
 80028f4:	6961      	ldr	r1, [r4, #20]
 80028f6:	1d18      	adds	r0, r3, #4
 80028f8:	6028      	str	r0, [r5, #0]
 80028fa:	0635      	lsls	r5, r6, #24
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	d501      	bpl.n	8002904 <_printf_i+0x1cc>
 8002900:	6019      	str	r1, [r3, #0]
 8002902:	e002      	b.n	800290a <_printf_i+0x1d2>
 8002904:	0670      	lsls	r0, r6, #25
 8002906:	d5fb      	bpl.n	8002900 <_printf_i+0x1c8>
 8002908:	8019      	strh	r1, [r3, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	6123      	str	r3, [r4, #16]
 800290e:	4615      	mov	r5, r2
 8002910:	e7ba      	b.n	8002888 <_printf_i+0x150>
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	1d1a      	adds	r2, r3, #4
 8002916:	602a      	str	r2, [r5, #0]
 8002918:	681d      	ldr	r5, [r3, #0]
 800291a:	6862      	ldr	r2, [r4, #4]
 800291c:	2100      	movs	r1, #0
 800291e:	4628      	mov	r0, r5
 8002920:	f7fd fc66 	bl	80001f0 <memchr>
 8002924:	b108      	cbz	r0, 800292a <_printf_i+0x1f2>
 8002926:	1b40      	subs	r0, r0, r5
 8002928:	6060      	str	r0, [r4, #4]
 800292a:	6863      	ldr	r3, [r4, #4]
 800292c:	6123      	str	r3, [r4, #16]
 800292e:	2300      	movs	r3, #0
 8002930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002934:	e7a8      	b.n	8002888 <_printf_i+0x150>
 8002936:	6923      	ldr	r3, [r4, #16]
 8002938:	462a      	mov	r2, r5
 800293a:	4649      	mov	r1, r9
 800293c:	4640      	mov	r0, r8
 800293e:	47d0      	blx	sl
 8002940:	3001      	adds	r0, #1
 8002942:	d0ab      	beq.n	800289c <_printf_i+0x164>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	079b      	lsls	r3, r3, #30
 8002948:	d413      	bmi.n	8002972 <_printf_i+0x23a>
 800294a:	68e0      	ldr	r0, [r4, #12]
 800294c:	9b03      	ldr	r3, [sp, #12]
 800294e:	4298      	cmp	r0, r3
 8002950:	bfb8      	it	lt
 8002952:	4618      	movlt	r0, r3
 8002954:	e7a4      	b.n	80028a0 <_printf_i+0x168>
 8002956:	2301      	movs	r3, #1
 8002958:	4632      	mov	r2, r6
 800295a:	4649      	mov	r1, r9
 800295c:	4640      	mov	r0, r8
 800295e:	47d0      	blx	sl
 8002960:	3001      	adds	r0, #1
 8002962:	d09b      	beq.n	800289c <_printf_i+0x164>
 8002964:	3501      	adds	r5, #1
 8002966:	68e3      	ldr	r3, [r4, #12]
 8002968:	9903      	ldr	r1, [sp, #12]
 800296a:	1a5b      	subs	r3, r3, r1
 800296c:	42ab      	cmp	r3, r5
 800296e:	dcf2      	bgt.n	8002956 <_printf_i+0x21e>
 8002970:	e7eb      	b.n	800294a <_printf_i+0x212>
 8002972:	2500      	movs	r5, #0
 8002974:	f104 0619 	add.w	r6, r4, #25
 8002978:	e7f5      	b.n	8002966 <_printf_i+0x22e>
 800297a:	bf00      	nop
 800297c:	08004ed6 	.word	0x08004ed6
 8002980:	08004ee7 	.word	0x08004ee7

08002984 <siprintf>:
 8002984:	b40e      	push	{r1, r2, r3}
 8002986:	b500      	push	{lr}
 8002988:	b09c      	sub	sp, #112	; 0x70
 800298a:	ab1d      	add	r3, sp, #116	; 0x74
 800298c:	9002      	str	r0, [sp, #8]
 800298e:	9006      	str	r0, [sp, #24]
 8002990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002994:	4809      	ldr	r0, [pc, #36]	; (80029bc <siprintf+0x38>)
 8002996:	9107      	str	r1, [sp, #28]
 8002998:	9104      	str	r1, [sp, #16]
 800299a:	4909      	ldr	r1, [pc, #36]	; (80029c0 <siprintf+0x3c>)
 800299c:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a0:	9105      	str	r1, [sp, #20]
 80029a2:	6800      	ldr	r0, [r0, #0]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	a902      	add	r1, sp, #8
 80029a8:	f001 fb78 	bl	800409c <_svfiprintf_r>
 80029ac:	9b02      	ldr	r3, [sp, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	b01c      	add	sp, #112	; 0x70
 80029b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b8:	b003      	add	sp, #12
 80029ba:	4770      	bx	lr
 80029bc:	2000000c 	.word	0x2000000c
 80029c0:	ffff0208 	.word	0xffff0208

080029c4 <quorem>:
 80029c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c8:	6903      	ldr	r3, [r0, #16]
 80029ca:	690c      	ldr	r4, [r1, #16]
 80029cc:	42a3      	cmp	r3, r4
 80029ce:	4607      	mov	r7, r0
 80029d0:	f2c0 8081 	blt.w	8002ad6 <quorem+0x112>
 80029d4:	3c01      	subs	r4, #1
 80029d6:	f101 0814 	add.w	r8, r1, #20
 80029da:	f100 0514 	add.w	r5, r0, #20
 80029de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80029e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80029ec:	3301      	adds	r3, #1
 80029ee:	429a      	cmp	r2, r3
 80029f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80029f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80029f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80029fc:	d331      	bcc.n	8002a62 <quorem+0x9e>
 80029fe:	f04f 0e00 	mov.w	lr, #0
 8002a02:	4640      	mov	r0, r8
 8002a04:	46ac      	mov	ip, r5
 8002a06:	46f2      	mov	sl, lr
 8002a08:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a0c:	b293      	uxth	r3, r2
 8002a0e:	fb06 e303 	mla	r3, r6, r3, lr
 8002a12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	ebaa 0303 	sub.w	r3, sl, r3
 8002a1c:	f8dc a000 	ldr.w	sl, [ip]
 8002a20:	0c12      	lsrs	r2, r2, #16
 8002a22:	fa13 f38a 	uxtah	r3, r3, sl
 8002a26:	fb06 e202 	mla	r2, r6, r2, lr
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	9b00      	ldr	r3, [sp, #0]
 8002a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a32:	b292      	uxth	r2, r2
 8002a34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8002a40:	4581      	cmp	r9, r0
 8002a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a46:	f84c 3b04 	str.w	r3, [ip], #4
 8002a4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002a4e:	d2db      	bcs.n	8002a08 <quorem+0x44>
 8002a50:	f855 300b 	ldr.w	r3, [r5, fp]
 8002a54:	b92b      	cbnz	r3, 8002a62 <quorem+0x9e>
 8002a56:	9b01      	ldr	r3, [sp, #4]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	429d      	cmp	r5, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	d32e      	bcc.n	8002abe <quorem+0xfa>
 8002a60:	613c      	str	r4, [r7, #16]
 8002a62:	4638      	mov	r0, r7
 8002a64:	f001 f8c6 	bl	8003bf4 <__mcmp>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	db24      	blt.n	8002ab6 <quorem+0xf2>
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f04f 0c00 	mov.w	ip, #0
 8002a74:	f858 2b04 	ldr.w	r2, [r8], #4
 8002a78:	f8d0 e000 	ldr.w	lr, [r0]
 8002a7c:	b293      	uxth	r3, r2
 8002a7e:	ebac 0303 	sub.w	r3, ip, r3
 8002a82:	0c12      	lsrs	r2, r2, #16
 8002a84:	fa13 f38e 	uxtah	r3, r3, lr
 8002a88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a96:	45c1      	cmp	r9, r8
 8002a98:	f840 3b04 	str.w	r3, [r0], #4
 8002a9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002aa0:	d2e8      	bcs.n	8002a74 <quorem+0xb0>
 8002aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002aaa:	b922      	cbnz	r2, 8002ab6 <quorem+0xf2>
 8002aac:	3b04      	subs	r3, #4
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	d30a      	bcc.n	8002aca <quorem+0x106>
 8002ab4:	613c      	str	r4, [r7, #16]
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	b003      	add	sp, #12
 8002aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d1cc      	bne.n	8002a60 <quorem+0x9c>
 8002ac6:	3c01      	subs	r4, #1
 8002ac8:	e7c7      	b.n	8002a5a <quorem+0x96>
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	3b04      	subs	r3, #4
 8002ace:	2a00      	cmp	r2, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <quorem+0xf0>
 8002ad2:	3c01      	subs	r4, #1
 8002ad4:	e7eb      	b.n	8002aae <quorem+0xea>
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e7ee      	b.n	8002ab8 <quorem+0xf4>
 8002ada:	0000      	movs	r0, r0
 8002adc:	0000      	movs	r0, r0
	...

08002ae0 <_dtoa_r>:
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	ed2d 8b04 	vpush	{d8-d9}
 8002ae8:	ec57 6b10 	vmov	r6, r7, d0
 8002aec:	b093      	sub	sp, #76	; 0x4c
 8002aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002af4:	9106      	str	r1, [sp, #24]
 8002af6:	ee10 aa10 	vmov	sl, s0
 8002afa:	4604      	mov	r4, r0
 8002afc:	9209      	str	r2, [sp, #36]	; 0x24
 8002afe:	930c      	str	r3, [sp, #48]	; 0x30
 8002b00:	46bb      	mov	fp, r7
 8002b02:	b975      	cbnz	r5, 8002b22 <_dtoa_r+0x42>
 8002b04:	2010      	movs	r0, #16
 8002b06:	f000 fddd 	bl	80036c4 <malloc>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8002b0e:	b920      	cbnz	r0, 8002b1a <_dtoa_r+0x3a>
 8002b10:	4ba7      	ldr	r3, [pc, #668]	; (8002db0 <_dtoa_r+0x2d0>)
 8002b12:	21ea      	movs	r1, #234	; 0xea
 8002b14:	48a7      	ldr	r0, [pc, #668]	; (8002db4 <_dtoa_r+0x2d4>)
 8002b16:	f001 fbd1 	bl	80042bc <__assert_func>
 8002b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b1e:	6005      	str	r5, [r0, #0]
 8002b20:	60c5      	str	r5, [r0, #12]
 8002b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	b151      	cbz	r1, 8002b3e <_dtoa_r+0x5e>
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	604a      	str	r2, [r1, #4]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4093      	lsls	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 fe1c 	bl	8003770 <_Bfree>
 8002b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	1e3b      	subs	r3, r7, #0
 8002b40:	bfaa      	itet	ge
 8002b42:	2300      	movge	r3, #0
 8002b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002b48:	f8c8 3000 	strge.w	r3, [r8]
 8002b4c:	4b9a      	ldr	r3, [pc, #616]	; (8002db8 <_dtoa_r+0x2d8>)
 8002b4e:	bfbc      	itt	lt
 8002b50:	2201      	movlt	r2, #1
 8002b52:	f8c8 2000 	strlt.w	r2, [r8]
 8002b56:	ea33 030b 	bics.w	r3, r3, fp
 8002b5a:	d11b      	bne.n	8002b94 <_dtoa_r+0xb4>
 8002b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002b68:	4333      	orrs	r3, r6
 8002b6a:	f000 8592 	beq.w	8003692 <_dtoa_r+0xbb2>
 8002b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b70:	b963      	cbnz	r3, 8002b8c <_dtoa_r+0xac>
 8002b72:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <_dtoa_r+0x2dc>)
 8002b74:	e022      	b.n	8002bbc <_dtoa_r+0xdc>
 8002b76:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <_dtoa_r+0x2e0>)
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	9801      	ldr	r0, [sp, #4]
 8002b82:	b013      	add	sp, #76	; 0x4c
 8002b84:	ecbd 8b04 	vpop	{d8-d9}
 8002b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8c:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <_dtoa_r+0x2dc>)
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	3303      	adds	r3, #3
 8002b92:	e7f3      	b.n	8002b7c <_dtoa_r+0x9c>
 8002b94:	2200      	movs	r2, #0
 8002b96:	2300      	movs	r3, #0
 8002b98:	4650      	mov	r0, sl
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	f7fd ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ba0:	ec4b ab19 	vmov	d9, sl, fp
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	b158      	cbz	r0, 8002bc0 <_dtoa_r+0xe0>
 8002ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002baa:	2301      	movs	r3, #1
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 856b 	beq.w	800368c <_dtoa_r+0xbac>
 8002bb6:	4883      	ldr	r0, [pc, #524]	; (8002dc4 <_dtoa_r+0x2e4>)
 8002bb8:	6018      	str	r0, [r3, #0]
 8002bba:	1e43      	subs	r3, r0, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	e7df      	b.n	8002b80 <_dtoa_r+0xa0>
 8002bc0:	ec4b ab10 	vmov	d0, sl, fp
 8002bc4:	aa10      	add	r2, sp, #64	; 0x40
 8002bc6:	a911      	add	r1, sp, #68	; 0x44
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f001 f8b9 	bl	8003d40 <__d2b>
 8002bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002bd2:	ee08 0a10 	vmov	s16, r0
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	f000 8084 	beq.w	8002ce4 <_dtoa_r+0x204>
 8002bdc:	ee19 3a90 	vmov	r3, s19
 8002be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002be8:	4656      	mov	r6, sl
 8002bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002bf6:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <_dtoa_r+0x2e8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	4639      	mov	r1, r7
 8002bfe:	f7fd fb4b 	bl	8000298 <__aeabi_dsub>
 8002c02:	a365      	add	r3, pc, #404	; (adr r3, 8002d98 <_dtoa_r+0x2b8>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fcfe 	bl	8000608 <__aeabi_dmul>
 8002c0c:	a364      	add	r3, pc, #400	; (adr r3, 8002da0 <_dtoa_r+0x2c0>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fb43 	bl	800029c <__adddf3>
 8002c16:	4606      	mov	r6, r0
 8002c18:	4628      	mov	r0, r5
 8002c1a:	460f      	mov	r7, r1
 8002c1c:	f7fd fc8a 	bl	8000534 <__aeabi_i2d>
 8002c20:	a361      	add	r3, pc, #388	; (adr r3, 8002da8 <_dtoa_r+0x2c8>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcef 	bl	8000608 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4630      	mov	r0, r6
 8002c30:	4639      	mov	r1, r7
 8002c32:	f7fd fb33 	bl	800029c <__adddf3>
 8002c36:	4606      	mov	r6, r0
 8002c38:	460f      	mov	r7, r1
 8002c3a:	f7fd ff95 	bl	8000b68 <__aeabi_d2iz>
 8002c3e:	2200      	movs	r2, #0
 8002c40:	9000      	str	r0, [sp, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	4630      	mov	r0, r6
 8002c46:	4639      	mov	r1, r7
 8002c48:	f7fd ff50 	bl	8000aec <__aeabi_dcmplt>
 8002c4c:	b150      	cbz	r0, 8002c64 <_dtoa_r+0x184>
 8002c4e:	9800      	ldr	r0, [sp, #0]
 8002c50:	f7fd fc70 	bl	8000534 <__aeabi_i2d>
 8002c54:	4632      	mov	r2, r6
 8002c56:	463b      	mov	r3, r7
 8002c58:	f7fd ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c5c:	b910      	cbnz	r0, 8002c64 <_dtoa_r+0x184>
 8002c5e:	9b00      	ldr	r3, [sp, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	9b00      	ldr	r3, [sp, #0]
 8002c66:	2b16      	cmp	r3, #22
 8002c68:	d85a      	bhi.n	8002d20 <_dtoa_r+0x240>
 8002c6a:	9a00      	ldr	r2, [sp, #0]
 8002c6c:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <_dtoa_r+0x2ec>)
 8002c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	ec51 0b19 	vmov	r0, r1, d9
 8002c7a:	f7fd ff37 	bl	8000aec <__aeabi_dcmplt>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d050      	beq.n	8002d24 <_dtoa_r+0x244>
 8002c82:	9b00      	ldr	r3, [sp, #0]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c8e:	1b5d      	subs	r5, r3, r5
 8002c90:	1e6b      	subs	r3, r5, #1
 8002c92:	9305      	str	r3, [sp, #20]
 8002c94:	bf45      	ittet	mi
 8002c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8002c9a:	9304      	strmi	r3, [sp, #16]
 8002c9c:	2300      	movpl	r3, #0
 8002c9e:	2300      	movmi	r3, #0
 8002ca0:	bf4c      	ite	mi
 8002ca2:	9305      	strmi	r3, [sp, #20]
 8002ca4:	9304      	strpl	r3, [sp, #16]
 8002ca6:	9b00      	ldr	r3, [sp, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db3d      	blt.n	8002d28 <_dtoa_r+0x248>
 8002cac:	9b05      	ldr	r3, [sp, #20]
 8002cae:	9a00      	ldr	r2, [sp, #0]
 8002cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8002cb2:	4413      	add	r3, r2
 8002cb4:	9305      	str	r3, [sp, #20]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9307      	str	r3, [sp, #28]
 8002cba:	9b06      	ldr	r3, [sp, #24]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	f200 8089 	bhi.w	8002dd4 <_dtoa_r+0x2f4>
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	bfc4      	itt	gt
 8002cc6:	3b04      	subgt	r3, #4
 8002cc8:	9306      	strgt	r3, [sp, #24]
 8002cca:	9b06      	ldr	r3, [sp, #24]
 8002ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8002cd0:	bfcc      	ite	gt
 8002cd2:	2500      	movgt	r5, #0
 8002cd4:	2501      	movle	r5, #1
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	f200 8087 	bhi.w	8002dea <_dtoa_r+0x30a>
 8002cdc:	e8df f003 	tbb	[pc, r3]
 8002ce0:	59383a2d 	.word	0x59383a2d
 8002ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002ce8:	441d      	add	r5, r3
 8002cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	bfc1      	itttt	gt
 8002cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8002cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d02:	bfda      	itte	le
 8002d04:	f1c3 0320 	rsble	r3, r3, #32
 8002d08:	fa06 f003 	lslle.w	r0, r6, r3
 8002d0c:	4318      	orrgt	r0, r3
 8002d0e:	f7fd fc01 	bl	8000514 <__aeabi_ui2d>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4606      	mov	r6, r0
 8002d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002d1a:	3d01      	subs	r5, #1
 8002d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8002d1e:	e76a      	b.n	8002bf6 <_dtoa_r+0x116>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e7b2      	b.n	8002c8a <_dtoa_r+0x1aa>
 8002d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8002d26:	e7b1      	b.n	8002c8c <_dtoa_r+0x1ac>
 8002d28:	9b04      	ldr	r3, [sp, #16]
 8002d2a:	9a00      	ldr	r2, [sp, #0]
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	9304      	str	r3, [sp, #16]
 8002d30:	4253      	negs	r3, r2
 8002d32:	9307      	str	r3, [sp, #28]
 8002d34:	2300      	movs	r3, #0
 8002d36:	930a      	str	r3, [sp, #40]	; 0x28
 8002d38:	e7bf      	b.n	8002cba <_dtoa_r+0x1da>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9308      	str	r3, [sp, #32]
 8002d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dc55      	bgt.n	8002df0 <_dtoa_r+0x310>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d4e:	e00c      	b.n	8002d6a <_dtoa_r+0x28a>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e7f3      	b.n	8002d3c <_dtoa_r+0x25c>
 8002d54:	2300      	movs	r3, #0
 8002d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d58:	9308      	str	r3, [sp, #32]
 8002d5a:	9b00      	ldr	r3, [sp, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	9303      	str	r3, [sp, #12]
 8002d66:	bfb8      	it	lt
 8002d68:	2301      	movlt	r3, #1
 8002d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	6042      	str	r2, [r0, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	f102 0614 	add.w	r6, r2, #20
 8002d76:	429e      	cmp	r6, r3
 8002d78:	6841      	ldr	r1, [r0, #4]
 8002d7a:	d93d      	bls.n	8002df8 <_dtoa_r+0x318>
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 fcb7 	bl	80036f0 <_Balloc>
 8002d82:	9001      	str	r0, [sp, #4]
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d13b      	bne.n	8002e00 <_dtoa_r+0x320>
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <_dtoa_r+0x2f0>)
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d90:	e6c0      	b.n	8002b14 <_dtoa_r+0x34>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e7df      	b.n	8002d56 <_dtoa_r+0x276>
 8002d96:	bf00      	nop
 8002d98:	636f4361 	.word	0x636f4361
 8002d9c:	3fd287a7 	.word	0x3fd287a7
 8002da0:	8b60c8b3 	.word	0x8b60c8b3
 8002da4:	3fc68a28 	.word	0x3fc68a28
 8002da8:	509f79fb 	.word	0x509f79fb
 8002dac:	3fd34413 	.word	0x3fd34413
 8002db0:	08004f05 	.word	0x08004f05
 8002db4:	08004f1c 	.word	0x08004f1c
 8002db8:	7ff00000 	.word	0x7ff00000
 8002dbc:	08004f01 	.word	0x08004f01
 8002dc0:	08004ef8 	.word	0x08004ef8
 8002dc4:	08004ed5 	.word	0x08004ed5
 8002dc8:	3ff80000 	.word	0x3ff80000
 8002dcc:	08005010 	.word	0x08005010
 8002dd0:	08004f77 	.word	0x08004f77
 8002dd4:	2501      	movs	r5, #1
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9306      	str	r3, [sp, #24]
 8002dda:	9508      	str	r5, [sp, #32]
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8002de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2312      	movs	r3, #18
 8002de8:	e7b0      	b.n	8002d4c <_dtoa_r+0x26c>
 8002dea:	2301      	movs	r3, #1
 8002dec:	9308      	str	r3, [sp, #32]
 8002dee:	e7f5      	b.n	8002ddc <_dtoa_r+0x2fc>
 8002df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002df6:	e7b8      	b.n	8002d6a <_dtoa_r+0x28a>
 8002df8:	3101      	adds	r1, #1
 8002dfa:	6041      	str	r1, [r0, #4]
 8002dfc:	0052      	lsls	r2, r2, #1
 8002dfe:	e7b8      	b.n	8002d72 <_dtoa_r+0x292>
 8002e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e02:	9a01      	ldr	r2, [sp, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	9b03      	ldr	r3, [sp, #12]
 8002e08:	2b0e      	cmp	r3, #14
 8002e0a:	f200 809d 	bhi.w	8002f48 <_dtoa_r+0x468>
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	f000 809a 	beq.w	8002f48 <_dtoa_r+0x468>
 8002e14:	9b00      	ldr	r3, [sp, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dd32      	ble.n	8002e80 <_dtoa_r+0x3a0>
 8002e1a:	4ab7      	ldr	r2, [pc, #732]	; (80030f8 <_dtoa_r+0x618>)
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	05d8      	lsls	r0, r3, #23
 8002e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002e30:	d516      	bpl.n	8002e60 <_dtoa_r+0x380>
 8002e32:	4bb2      	ldr	r3, [pc, #712]	; (80030fc <_dtoa_r+0x61c>)
 8002e34:	ec51 0b19 	vmov	r0, r1, d9
 8002e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e3c:	f7fd fd0e 	bl	800085c <__aeabi_ddiv>
 8002e40:	f007 070f 	and.w	r7, r7, #15
 8002e44:	4682      	mov	sl, r0
 8002e46:	468b      	mov	fp, r1
 8002e48:	2503      	movs	r5, #3
 8002e4a:	4eac      	ldr	r6, [pc, #688]	; (80030fc <_dtoa_r+0x61c>)
 8002e4c:	b957      	cbnz	r7, 8002e64 <_dtoa_r+0x384>
 8002e4e:	4642      	mov	r2, r8
 8002e50:	464b      	mov	r3, r9
 8002e52:	4650      	mov	r0, sl
 8002e54:	4659      	mov	r1, fp
 8002e56:	f7fd fd01 	bl	800085c <__aeabi_ddiv>
 8002e5a:	4682      	mov	sl, r0
 8002e5c:	468b      	mov	fp, r1
 8002e5e:	e028      	b.n	8002eb2 <_dtoa_r+0x3d2>
 8002e60:	2502      	movs	r5, #2
 8002e62:	e7f2      	b.n	8002e4a <_dtoa_r+0x36a>
 8002e64:	07f9      	lsls	r1, r7, #31
 8002e66:	d508      	bpl.n	8002e7a <_dtoa_r+0x39a>
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002e70:	f7fd fbca 	bl	8000608 <__aeabi_dmul>
 8002e74:	3501      	adds	r5, #1
 8002e76:	4680      	mov	r8, r0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	107f      	asrs	r7, r7, #1
 8002e7c:	3608      	adds	r6, #8
 8002e7e:	e7e5      	b.n	8002e4c <_dtoa_r+0x36c>
 8002e80:	f000 809b 	beq.w	8002fba <_dtoa_r+0x4da>
 8002e84:	9b00      	ldr	r3, [sp, #0]
 8002e86:	4f9d      	ldr	r7, [pc, #628]	; (80030fc <_dtoa_r+0x61c>)
 8002e88:	425e      	negs	r6, r3
 8002e8a:	4b9b      	ldr	r3, [pc, #620]	; (80030f8 <_dtoa_r+0x618>)
 8002e8c:	f006 020f 	and.w	r2, r6, #15
 8002e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	ec51 0b19 	vmov	r0, r1, d9
 8002e9c:	f7fd fbb4 	bl	8000608 <__aeabi_dmul>
 8002ea0:	1136      	asrs	r6, r6, #4
 8002ea2:	4682      	mov	sl, r0
 8002ea4:	468b      	mov	fp, r1
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2502      	movs	r5, #2
 8002eaa:	2e00      	cmp	r6, #0
 8002eac:	d17a      	bne.n	8002fa4 <_dtoa_r+0x4c4>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1d3      	bne.n	8002e5a <_dtoa_r+0x37a>
 8002eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8082 	beq.w	8002fbe <_dtoa_r+0x4de>
 8002eba:	4b91      	ldr	r3, [pc, #580]	; (8003100 <_dtoa_r+0x620>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4650      	mov	r0, sl
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	f7fd fe13 	bl	8000aec <__aeabi_dcmplt>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d079      	beq.n	8002fbe <_dtoa_r+0x4de>
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d076      	beq.n	8002fbe <_dtoa_r+0x4de>
 8002ed0:	9b02      	ldr	r3, [sp, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dd36      	ble.n	8002f44 <_dtoa_r+0x464>
 8002ed6:	9b00      	ldr	r3, [sp, #0]
 8002ed8:	4650      	mov	r0, sl
 8002eda:	4659      	mov	r1, fp
 8002edc:	1e5f      	subs	r7, r3, #1
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <_dtoa_r+0x624>)
 8002ee2:	f7fd fb91 	bl	8000608 <__aeabi_dmul>
 8002ee6:	9e02      	ldr	r6, [sp, #8]
 8002ee8:	4682      	mov	sl, r0
 8002eea:	468b      	mov	fp, r1
 8002eec:	3501      	adds	r5, #1
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f7fd fb20 	bl	8000534 <__aeabi_i2d>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	465b      	mov	r3, fp
 8002ef8:	f7fd fb86 	bl	8000608 <__aeabi_dmul>
 8002efc:	4b82      	ldr	r3, [pc, #520]	; (8003108 <_dtoa_r+0x628>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	f7fd f9cc 	bl	800029c <__adddf3>
 8002f04:	46d0      	mov	r8, sl
 8002f06:	46d9      	mov	r9, fp
 8002f08:	4682      	mov	sl, r0
 8002f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8002f0e:	2e00      	cmp	r6, #0
 8002f10:	d158      	bne.n	8002fc4 <_dtoa_r+0x4e4>
 8002f12:	4b7e      	ldr	r3, [pc, #504]	; (800310c <_dtoa_r+0x62c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	4640      	mov	r0, r8
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f7fd f9bd 	bl	8000298 <__aeabi_dsub>
 8002f1e:	4652      	mov	r2, sl
 8002f20:	465b      	mov	r3, fp
 8002f22:	4680      	mov	r8, r0
 8002f24:	4689      	mov	r9, r1
 8002f26:	f7fd fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	f040 8295 	bne.w	800345a <_dtoa_r+0x97a>
 8002f30:	4652      	mov	r2, sl
 8002f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f7fd fdd7 	bl	8000aec <__aeabi_dcmplt>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	f040 8289 	bne.w	8003456 <_dtoa_r+0x976>
 8002f44:	ec5b ab19 	vmov	sl, fp, d9
 8002f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f2c0 8148 	blt.w	80031e0 <_dtoa_r+0x700>
 8002f50:	9a00      	ldr	r2, [sp, #0]
 8002f52:	2a0e      	cmp	r2, #14
 8002f54:	f300 8144 	bgt.w	80031e0 <_dtoa_r+0x700>
 8002f58:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <_dtoa_r+0x618>)
 8002f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f280 80d5 	bge.w	8003114 <_dtoa_r+0x634>
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f300 80d1 	bgt.w	8003114 <_dtoa_r+0x634>
 8002f72:	f040 826f 	bne.w	8003454 <_dtoa_r+0x974>
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <_dtoa_r+0x62c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	f7fd fb43 	bl	8000608 <__aeabi_dmul>
 8002f82:	4652      	mov	r2, sl
 8002f84:	465b      	mov	r3, fp
 8002f86:	f7fd fdc5 	bl	8000b14 <__aeabi_dcmpge>
 8002f8a:	9e03      	ldr	r6, [sp, #12]
 8002f8c:	4637      	mov	r7, r6
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	f040 8245 	bne.w	800341e <_dtoa_r+0x93e>
 8002f94:	9d01      	ldr	r5, [sp, #4]
 8002f96:	2331      	movs	r3, #49	; 0x31
 8002f98:	f805 3b01 	strb.w	r3, [r5], #1
 8002f9c:	9b00      	ldr	r3, [sp, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	e240      	b.n	8003426 <_dtoa_r+0x946>
 8002fa4:	07f2      	lsls	r2, r6, #31
 8002fa6:	d505      	bpl.n	8002fb4 <_dtoa_r+0x4d4>
 8002fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fac:	f7fd fb2c 	bl	8000608 <__aeabi_dmul>
 8002fb0:	3501      	adds	r5, #1
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	1076      	asrs	r6, r6, #1
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	e777      	b.n	8002eaa <_dtoa_r+0x3ca>
 8002fba:	2502      	movs	r5, #2
 8002fbc:	e779      	b.n	8002eb2 <_dtoa_r+0x3d2>
 8002fbe:	9f00      	ldr	r7, [sp, #0]
 8002fc0:	9e03      	ldr	r6, [sp, #12]
 8002fc2:	e794      	b.n	8002eee <_dtoa_r+0x40e>
 8002fc4:	9901      	ldr	r1, [sp, #4]
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <_dtoa_r+0x618>)
 8002fc8:	4431      	add	r1, r6
 8002fca:	910d      	str	r1, [sp, #52]	; 0x34
 8002fcc:	9908      	ldr	r1, [sp, #32]
 8002fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	d043      	beq.n	8003062 <_dtoa_r+0x582>
 8002fda:	494d      	ldr	r1, [pc, #308]	; (8003110 <_dtoa_r+0x630>)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fc3d 	bl	800085c <__aeabi_ddiv>
 8002fe2:	4652      	mov	r2, sl
 8002fe4:	465b      	mov	r3, fp
 8002fe6:	f7fd f957 	bl	8000298 <__aeabi_dsub>
 8002fea:	9d01      	ldr	r5, [sp, #4]
 8002fec:	4682      	mov	sl, r0
 8002fee:	468b      	mov	fp, r1
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	f7fd fdb8 	bl	8000b68 <__aeabi_d2iz>
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	f7fd fa9b 	bl	8000534 <__aeabi_i2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f7fd f947 	bl	8000298 <__aeabi_dsub>
 800300a:	3630      	adds	r6, #48	; 0x30
 800300c:	f805 6b01 	strb.w	r6, [r5], #1
 8003010:	4652      	mov	r2, sl
 8003012:	465b      	mov	r3, fp
 8003014:	4680      	mov	r8, r0
 8003016:	4689      	mov	r9, r1
 8003018:	f7fd fd68 	bl	8000aec <__aeabi_dcmplt>
 800301c:	2800      	cmp	r0, #0
 800301e:	d163      	bne.n	80030e8 <_dtoa_r+0x608>
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	4936      	ldr	r1, [pc, #216]	; (8003100 <_dtoa_r+0x620>)
 8003026:	2000      	movs	r0, #0
 8003028:	f7fd f936 	bl	8000298 <__aeabi_dsub>
 800302c:	4652      	mov	r2, sl
 800302e:	465b      	mov	r3, fp
 8003030:	f7fd fd5c 	bl	8000aec <__aeabi_dcmplt>
 8003034:	2800      	cmp	r0, #0
 8003036:	f040 80b5 	bne.w	80031a4 <_dtoa_r+0x6c4>
 800303a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800303c:	429d      	cmp	r5, r3
 800303e:	d081      	beq.n	8002f44 <_dtoa_r+0x464>
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <_dtoa_r+0x624>)
 8003042:	2200      	movs	r2, #0
 8003044:	4650      	mov	r0, sl
 8003046:	4659      	mov	r1, fp
 8003048:	f7fd fade 	bl	8000608 <__aeabi_dmul>
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <_dtoa_r+0x624>)
 800304e:	4682      	mov	sl, r0
 8003050:	468b      	mov	fp, r1
 8003052:	4640      	mov	r0, r8
 8003054:	4649      	mov	r1, r9
 8003056:	2200      	movs	r2, #0
 8003058:	f7fd fad6 	bl	8000608 <__aeabi_dmul>
 800305c:	4680      	mov	r8, r0
 800305e:	4689      	mov	r9, r1
 8003060:	e7c6      	b.n	8002ff0 <_dtoa_r+0x510>
 8003062:	4650      	mov	r0, sl
 8003064:	4659      	mov	r1, fp
 8003066:	f7fd facf 	bl	8000608 <__aeabi_dmul>
 800306a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800306c:	9d01      	ldr	r5, [sp, #4]
 800306e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003070:	4682      	mov	sl, r0
 8003072:	468b      	mov	fp, r1
 8003074:	4649      	mov	r1, r9
 8003076:	4640      	mov	r0, r8
 8003078:	f7fd fd76 	bl	8000b68 <__aeabi_d2iz>
 800307c:	4606      	mov	r6, r0
 800307e:	f7fd fa59 	bl	8000534 <__aeabi_i2d>
 8003082:	3630      	adds	r6, #48	; 0x30
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4640      	mov	r0, r8
 800308a:	4649      	mov	r1, r9
 800308c:	f7fd f904 	bl	8000298 <__aeabi_dsub>
 8003090:	f805 6b01 	strb.w	r6, [r5], #1
 8003094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003096:	429d      	cmp	r5, r3
 8003098:	4680      	mov	r8, r0
 800309a:	4689      	mov	r9, r1
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	d124      	bne.n	80030ec <_dtoa_r+0x60c>
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <_dtoa_r+0x630>)
 80030a4:	4650      	mov	r0, sl
 80030a6:	4659      	mov	r1, fp
 80030a8:	f7fd f8f8 	bl	800029c <__adddf3>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d173      	bne.n	80031a4 <_dtoa_r+0x6c4>
 80030bc:	4652      	mov	r2, sl
 80030be:	465b      	mov	r3, fp
 80030c0:	4913      	ldr	r1, [pc, #76]	; (8003110 <_dtoa_r+0x630>)
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fd f8e8 	bl	8000298 <__aeabi_dsub>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4640      	mov	r0, r8
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7fd fd0c 	bl	8000aec <__aeabi_dcmplt>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	f43f af35 	beq.w	8002f44 <_dtoa_r+0x464>
 80030da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80030dc:	1e6b      	subs	r3, r5, #1
 80030de:	930f      	str	r3, [sp, #60]	; 0x3c
 80030e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d0f8      	beq.n	80030da <_dtoa_r+0x5fa>
 80030e8:	9700      	str	r7, [sp, #0]
 80030ea:	e049      	b.n	8003180 <_dtoa_r+0x6a0>
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <_dtoa_r+0x624>)
 80030ee:	f7fd fa8b 	bl	8000608 <__aeabi_dmul>
 80030f2:	4680      	mov	r8, r0
 80030f4:	4689      	mov	r9, r1
 80030f6:	e7bd      	b.n	8003074 <_dtoa_r+0x594>
 80030f8:	08005010 	.word	0x08005010
 80030fc:	08004fe8 	.word	0x08004fe8
 8003100:	3ff00000 	.word	0x3ff00000
 8003104:	40240000 	.word	0x40240000
 8003108:	401c0000 	.word	0x401c0000
 800310c:	40140000 	.word	0x40140000
 8003110:	3fe00000 	.word	0x3fe00000
 8003114:	9d01      	ldr	r5, [sp, #4]
 8003116:	4656      	mov	r6, sl
 8003118:	465f      	mov	r7, fp
 800311a:	4642      	mov	r2, r8
 800311c:	464b      	mov	r3, r9
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	f7fd fb9b 	bl	800085c <__aeabi_ddiv>
 8003126:	f7fd fd1f 	bl	8000b68 <__aeabi_d2iz>
 800312a:	4682      	mov	sl, r0
 800312c:	f7fd fa02 	bl	8000534 <__aeabi_i2d>
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	f7fd fa68 	bl	8000608 <__aeabi_dmul>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4630      	mov	r0, r6
 800313e:	4639      	mov	r1, r7
 8003140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003144:	f7fd f8a8 	bl	8000298 <__aeabi_dsub>
 8003148:	f805 6b01 	strb.w	r6, [r5], #1
 800314c:	9e01      	ldr	r6, [sp, #4]
 800314e:	9f03      	ldr	r7, [sp, #12]
 8003150:	1bae      	subs	r6, r5, r6
 8003152:	42b7      	cmp	r7, r6
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	d135      	bne.n	80031c6 <_dtoa_r+0x6e6>
 800315a:	f7fd f89f 	bl	800029c <__adddf3>
 800315e:	4642      	mov	r2, r8
 8003160:	464b      	mov	r3, r9
 8003162:	4606      	mov	r6, r0
 8003164:	460f      	mov	r7, r1
 8003166:	f7fd fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800316a:	b9d0      	cbnz	r0, 80031a2 <_dtoa_r+0x6c2>
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	4630      	mov	r0, r6
 8003172:	4639      	mov	r1, r7
 8003174:	f7fd fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8003178:	b110      	cbz	r0, 8003180 <_dtoa_r+0x6a0>
 800317a:	f01a 0f01 	tst.w	sl, #1
 800317e:	d110      	bne.n	80031a2 <_dtoa_r+0x6c2>
 8003180:	4620      	mov	r0, r4
 8003182:	ee18 1a10 	vmov	r1, s16
 8003186:	f000 faf3 	bl	8003770 <_Bfree>
 800318a:	2300      	movs	r3, #0
 800318c:	9800      	ldr	r0, [sp, #0]
 800318e:	702b      	strb	r3, [r5, #0]
 8003190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003192:	3001      	adds	r0, #1
 8003194:	6018      	str	r0, [r3, #0]
 8003196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003198:	2b00      	cmp	r3, #0
 800319a:	f43f acf1 	beq.w	8002b80 <_dtoa_r+0xa0>
 800319e:	601d      	str	r5, [r3, #0]
 80031a0:	e4ee      	b.n	8002b80 <_dtoa_r+0xa0>
 80031a2:	9f00      	ldr	r7, [sp, #0]
 80031a4:	462b      	mov	r3, r5
 80031a6:	461d      	mov	r5, r3
 80031a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031ac:	2a39      	cmp	r2, #57	; 0x39
 80031ae:	d106      	bne.n	80031be <_dtoa_r+0x6de>
 80031b0:	9a01      	ldr	r2, [sp, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d1f7      	bne.n	80031a6 <_dtoa_r+0x6c6>
 80031b6:	9901      	ldr	r1, [sp, #4]
 80031b8:	2230      	movs	r2, #48	; 0x30
 80031ba:	3701      	adds	r7, #1
 80031bc:	700a      	strb	r2, [r1, #0]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	3201      	adds	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e790      	b.n	80030e8 <_dtoa_r+0x608>
 80031c6:	4ba6      	ldr	r3, [pc, #664]	; (8003460 <_dtoa_r+0x980>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	f7fd fa1d 	bl	8000608 <__aeabi_dmul>
 80031ce:	2200      	movs	r2, #0
 80031d0:	2300      	movs	r3, #0
 80031d2:	4606      	mov	r6, r0
 80031d4:	460f      	mov	r7, r1
 80031d6:	f7fd fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80031da:	2800      	cmp	r0, #0
 80031dc:	d09d      	beq.n	800311a <_dtoa_r+0x63a>
 80031de:	e7cf      	b.n	8003180 <_dtoa_r+0x6a0>
 80031e0:	9a08      	ldr	r2, [sp, #32]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	f000 80d7 	beq.w	8003396 <_dtoa_r+0x8b6>
 80031e8:	9a06      	ldr	r2, [sp, #24]
 80031ea:	2a01      	cmp	r2, #1
 80031ec:	f300 80ba 	bgt.w	8003364 <_dtoa_r+0x884>
 80031f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	f000 80b2 	beq.w	800335c <_dtoa_r+0x87c>
 80031f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80031fc:	9e07      	ldr	r6, [sp, #28]
 80031fe:	9d04      	ldr	r5, [sp, #16]
 8003200:	9a04      	ldr	r2, [sp, #16]
 8003202:	441a      	add	r2, r3
 8003204:	9204      	str	r2, [sp, #16]
 8003206:	9a05      	ldr	r2, [sp, #20]
 8003208:	2101      	movs	r1, #1
 800320a:	441a      	add	r2, r3
 800320c:	4620      	mov	r0, r4
 800320e:	9205      	str	r2, [sp, #20]
 8003210:	f000 fb66 	bl	80038e0 <__i2b>
 8003214:	4607      	mov	r7, r0
 8003216:	2d00      	cmp	r5, #0
 8003218:	dd0c      	ble.n	8003234 <_dtoa_r+0x754>
 800321a:	9b05      	ldr	r3, [sp, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dd09      	ble.n	8003234 <_dtoa_r+0x754>
 8003220:	42ab      	cmp	r3, r5
 8003222:	9a04      	ldr	r2, [sp, #16]
 8003224:	bfa8      	it	ge
 8003226:	462b      	movge	r3, r5
 8003228:	1ad2      	subs	r2, r2, r3
 800322a:	9204      	str	r2, [sp, #16]
 800322c:	9a05      	ldr	r2, [sp, #20]
 800322e:	1aed      	subs	r5, r5, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	9305      	str	r3, [sp, #20]
 8003234:	9b07      	ldr	r3, [sp, #28]
 8003236:	b31b      	cbz	r3, 8003280 <_dtoa_r+0x7a0>
 8003238:	9b08      	ldr	r3, [sp, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80af 	beq.w	800339e <_dtoa_r+0x8be>
 8003240:	2e00      	cmp	r6, #0
 8003242:	dd13      	ble.n	800326c <_dtoa_r+0x78c>
 8003244:	4639      	mov	r1, r7
 8003246:	4632      	mov	r2, r6
 8003248:	4620      	mov	r0, r4
 800324a:	f000 fc09 	bl	8003a60 <__pow5mult>
 800324e:	ee18 2a10 	vmov	r2, s16
 8003252:	4601      	mov	r1, r0
 8003254:	4607      	mov	r7, r0
 8003256:	4620      	mov	r0, r4
 8003258:	f000 fb58 	bl	800390c <__multiply>
 800325c:	ee18 1a10 	vmov	r1, s16
 8003260:	4680      	mov	r8, r0
 8003262:	4620      	mov	r0, r4
 8003264:	f000 fa84 	bl	8003770 <_Bfree>
 8003268:	ee08 8a10 	vmov	s16, r8
 800326c:	9b07      	ldr	r3, [sp, #28]
 800326e:	1b9a      	subs	r2, r3, r6
 8003270:	d006      	beq.n	8003280 <_dtoa_r+0x7a0>
 8003272:	ee18 1a10 	vmov	r1, s16
 8003276:	4620      	mov	r0, r4
 8003278:	f000 fbf2 	bl	8003a60 <__pow5mult>
 800327c:	ee08 0a10 	vmov	s16, r0
 8003280:	2101      	movs	r1, #1
 8003282:	4620      	mov	r0, r4
 8003284:	f000 fb2c 	bl	80038e0 <__i2b>
 8003288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	4606      	mov	r6, r0
 800328e:	f340 8088 	ble.w	80033a2 <_dtoa_r+0x8c2>
 8003292:	461a      	mov	r2, r3
 8003294:	4601      	mov	r1, r0
 8003296:	4620      	mov	r0, r4
 8003298:	f000 fbe2 	bl	8003a60 <__pow5mult>
 800329c:	9b06      	ldr	r3, [sp, #24]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	4606      	mov	r6, r0
 80032a2:	f340 8081 	ble.w	80033a8 <_dtoa_r+0x8c8>
 80032a6:	f04f 0800 	mov.w	r8, #0
 80032aa:	6933      	ldr	r3, [r6, #16]
 80032ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80032b0:	6918      	ldr	r0, [r3, #16]
 80032b2:	f000 fac5 	bl	8003840 <__hi0bits>
 80032b6:	f1c0 0020 	rsb	r0, r0, #32
 80032ba:	9b05      	ldr	r3, [sp, #20]
 80032bc:	4418      	add	r0, r3
 80032be:	f010 001f 	ands.w	r0, r0, #31
 80032c2:	f000 8092 	beq.w	80033ea <_dtoa_r+0x90a>
 80032c6:	f1c0 0320 	rsb	r3, r0, #32
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	f340 808a 	ble.w	80033e4 <_dtoa_r+0x904>
 80032d0:	f1c0 001c 	rsb	r0, r0, #28
 80032d4:	9b04      	ldr	r3, [sp, #16]
 80032d6:	4403      	add	r3, r0
 80032d8:	9304      	str	r3, [sp, #16]
 80032da:	9b05      	ldr	r3, [sp, #20]
 80032dc:	4403      	add	r3, r0
 80032de:	4405      	add	r5, r0
 80032e0:	9305      	str	r3, [sp, #20]
 80032e2:	9b04      	ldr	r3, [sp, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	dd07      	ble.n	80032f8 <_dtoa_r+0x818>
 80032e8:	ee18 1a10 	vmov	r1, s16
 80032ec:	461a      	mov	r2, r3
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 fc10 	bl	8003b14 <__lshift>
 80032f4:	ee08 0a10 	vmov	s16, r0
 80032f8:	9b05      	ldr	r3, [sp, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dd05      	ble.n	800330a <_dtoa_r+0x82a>
 80032fe:	4631      	mov	r1, r6
 8003300:	461a      	mov	r2, r3
 8003302:	4620      	mov	r0, r4
 8003304:	f000 fc06 	bl	8003b14 <__lshift>
 8003308:	4606      	mov	r6, r0
 800330a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06e      	beq.n	80033ee <_dtoa_r+0x90e>
 8003310:	ee18 0a10 	vmov	r0, s16
 8003314:	4631      	mov	r1, r6
 8003316:	f000 fc6d 	bl	8003bf4 <__mcmp>
 800331a:	2800      	cmp	r0, #0
 800331c:	da67      	bge.n	80033ee <_dtoa_r+0x90e>
 800331e:	9b00      	ldr	r3, [sp, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	ee18 1a10 	vmov	r1, s16
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	220a      	movs	r2, #10
 800332a:	2300      	movs	r3, #0
 800332c:	4620      	mov	r0, r4
 800332e:	f000 fa41 	bl	80037b4 <__multadd>
 8003332:	9b08      	ldr	r3, [sp, #32]
 8003334:	ee08 0a10 	vmov	s16, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 81b1 	beq.w	80036a0 <_dtoa_r+0xbc0>
 800333e:	2300      	movs	r3, #0
 8003340:	4639      	mov	r1, r7
 8003342:	220a      	movs	r2, #10
 8003344:	4620      	mov	r0, r4
 8003346:	f000 fa35 	bl	80037b4 <__multadd>
 800334a:	9b02      	ldr	r3, [sp, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	4607      	mov	r7, r0
 8003350:	f300 808e 	bgt.w	8003470 <_dtoa_r+0x990>
 8003354:	9b06      	ldr	r3, [sp, #24]
 8003356:	2b02      	cmp	r3, #2
 8003358:	dc51      	bgt.n	80033fe <_dtoa_r+0x91e>
 800335a:	e089      	b.n	8003470 <_dtoa_r+0x990>
 800335c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800335e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003362:	e74b      	b.n	80031fc <_dtoa_r+0x71c>
 8003364:	9b03      	ldr	r3, [sp, #12]
 8003366:	1e5e      	subs	r6, r3, #1
 8003368:	9b07      	ldr	r3, [sp, #28]
 800336a:	42b3      	cmp	r3, r6
 800336c:	bfbf      	itttt	lt
 800336e:	9b07      	ldrlt	r3, [sp, #28]
 8003370:	9607      	strlt	r6, [sp, #28]
 8003372:	1af2      	sublt	r2, r6, r3
 8003374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003376:	bfb6      	itet	lt
 8003378:	189b      	addlt	r3, r3, r2
 800337a:	1b9e      	subge	r6, r3, r6
 800337c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	bfb8      	it	lt
 8003382:	2600      	movlt	r6, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfb7      	itett	lt
 8003388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800338c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003390:	1a9d      	sublt	r5, r3, r2
 8003392:	2300      	movlt	r3, #0
 8003394:	e734      	b.n	8003200 <_dtoa_r+0x720>
 8003396:	9e07      	ldr	r6, [sp, #28]
 8003398:	9d04      	ldr	r5, [sp, #16]
 800339a:	9f08      	ldr	r7, [sp, #32]
 800339c:	e73b      	b.n	8003216 <_dtoa_r+0x736>
 800339e:	9a07      	ldr	r2, [sp, #28]
 80033a0:	e767      	b.n	8003272 <_dtoa_r+0x792>
 80033a2:	9b06      	ldr	r3, [sp, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	dc18      	bgt.n	80033da <_dtoa_r+0x8fa>
 80033a8:	f1ba 0f00 	cmp.w	sl, #0
 80033ac:	d115      	bne.n	80033da <_dtoa_r+0x8fa>
 80033ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80033b2:	b993      	cbnz	r3, 80033da <_dtoa_r+0x8fa>
 80033b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	b183      	cbz	r3, 80033e0 <_dtoa_r+0x900>
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	3301      	adds	r3, #1
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	9b05      	ldr	r3, [sp, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	9305      	str	r3, [sp, #20]
 80033ca:	f04f 0801 	mov.w	r8, #1
 80033ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f47f af6a 	bne.w	80032aa <_dtoa_r+0x7ca>
 80033d6:	2001      	movs	r0, #1
 80033d8:	e76f      	b.n	80032ba <_dtoa_r+0x7da>
 80033da:	f04f 0800 	mov.w	r8, #0
 80033de:	e7f6      	b.n	80033ce <_dtoa_r+0x8ee>
 80033e0:	4698      	mov	r8, r3
 80033e2:	e7f4      	b.n	80033ce <_dtoa_r+0x8ee>
 80033e4:	f43f af7d 	beq.w	80032e2 <_dtoa_r+0x802>
 80033e8:	4618      	mov	r0, r3
 80033ea:	301c      	adds	r0, #28
 80033ec:	e772      	b.n	80032d4 <_dtoa_r+0x7f4>
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	dc37      	bgt.n	8003464 <_dtoa_r+0x984>
 80033f4:	9b06      	ldr	r3, [sp, #24]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	dd34      	ble.n	8003464 <_dtoa_r+0x984>
 80033fa:	9b03      	ldr	r3, [sp, #12]
 80033fc:	9302      	str	r3, [sp, #8]
 80033fe:	9b02      	ldr	r3, [sp, #8]
 8003400:	b96b      	cbnz	r3, 800341e <_dtoa_r+0x93e>
 8003402:	4631      	mov	r1, r6
 8003404:	2205      	movs	r2, #5
 8003406:	4620      	mov	r0, r4
 8003408:	f000 f9d4 	bl	80037b4 <__multadd>
 800340c:	4601      	mov	r1, r0
 800340e:	4606      	mov	r6, r0
 8003410:	ee18 0a10 	vmov	r0, s16
 8003414:	f000 fbee 	bl	8003bf4 <__mcmp>
 8003418:	2800      	cmp	r0, #0
 800341a:	f73f adbb 	bgt.w	8002f94 <_dtoa_r+0x4b4>
 800341e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003420:	9d01      	ldr	r5, [sp, #4]
 8003422:	43db      	mvns	r3, r3
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 0800 	mov.w	r8, #0
 800342a:	4631      	mov	r1, r6
 800342c:	4620      	mov	r0, r4
 800342e:	f000 f99f 	bl	8003770 <_Bfree>
 8003432:	2f00      	cmp	r7, #0
 8003434:	f43f aea4 	beq.w	8003180 <_dtoa_r+0x6a0>
 8003438:	f1b8 0f00 	cmp.w	r8, #0
 800343c:	d005      	beq.n	800344a <_dtoa_r+0x96a>
 800343e:	45b8      	cmp	r8, r7
 8003440:	d003      	beq.n	800344a <_dtoa_r+0x96a>
 8003442:	4641      	mov	r1, r8
 8003444:	4620      	mov	r0, r4
 8003446:	f000 f993 	bl	8003770 <_Bfree>
 800344a:	4639      	mov	r1, r7
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f98f 	bl	8003770 <_Bfree>
 8003452:	e695      	b.n	8003180 <_dtoa_r+0x6a0>
 8003454:	2600      	movs	r6, #0
 8003456:	4637      	mov	r7, r6
 8003458:	e7e1      	b.n	800341e <_dtoa_r+0x93e>
 800345a:	9700      	str	r7, [sp, #0]
 800345c:	4637      	mov	r7, r6
 800345e:	e599      	b.n	8002f94 <_dtoa_r+0x4b4>
 8003460:	40240000 	.word	0x40240000
 8003464:	9b08      	ldr	r3, [sp, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80ca 	beq.w	8003600 <_dtoa_r+0xb20>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	2d00      	cmp	r5, #0
 8003472:	dd05      	ble.n	8003480 <_dtoa_r+0x9a0>
 8003474:	4639      	mov	r1, r7
 8003476:	462a      	mov	r2, r5
 8003478:	4620      	mov	r0, r4
 800347a:	f000 fb4b 	bl	8003b14 <__lshift>
 800347e:	4607      	mov	r7, r0
 8003480:	f1b8 0f00 	cmp.w	r8, #0
 8003484:	d05b      	beq.n	800353e <_dtoa_r+0xa5e>
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4620      	mov	r0, r4
 800348a:	f000 f931 	bl	80036f0 <_Balloc>
 800348e:	4605      	mov	r5, r0
 8003490:	b928      	cbnz	r0, 800349e <_dtoa_r+0x9be>
 8003492:	4b87      	ldr	r3, [pc, #540]	; (80036b0 <_dtoa_r+0xbd0>)
 8003494:	4602      	mov	r2, r0
 8003496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800349a:	f7ff bb3b 	b.w	8002b14 <_dtoa_r+0x34>
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	3202      	adds	r2, #2
 80034a2:	0092      	lsls	r2, r2, #2
 80034a4:	f107 010c 	add.w	r1, r7, #12
 80034a8:	300c      	adds	r0, #12
 80034aa:	f000 f913 	bl	80036d4 <memcpy>
 80034ae:	2201      	movs	r2, #1
 80034b0:	4629      	mov	r1, r5
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 fb2e 	bl	8003b14 <__lshift>
 80034b8:	9b01      	ldr	r3, [sp, #4]
 80034ba:	f103 0901 	add.w	r9, r3, #1
 80034be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	9305      	str	r3, [sp, #20]
 80034c6:	f00a 0301 	and.w	r3, sl, #1
 80034ca:	46b8      	mov	r8, r7
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	4607      	mov	r7, r0
 80034d0:	4631      	mov	r1, r6
 80034d2:	ee18 0a10 	vmov	r0, s16
 80034d6:	f7ff fa75 	bl	80029c4 <quorem>
 80034da:	4641      	mov	r1, r8
 80034dc:	9002      	str	r0, [sp, #8]
 80034de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80034e2:	ee18 0a10 	vmov	r0, s16
 80034e6:	f000 fb85 	bl	8003bf4 <__mcmp>
 80034ea:	463a      	mov	r2, r7
 80034ec:	9003      	str	r0, [sp, #12]
 80034ee:	4631      	mov	r1, r6
 80034f0:	4620      	mov	r0, r4
 80034f2:	f000 fb9b 	bl	8003c2c <__mdiff>
 80034f6:	68c2      	ldr	r2, [r0, #12]
 80034f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80034fc:	4605      	mov	r5, r0
 80034fe:	bb02      	cbnz	r2, 8003542 <_dtoa_r+0xa62>
 8003500:	4601      	mov	r1, r0
 8003502:	ee18 0a10 	vmov	r0, s16
 8003506:	f000 fb75 	bl	8003bf4 <__mcmp>
 800350a:	4602      	mov	r2, r0
 800350c:	4629      	mov	r1, r5
 800350e:	4620      	mov	r0, r4
 8003510:	9207      	str	r2, [sp, #28]
 8003512:	f000 f92d 	bl	8003770 <_Bfree>
 8003516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800351a:	ea43 0102 	orr.w	r1, r3, r2
 800351e:	9b04      	ldr	r3, [sp, #16]
 8003520:	430b      	orrs	r3, r1
 8003522:	464d      	mov	r5, r9
 8003524:	d10f      	bne.n	8003546 <_dtoa_r+0xa66>
 8003526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800352a:	d02a      	beq.n	8003582 <_dtoa_r+0xaa2>
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dd02      	ble.n	8003538 <_dtoa_r+0xa58>
 8003532:	9b02      	ldr	r3, [sp, #8]
 8003534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003538:	f88b a000 	strb.w	sl, [fp]
 800353c:	e775      	b.n	800342a <_dtoa_r+0x94a>
 800353e:	4638      	mov	r0, r7
 8003540:	e7ba      	b.n	80034b8 <_dtoa_r+0x9d8>
 8003542:	2201      	movs	r2, #1
 8003544:	e7e2      	b.n	800350c <_dtoa_r+0xa2c>
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db04      	blt.n	8003556 <_dtoa_r+0xa76>
 800354c:	9906      	ldr	r1, [sp, #24]
 800354e:	430b      	orrs	r3, r1
 8003550:	9904      	ldr	r1, [sp, #16]
 8003552:	430b      	orrs	r3, r1
 8003554:	d122      	bne.n	800359c <_dtoa_r+0xabc>
 8003556:	2a00      	cmp	r2, #0
 8003558:	ddee      	ble.n	8003538 <_dtoa_r+0xa58>
 800355a:	ee18 1a10 	vmov	r1, s16
 800355e:	2201      	movs	r2, #1
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fad7 	bl	8003b14 <__lshift>
 8003566:	4631      	mov	r1, r6
 8003568:	ee08 0a10 	vmov	s16, r0
 800356c:	f000 fb42 	bl	8003bf4 <__mcmp>
 8003570:	2800      	cmp	r0, #0
 8003572:	dc03      	bgt.n	800357c <_dtoa_r+0xa9c>
 8003574:	d1e0      	bne.n	8003538 <_dtoa_r+0xa58>
 8003576:	f01a 0f01 	tst.w	sl, #1
 800357a:	d0dd      	beq.n	8003538 <_dtoa_r+0xa58>
 800357c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003580:	d1d7      	bne.n	8003532 <_dtoa_r+0xa52>
 8003582:	2339      	movs	r3, #57	; 0x39
 8003584:	f88b 3000 	strb.w	r3, [fp]
 8003588:	462b      	mov	r3, r5
 800358a:	461d      	mov	r5, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003592:	2a39      	cmp	r2, #57	; 0x39
 8003594:	d071      	beq.n	800367a <_dtoa_r+0xb9a>
 8003596:	3201      	adds	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e746      	b.n	800342a <_dtoa_r+0x94a>
 800359c:	2a00      	cmp	r2, #0
 800359e:	dd07      	ble.n	80035b0 <_dtoa_r+0xad0>
 80035a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80035a4:	d0ed      	beq.n	8003582 <_dtoa_r+0xaa2>
 80035a6:	f10a 0301 	add.w	r3, sl, #1
 80035aa:	f88b 3000 	strb.w	r3, [fp]
 80035ae:	e73c      	b.n	800342a <_dtoa_r+0x94a>
 80035b0:	9b05      	ldr	r3, [sp, #20]
 80035b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80035b6:	4599      	cmp	r9, r3
 80035b8:	d047      	beq.n	800364a <_dtoa_r+0xb6a>
 80035ba:	ee18 1a10 	vmov	r1, s16
 80035be:	2300      	movs	r3, #0
 80035c0:	220a      	movs	r2, #10
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 f8f6 	bl	80037b4 <__multadd>
 80035c8:	45b8      	cmp	r8, r7
 80035ca:	ee08 0a10 	vmov	s16, r0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	f04f 020a 	mov.w	r2, #10
 80035d6:	4641      	mov	r1, r8
 80035d8:	4620      	mov	r0, r4
 80035da:	d106      	bne.n	80035ea <_dtoa_r+0xb0a>
 80035dc:	f000 f8ea 	bl	80037b4 <__multadd>
 80035e0:	4680      	mov	r8, r0
 80035e2:	4607      	mov	r7, r0
 80035e4:	f109 0901 	add.w	r9, r9, #1
 80035e8:	e772      	b.n	80034d0 <_dtoa_r+0x9f0>
 80035ea:	f000 f8e3 	bl	80037b4 <__multadd>
 80035ee:	4639      	mov	r1, r7
 80035f0:	4680      	mov	r8, r0
 80035f2:	2300      	movs	r3, #0
 80035f4:	220a      	movs	r2, #10
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 f8dc 	bl	80037b4 <__multadd>
 80035fc:	4607      	mov	r7, r0
 80035fe:	e7f1      	b.n	80035e4 <_dtoa_r+0xb04>
 8003600:	9b03      	ldr	r3, [sp, #12]
 8003602:	9302      	str	r3, [sp, #8]
 8003604:	9d01      	ldr	r5, [sp, #4]
 8003606:	ee18 0a10 	vmov	r0, s16
 800360a:	4631      	mov	r1, r6
 800360c:	f7ff f9da 	bl	80029c4 <quorem>
 8003610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003614:	9b01      	ldr	r3, [sp, #4]
 8003616:	f805 ab01 	strb.w	sl, [r5], #1
 800361a:	1aea      	subs	r2, r5, r3
 800361c:	9b02      	ldr	r3, [sp, #8]
 800361e:	4293      	cmp	r3, r2
 8003620:	dd09      	ble.n	8003636 <_dtoa_r+0xb56>
 8003622:	ee18 1a10 	vmov	r1, s16
 8003626:	2300      	movs	r3, #0
 8003628:	220a      	movs	r2, #10
 800362a:	4620      	mov	r0, r4
 800362c:	f000 f8c2 	bl	80037b4 <__multadd>
 8003630:	ee08 0a10 	vmov	s16, r0
 8003634:	e7e7      	b.n	8003606 <_dtoa_r+0xb26>
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	bfc8      	it	gt
 800363c:	461d      	movgt	r5, r3
 800363e:	9b01      	ldr	r3, [sp, #4]
 8003640:	bfd8      	it	le
 8003642:	2501      	movle	r5, #1
 8003644:	441d      	add	r5, r3
 8003646:	f04f 0800 	mov.w	r8, #0
 800364a:	ee18 1a10 	vmov	r1, s16
 800364e:	2201      	movs	r2, #1
 8003650:	4620      	mov	r0, r4
 8003652:	f000 fa5f 	bl	8003b14 <__lshift>
 8003656:	4631      	mov	r1, r6
 8003658:	ee08 0a10 	vmov	s16, r0
 800365c:	f000 faca 	bl	8003bf4 <__mcmp>
 8003660:	2800      	cmp	r0, #0
 8003662:	dc91      	bgt.n	8003588 <_dtoa_r+0xaa8>
 8003664:	d102      	bne.n	800366c <_dtoa_r+0xb8c>
 8003666:	f01a 0f01 	tst.w	sl, #1
 800366a:	d18d      	bne.n	8003588 <_dtoa_r+0xaa8>
 800366c:	462b      	mov	r3, r5
 800366e:	461d      	mov	r5, r3
 8003670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003674:	2a30      	cmp	r2, #48	; 0x30
 8003676:	d0fa      	beq.n	800366e <_dtoa_r+0xb8e>
 8003678:	e6d7      	b.n	800342a <_dtoa_r+0x94a>
 800367a:	9a01      	ldr	r2, [sp, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d184      	bne.n	800358a <_dtoa_r+0xaaa>
 8003680:	9b00      	ldr	r3, [sp, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2331      	movs	r3, #49	; 0x31
 8003688:	7013      	strb	r3, [r2, #0]
 800368a:	e6ce      	b.n	800342a <_dtoa_r+0x94a>
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <_dtoa_r+0xbd4>)
 800368e:	f7ff ba95 	b.w	8002bbc <_dtoa_r+0xdc>
 8003692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f aa6e 	bne.w	8002b76 <_dtoa_r+0x96>
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <_dtoa_r+0xbd8>)
 800369c:	f7ff ba8e 	b.w	8002bbc <_dtoa_r+0xdc>
 80036a0:	9b02      	ldr	r3, [sp, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	dcae      	bgt.n	8003604 <_dtoa_r+0xb24>
 80036a6:	9b06      	ldr	r3, [sp, #24]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	f73f aea8 	bgt.w	80033fe <_dtoa_r+0x91e>
 80036ae:	e7a9      	b.n	8003604 <_dtoa_r+0xb24>
 80036b0:	08004f77 	.word	0x08004f77
 80036b4:	08004ed4 	.word	0x08004ed4
 80036b8:	08004ef8 	.word	0x08004ef8

080036bc <_localeconv_r>:
 80036bc:	4800      	ldr	r0, [pc, #0]	; (80036c0 <_localeconv_r+0x4>)
 80036be:	4770      	bx	lr
 80036c0:	20000160 	.word	0x20000160

080036c4 <malloc>:
 80036c4:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <malloc+0xc>)
 80036c6:	4601      	mov	r1, r0
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f000 bc17 	b.w	8003efc <_malloc_r>
 80036ce:	bf00      	nop
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ea:	4291      	cmp	r1, r2
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <_Balloc>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80036f4:	4604      	mov	r4, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	b976      	cbnz	r6, 8003718 <_Balloc+0x28>
 80036fa:	2010      	movs	r0, #16
 80036fc:	f7ff ffe2 	bl	80036c4 <malloc>
 8003700:	4602      	mov	r2, r0
 8003702:	6260      	str	r0, [r4, #36]	; 0x24
 8003704:	b920      	cbnz	r0, 8003710 <_Balloc+0x20>
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <_Balloc+0x78>)
 8003708:	4818      	ldr	r0, [pc, #96]	; (800376c <_Balloc+0x7c>)
 800370a:	2166      	movs	r1, #102	; 0x66
 800370c:	f000 fdd6 	bl	80042bc <__assert_func>
 8003710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003714:	6006      	str	r6, [r0, #0]
 8003716:	60c6      	str	r6, [r0, #12]
 8003718:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800371a:	68f3      	ldr	r3, [r6, #12]
 800371c:	b183      	cbz	r3, 8003740 <_Balloc+0x50>
 800371e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003726:	b9b8      	cbnz	r0, 8003758 <_Balloc+0x68>
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f605 	lsl.w	r6, r1, r5
 800372e:	1d72      	adds	r2, r6, #5
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	4620      	mov	r0, r4
 8003734:	f000 fb60 	bl	8003df8 <_calloc_r>
 8003738:	b160      	cbz	r0, 8003754 <_Balloc+0x64>
 800373a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800373e:	e00e      	b.n	800375e <_Balloc+0x6e>
 8003740:	2221      	movs	r2, #33	; 0x21
 8003742:	2104      	movs	r1, #4
 8003744:	4620      	mov	r0, r4
 8003746:	f000 fb57 	bl	8003df8 <_calloc_r>
 800374a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800374c:	60f0      	str	r0, [r6, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e4      	bne.n	800371e <_Balloc+0x2e>
 8003754:	2000      	movs	r0, #0
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	6802      	ldr	r2, [r0, #0]
 800375a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800375e:	2300      	movs	r3, #0
 8003760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003764:	e7f7      	b.n	8003756 <_Balloc+0x66>
 8003766:	bf00      	nop
 8003768:	08004f05 	.word	0x08004f05
 800376c:	08004f88 	.word	0x08004f88

08003770 <_Bfree>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003774:	4605      	mov	r5, r0
 8003776:	460c      	mov	r4, r1
 8003778:	b976      	cbnz	r6, 8003798 <_Bfree+0x28>
 800377a:	2010      	movs	r0, #16
 800377c:	f7ff ffa2 	bl	80036c4 <malloc>
 8003780:	4602      	mov	r2, r0
 8003782:	6268      	str	r0, [r5, #36]	; 0x24
 8003784:	b920      	cbnz	r0, 8003790 <_Bfree+0x20>
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <_Bfree+0x3c>)
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <_Bfree+0x40>)
 800378a:	218a      	movs	r1, #138	; 0x8a
 800378c:	f000 fd96 	bl	80042bc <__assert_func>
 8003790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003794:	6006      	str	r6, [r0, #0]
 8003796:	60c6      	str	r6, [r0, #12]
 8003798:	b13c      	cbz	r4, 80037aa <_Bfree+0x3a>
 800379a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800379c:	6862      	ldr	r2, [r4, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037a4:	6021      	str	r1, [r4, #0]
 80037a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	08004f05 	.word	0x08004f05
 80037b0:	08004f88 	.word	0x08004f88

080037b4 <__multadd>:
 80037b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b8:	690d      	ldr	r5, [r1, #16]
 80037ba:	4607      	mov	r7, r0
 80037bc:	460c      	mov	r4, r1
 80037be:	461e      	mov	r6, r3
 80037c0:	f101 0c14 	add.w	ip, r1, #20
 80037c4:	2000      	movs	r0, #0
 80037c6:	f8dc 3000 	ldr.w	r3, [ip]
 80037ca:	b299      	uxth	r1, r3
 80037cc:	fb02 6101 	mla	r1, r2, r1, r6
 80037d0:	0c1e      	lsrs	r6, r3, #16
 80037d2:	0c0b      	lsrs	r3, r1, #16
 80037d4:	fb02 3306 	mla	r3, r2, r6, r3
 80037d8:	b289      	uxth	r1, r1
 80037da:	3001      	adds	r0, #1
 80037dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80037e0:	4285      	cmp	r5, r0
 80037e2:	f84c 1b04 	str.w	r1, [ip], #4
 80037e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80037ea:	dcec      	bgt.n	80037c6 <__multadd+0x12>
 80037ec:	b30e      	cbz	r6, 8003832 <__multadd+0x7e>
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	42ab      	cmp	r3, r5
 80037f2:	dc19      	bgt.n	8003828 <__multadd+0x74>
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4638      	mov	r0, r7
 80037f8:	3101      	adds	r1, #1
 80037fa:	f7ff ff79 	bl	80036f0 <_Balloc>
 80037fe:	4680      	mov	r8, r0
 8003800:	b928      	cbnz	r0, 800380e <__multadd+0x5a>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__multadd+0x84>)
 8003806:	480d      	ldr	r0, [pc, #52]	; (800383c <__multadd+0x88>)
 8003808:	21b5      	movs	r1, #181	; 0xb5
 800380a:	f000 fd57 	bl	80042bc <__assert_func>
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	3202      	adds	r2, #2
 8003812:	f104 010c 	add.w	r1, r4, #12
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	300c      	adds	r0, #12
 800381a:	f7ff ff5b 	bl	80036d4 <memcpy>
 800381e:	4621      	mov	r1, r4
 8003820:	4638      	mov	r0, r7
 8003822:	f7ff ffa5 	bl	8003770 <_Bfree>
 8003826:	4644      	mov	r4, r8
 8003828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800382c:	3501      	adds	r5, #1
 800382e:	615e      	str	r6, [r3, #20]
 8003830:	6125      	str	r5, [r4, #16]
 8003832:	4620      	mov	r0, r4
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	08004f77 	.word	0x08004f77
 800383c:	08004f88 	.word	0x08004f88

08003840 <__hi0bits>:
 8003840:	0c03      	lsrs	r3, r0, #16
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	b9d3      	cbnz	r3, 800387c <__hi0bits+0x3c>
 8003846:	0400      	lsls	r0, r0, #16
 8003848:	2310      	movs	r3, #16
 800384a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800384e:	bf04      	itt	eq
 8003850:	0200      	lsleq	r0, r0, #8
 8003852:	3308      	addeq	r3, #8
 8003854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003858:	bf04      	itt	eq
 800385a:	0100      	lsleq	r0, r0, #4
 800385c:	3304      	addeq	r3, #4
 800385e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003862:	bf04      	itt	eq
 8003864:	0080      	lsleq	r0, r0, #2
 8003866:	3302      	addeq	r3, #2
 8003868:	2800      	cmp	r0, #0
 800386a:	db05      	blt.n	8003878 <__hi0bits+0x38>
 800386c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003870:	f103 0301 	add.w	r3, r3, #1
 8003874:	bf08      	it	eq
 8003876:	2320      	moveq	r3, #32
 8003878:	4618      	mov	r0, r3
 800387a:	4770      	bx	lr
 800387c:	2300      	movs	r3, #0
 800387e:	e7e4      	b.n	800384a <__hi0bits+0xa>

08003880 <__lo0bits>:
 8003880:	6803      	ldr	r3, [r0, #0]
 8003882:	f013 0207 	ands.w	r2, r3, #7
 8003886:	4601      	mov	r1, r0
 8003888:	d00b      	beq.n	80038a2 <__lo0bits+0x22>
 800388a:	07da      	lsls	r2, r3, #31
 800388c:	d423      	bmi.n	80038d6 <__lo0bits+0x56>
 800388e:	0798      	lsls	r0, r3, #30
 8003890:	bf49      	itett	mi
 8003892:	085b      	lsrmi	r3, r3, #1
 8003894:	089b      	lsrpl	r3, r3, #2
 8003896:	2001      	movmi	r0, #1
 8003898:	600b      	strmi	r3, [r1, #0]
 800389a:	bf5c      	itt	pl
 800389c:	600b      	strpl	r3, [r1, #0]
 800389e:	2002      	movpl	r0, #2
 80038a0:	4770      	bx	lr
 80038a2:	b298      	uxth	r0, r3
 80038a4:	b9a8      	cbnz	r0, 80038d2 <__lo0bits+0x52>
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	2010      	movs	r0, #16
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	b90a      	cbnz	r2, 80038b2 <__lo0bits+0x32>
 80038ae:	3008      	adds	r0, #8
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	071a      	lsls	r2, r3, #28
 80038b4:	bf04      	itt	eq
 80038b6:	091b      	lsreq	r3, r3, #4
 80038b8:	3004      	addeq	r0, #4
 80038ba:	079a      	lsls	r2, r3, #30
 80038bc:	bf04      	itt	eq
 80038be:	089b      	lsreq	r3, r3, #2
 80038c0:	3002      	addeq	r0, #2
 80038c2:	07da      	lsls	r2, r3, #31
 80038c4:	d403      	bmi.n	80038ce <__lo0bits+0x4e>
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	f100 0001 	add.w	r0, r0, #1
 80038cc:	d005      	beq.n	80038da <__lo0bits+0x5a>
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	4770      	bx	lr
 80038d2:	4610      	mov	r0, r2
 80038d4:	e7e9      	b.n	80038aa <__lo0bits+0x2a>
 80038d6:	2000      	movs	r0, #0
 80038d8:	4770      	bx	lr
 80038da:	2020      	movs	r0, #32
 80038dc:	4770      	bx	lr
	...

080038e0 <__i2b>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	460c      	mov	r4, r1
 80038e4:	2101      	movs	r1, #1
 80038e6:	f7ff ff03 	bl	80036f0 <_Balloc>
 80038ea:	4602      	mov	r2, r0
 80038ec:	b928      	cbnz	r0, 80038fa <__i2b+0x1a>
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <__i2b+0x24>)
 80038f0:	4805      	ldr	r0, [pc, #20]	; (8003908 <__i2b+0x28>)
 80038f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80038f6:	f000 fce1 	bl	80042bc <__assert_func>
 80038fa:	2301      	movs	r3, #1
 80038fc:	6144      	str	r4, [r0, #20]
 80038fe:	6103      	str	r3, [r0, #16]
 8003900:	bd10      	pop	{r4, pc}
 8003902:	bf00      	nop
 8003904:	08004f77 	.word	0x08004f77
 8003908:	08004f88 	.word	0x08004f88

0800390c <__multiply>:
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	4691      	mov	r9, r2
 8003912:	690a      	ldr	r2, [r1, #16]
 8003914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	bfb8      	it	lt
 800391c:	460b      	movlt	r3, r1
 800391e:	460c      	mov	r4, r1
 8003920:	bfbc      	itt	lt
 8003922:	464c      	movlt	r4, r9
 8003924:	4699      	movlt	r9, r3
 8003926:	6927      	ldr	r7, [r4, #16]
 8003928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	6861      	ldr	r1, [r4, #4]
 8003930:	eb07 060a 	add.w	r6, r7, sl
 8003934:	42b3      	cmp	r3, r6
 8003936:	b085      	sub	sp, #20
 8003938:	bfb8      	it	lt
 800393a:	3101      	addlt	r1, #1
 800393c:	f7ff fed8 	bl	80036f0 <_Balloc>
 8003940:	b930      	cbnz	r0, 8003950 <__multiply+0x44>
 8003942:	4602      	mov	r2, r0
 8003944:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <__multiply+0x14c>)
 8003946:	4845      	ldr	r0, [pc, #276]	; (8003a5c <__multiply+0x150>)
 8003948:	f240 115d 	movw	r1, #349	; 0x15d
 800394c:	f000 fcb6 	bl	80042bc <__assert_func>
 8003950:	f100 0514 	add.w	r5, r0, #20
 8003954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003958:	462b      	mov	r3, r5
 800395a:	2200      	movs	r2, #0
 800395c:	4543      	cmp	r3, r8
 800395e:	d321      	bcc.n	80039a4 <__multiply+0x98>
 8003960:	f104 0314 	add.w	r3, r4, #20
 8003964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003968:	f109 0314 	add.w	r3, r9, #20
 800396c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003970:	9202      	str	r2, [sp, #8]
 8003972:	1b3a      	subs	r2, r7, r4
 8003974:	3a15      	subs	r2, #21
 8003976:	f022 0203 	bic.w	r2, r2, #3
 800397a:	3204      	adds	r2, #4
 800397c:	f104 0115 	add.w	r1, r4, #21
 8003980:	428f      	cmp	r7, r1
 8003982:	bf38      	it	cc
 8003984:	2204      	movcc	r2, #4
 8003986:	9201      	str	r2, [sp, #4]
 8003988:	9a02      	ldr	r2, [sp, #8]
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d80c      	bhi.n	80039aa <__multiply+0x9e>
 8003990:	2e00      	cmp	r6, #0
 8003992:	dd03      	ble.n	800399c <__multiply+0x90>
 8003994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05a      	beq.n	8003a52 <__multiply+0x146>
 800399c:	6106      	str	r6, [r0, #16]
 800399e:	b005      	add	sp, #20
 80039a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a4:	f843 2b04 	str.w	r2, [r3], #4
 80039a8:	e7d8      	b.n	800395c <__multiply+0x50>
 80039aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80039ae:	f1ba 0f00 	cmp.w	sl, #0
 80039b2:	d024      	beq.n	80039fe <__multiply+0xf2>
 80039b4:	f104 0e14 	add.w	lr, r4, #20
 80039b8:	46a9      	mov	r9, r5
 80039ba:	f04f 0c00 	mov.w	ip, #0
 80039be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80039c2:	f8d9 1000 	ldr.w	r1, [r9]
 80039c6:	fa1f fb82 	uxth.w	fp, r2
 80039ca:	b289      	uxth	r1, r1
 80039cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80039d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80039d4:	f8d9 2000 	ldr.w	r2, [r9]
 80039d8:	4461      	add	r1, ip
 80039da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80039de:	fb0a c20b 	mla	r2, sl, fp, ip
 80039e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80039e6:	b289      	uxth	r1, r1
 80039e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80039ec:	4577      	cmp	r7, lr
 80039ee:	f849 1b04 	str.w	r1, [r9], #4
 80039f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80039f6:	d8e2      	bhi.n	80039be <__multiply+0xb2>
 80039f8:	9a01      	ldr	r2, [sp, #4]
 80039fa:	f845 c002 	str.w	ip, [r5, r2]
 80039fe:	9a03      	ldr	r2, [sp, #12]
 8003a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003a04:	3304      	adds	r3, #4
 8003a06:	f1b9 0f00 	cmp.w	r9, #0
 8003a0a:	d020      	beq.n	8003a4e <__multiply+0x142>
 8003a0c:	6829      	ldr	r1, [r5, #0]
 8003a0e:	f104 0c14 	add.w	ip, r4, #20
 8003a12:	46ae      	mov	lr, r5
 8003a14:	f04f 0a00 	mov.w	sl, #0
 8003a18:	f8bc b000 	ldrh.w	fp, [ip]
 8003a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003a20:	fb09 220b 	mla	r2, r9, fp, r2
 8003a24:	4492      	add	sl, r2
 8003a26:	b289      	uxth	r1, r1
 8003a28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8003a30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003a34:	f8be 1000 	ldrh.w	r1, [lr]
 8003a38:	0c12      	lsrs	r2, r2, #16
 8003a3a:	fb09 1102 	mla	r1, r9, r2, r1
 8003a3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003a42:	4567      	cmp	r7, ip
 8003a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003a48:	d8e6      	bhi.n	8003a18 <__multiply+0x10c>
 8003a4a:	9a01      	ldr	r2, [sp, #4]
 8003a4c:	50a9      	str	r1, [r5, r2]
 8003a4e:	3504      	adds	r5, #4
 8003a50:	e79a      	b.n	8003988 <__multiply+0x7c>
 8003a52:	3e01      	subs	r6, #1
 8003a54:	e79c      	b.n	8003990 <__multiply+0x84>
 8003a56:	bf00      	nop
 8003a58:	08004f77 	.word	0x08004f77
 8003a5c:	08004f88 	.word	0x08004f88

08003a60 <__pow5mult>:
 8003a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a64:	4615      	mov	r5, r2
 8003a66:	f012 0203 	ands.w	r2, r2, #3
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	d007      	beq.n	8003a80 <__pow5mult+0x20>
 8003a70:	4c25      	ldr	r4, [pc, #148]	; (8003b08 <__pow5mult+0xa8>)
 8003a72:	3a01      	subs	r2, #1
 8003a74:	2300      	movs	r3, #0
 8003a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a7a:	f7ff fe9b 	bl	80037b4 <__multadd>
 8003a7e:	4607      	mov	r7, r0
 8003a80:	10ad      	asrs	r5, r5, #2
 8003a82:	d03d      	beq.n	8003b00 <__pow5mult+0xa0>
 8003a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a86:	b97c      	cbnz	r4, 8003aa8 <__pow5mult+0x48>
 8003a88:	2010      	movs	r0, #16
 8003a8a:	f7ff fe1b 	bl	80036c4 <malloc>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6270      	str	r0, [r6, #36]	; 0x24
 8003a92:	b928      	cbnz	r0, 8003aa0 <__pow5mult+0x40>
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <__pow5mult+0xac>)
 8003a96:	481e      	ldr	r0, [pc, #120]	; (8003b10 <__pow5mult+0xb0>)
 8003a98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003a9c:	f000 fc0e 	bl	80042bc <__assert_func>
 8003aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003aa4:	6004      	str	r4, [r0, #0]
 8003aa6:	60c4      	str	r4, [r0, #12]
 8003aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ab0:	b94c      	cbnz	r4, 8003ac6 <__pow5mult+0x66>
 8003ab2:	f240 2171 	movw	r1, #625	; 0x271
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f7ff ff12 	bl	80038e0 <__i2b>
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	6003      	str	r3, [r0, #0]
 8003ac6:	f04f 0900 	mov.w	r9, #0
 8003aca:	07eb      	lsls	r3, r5, #31
 8003acc:	d50a      	bpl.n	8003ae4 <__pow5mult+0x84>
 8003ace:	4639      	mov	r1, r7
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f7ff ff1a 	bl	800390c <__multiply>
 8003ad8:	4639      	mov	r1, r7
 8003ada:	4680      	mov	r8, r0
 8003adc:	4630      	mov	r0, r6
 8003ade:	f7ff fe47 	bl	8003770 <_Bfree>
 8003ae2:	4647      	mov	r7, r8
 8003ae4:	106d      	asrs	r5, r5, #1
 8003ae6:	d00b      	beq.n	8003b00 <__pow5mult+0xa0>
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	b938      	cbnz	r0, 8003afc <__pow5mult+0x9c>
 8003aec:	4622      	mov	r2, r4
 8003aee:	4621      	mov	r1, r4
 8003af0:	4630      	mov	r0, r6
 8003af2:	f7ff ff0b 	bl	800390c <__multiply>
 8003af6:	6020      	str	r0, [r4, #0]
 8003af8:	f8c0 9000 	str.w	r9, [r0]
 8003afc:	4604      	mov	r4, r0
 8003afe:	e7e4      	b.n	8003aca <__pow5mult+0x6a>
 8003b00:	4638      	mov	r0, r7
 8003b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b06:	bf00      	nop
 8003b08:	080050d8 	.word	0x080050d8
 8003b0c:	08004f05 	.word	0x08004f05
 8003b10:	08004f88 	.word	0x08004f88

08003b14 <__lshift>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	460c      	mov	r4, r1
 8003b1a:	6849      	ldr	r1, [r1, #4]
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003b22:	68a3      	ldr	r3, [r4, #8]
 8003b24:	4607      	mov	r7, r0
 8003b26:	4691      	mov	r9, r2
 8003b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003b2c:	f108 0601 	add.w	r6, r8, #1
 8003b30:	42b3      	cmp	r3, r6
 8003b32:	db0b      	blt.n	8003b4c <__lshift+0x38>
 8003b34:	4638      	mov	r0, r7
 8003b36:	f7ff fddb 	bl	80036f0 <_Balloc>
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	b948      	cbnz	r0, 8003b52 <__lshift+0x3e>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <__lshift+0xd8>)
 8003b42:	482b      	ldr	r0, [pc, #172]	; (8003bf0 <__lshift+0xdc>)
 8003b44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003b48:	f000 fbb8 	bl	80042bc <__assert_func>
 8003b4c:	3101      	adds	r1, #1
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	e7ee      	b.n	8003b30 <__lshift+0x1c>
 8003b52:	2300      	movs	r3, #0
 8003b54:	f100 0114 	add.w	r1, r0, #20
 8003b58:	f100 0210 	add.w	r2, r0, #16
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	4553      	cmp	r3, sl
 8003b60:	db37      	blt.n	8003bd2 <__lshift+0xbe>
 8003b62:	6920      	ldr	r0, [r4, #16]
 8003b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b68:	f104 0314 	add.w	r3, r4, #20
 8003b6c:	f019 091f 	ands.w	r9, r9, #31
 8003b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003b78:	d02f      	beq.n	8003bda <__lshift+0xc6>
 8003b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8003b7e:	468a      	mov	sl, r1
 8003b80:	f04f 0c00 	mov.w	ip, #0
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	fa02 f209 	lsl.w	r2, r2, r9
 8003b8a:	ea42 020c 	orr.w	r2, r2, ip
 8003b8e:	f84a 2b04 	str.w	r2, [sl], #4
 8003b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b96:	4298      	cmp	r0, r3
 8003b98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003b9c:	d8f2      	bhi.n	8003b84 <__lshift+0x70>
 8003b9e:	1b03      	subs	r3, r0, r4
 8003ba0:	3b15      	subs	r3, #21
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	f104 0215 	add.w	r2, r4, #21
 8003bac:	4290      	cmp	r0, r2
 8003bae:	bf38      	it	cc
 8003bb0:	2304      	movcc	r3, #4
 8003bb2:	f841 c003 	str.w	ip, [r1, r3]
 8003bb6:	f1bc 0f00 	cmp.w	ip, #0
 8003bba:	d001      	beq.n	8003bc0 <__lshift+0xac>
 8003bbc:	f108 0602 	add.w	r6, r8, #2
 8003bc0:	3e01      	subs	r6, #1
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	612e      	str	r6, [r5, #16]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	f7ff fdd2 	bl	8003770 <_Bfree>
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	e7c1      	b.n	8003b5e <__lshift+0x4a>
 8003bda:	3904      	subs	r1, #4
 8003bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d8f9      	bhi.n	8003bdc <__lshift+0xc8>
 8003be8:	e7ea      	b.n	8003bc0 <__lshift+0xac>
 8003bea:	bf00      	nop
 8003bec:	08004f77 	.word	0x08004f77
 8003bf0:	08004f88 	.word	0x08004f88

08003bf4 <__mcmp>:
 8003bf4:	b530      	push	{r4, r5, lr}
 8003bf6:	6902      	ldr	r2, [r0, #16]
 8003bf8:	690c      	ldr	r4, [r1, #16]
 8003bfa:	1b12      	subs	r2, r2, r4
 8003bfc:	d10e      	bne.n	8003c1c <__mcmp+0x28>
 8003bfe:	f100 0314 	add.w	r3, r0, #20
 8003c02:	3114      	adds	r1, #20
 8003c04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003c08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003c0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003c10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003c14:	42a5      	cmp	r5, r4
 8003c16:	d003      	beq.n	8003c20 <__mcmp+0x2c>
 8003c18:	d305      	bcc.n	8003c26 <__mcmp+0x32>
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	bd30      	pop	{r4, r5, pc}
 8003c20:	4283      	cmp	r3, r0
 8003c22:	d3f3      	bcc.n	8003c0c <__mcmp+0x18>
 8003c24:	e7fa      	b.n	8003c1c <__mcmp+0x28>
 8003c26:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2a:	e7f7      	b.n	8003c1c <__mcmp+0x28>

08003c2c <__mdiff>:
 8003c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	460c      	mov	r4, r1
 8003c32:	4606      	mov	r6, r0
 8003c34:	4611      	mov	r1, r2
 8003c36:	4620      	mov	r0, r4
 8003c38:	4690      	mov	r8, r2
 8003c3a:	f7ff ffdb 	bl	8003bf4 <__mcmp>
 8003c3e:	1e05      	subs	r5, r0, #0
 8003c40:	d110      	bne.n	8003c64 <__mdiff+0x38>
 8003c42:	4629      	mov	r1, r5
 8003c44:	4630      	mov	r0, r6
 8003c46:	f7ff fd53 	bl	80036f0 <_Balloc>
 8003c4a:	b930      	cbnz	r0, 8003c5a <__mdiff+0x2e>
 8003c4c:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <__mdiff+0x10c>)
 8003c4e:	4602      	mov	r2, r0
 8003c50:	f240 2132 	movw	r1, #562	; 0x232
 8003c54:	4839      	ldr	r0, [pc, #228]	; (8003d3c <__mdiff+0x110>)
 8003c56:	f000 fb31 	bl	80042bc <__assert_func>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c64:	bfa4      	itt	ge
 8003c66:	4643      	movge	r3, r8
 8003c68:	46a0      	movge	r8, r4
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003c70:	bfa6      	itte	ge
 8003c72:	461c      	movge	r4, r3
 8003c74:	2500      	movge	r5, #0
 8003c76:	2501      	movlt	r5, #1
 8003c78:	f7ff fd3a 	bl	80036f0 <_Balloc>
 8003c7c:	b920      	cbnz	r0, 8003c88 <__mdiff+0x5c>
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <__mdiff+0x10c>)
 8003c80:	4602      	mov	r2, r0
 8003c82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003c86:	e7e5      	b.n	8003c54 <__mdiff+0x28>
 8003c88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003c8c:	6926      	ldr	r6, [r4, #16]
 8003c8e:	60c5      	str	r5, [r0, #12]
 8003c90:	f104 0914 	add.w	r9, r4, #20
 8003c94:	f108 0514 	add.w	r5, r8, #20
 8003c98:	f100 0e14 	add.w	lr, r0, #20
 8003c9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003ca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ca4:	f108 0210 	add.w	r2, r8, #16
 8003ca8:	46f2      	mov	sl, lr
 8003caa:	2100      	movs	r1, #0
 8003cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8003cb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003cb4:	fa1f f883 	uxth.w	r8, r3
 8003cb8:	fa11 f18b 	uxtah	r1, r1, fp
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	eba1 0808 	sub.w	r8, r1, r8
 8003cc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003cc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003cca:	fa1f f888 	uxth.w	r8, r8
 8003cce:	1419      	asrs	r1, r3, #16
 8003cd0:	454e      	cmp	r6, r9
 8003cd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003cd6:	f84a 3b04 	str.w	r3, [sl], #4
 8003cda:	d8e7      	bhi.n	8003cac <__mdiff+0x80>
 8003cdc:	1b33      	subs	r3, r6, r4
 8003cde:	3b15      	subs	r3, #21
 8003ce0:	f023 0303 	bic.w	r3, r3, #3
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	3415      	adds	r4, #21
 8003ce8:	42a6      	cmp	r6, r4
 8003cea:	bf38      	it	cc
 8003cec:	2304      	movcc	r3, #4
 8003cee:	441d      	add	r5, r3
 8003cf0:	4473      	add	r3, lr
 8003cf2:	469e      	mov	lr, r3
 8003cf4:	462e      	mov	r6, r5
 8003cf6:	4566      	cmp	r6, ip
 8003cf8:	d30e      	bcc.n	8003d18 <__mdiff+0xec>
 8003cfa:	f10c 0203 	add.w	r2, ip, #3
 8003cfe:	1b52      	subs	r2, r2, r5
 8003d00:	f022 0203 	bic.w	r2, r2, #3
 8003d04:	3d03      	subs	r5, #3
 8003d06:	45ac      	cmp	ip, r5
 8003d08:	bf38      	it	cc
 8003d0a:	2200      	movcc	r2, #0
 8003d0c:	441a      	add	r2, r3
 8003d0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003d12:	b17b      	cbz	r3, 8003d34 <__mdiff+0x108>
 8003d14:	6107      	str	r7, [r0, #16]
 8003d16:	e7a3      	b.n	8003c60 <__mdiff+0x34>
 8003d18:	f856 8b04 	ldr.w	r8, [r6], #4
 8003d1c:	fa11 f288 	uxtah	r2, r1, r8
 8003d20:	1414      	asrs	r4, r2, #16
 8003d22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003d26:	b292      	uxth	r2, r2
 8003d28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003d2c:	f84e 2b04 	str.w	r2, [lr], #4
 8003d30:	1421      	asrs	r1, r4, #16
 8003d32:	e7e0      	b.n	8003cf6 <__mdiff+0xca>
 8003d34:	3f01      	subs	r7, #1
 8003d36:	e7ea      	b.n	8003d0e <__mdiff+0xe2>
 8003d38:	08004f77 	.word	0x08004f77
 8003d3c:	08004f88 	.word	0x08004f88

08003d40 <__d2b>:
 8003d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	4689      	mov	r9, r1
 8003d46:	2101      	movs	r1, #1
 8003d48:	ec57 6b10 	vmov	r6, r7, d0
 8003d4c:	4690      	mov	r8, r2
 8003d4e:	f7ff fccf 	bl	80036f0 <_Balloc>
 8003d52:	4604      	mov	r4, r0
 8003d54:	b930      	cbnz	r0, 8003d64 <__d2b+0x24>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <__d2b+0xb0>)
 8003d5a:	4826      	ldr	r0, [pc, #152]	; (8003df4 <__d2b+0xb4>)
 8003d5c:	f240 310a 	movw	r1, #778	; 0x30a
 8003d60:	f000 faac 	bl	80042bc <__assert_func>
 8003d64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d6c:	bb35      	cbnz	r5, 8003dbc <__d2b+0x7c>
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	d028      	beq.n	8003dc6 <__d2b+0x86>
 8003d74:	4668      	mov	r0, sp
 8003d76:	9600      	str	r6, [sp, #0]
 8003d78:	f7ff fd82 	bl	8003880 <__lo0bits>
 8003d7c:	9900      	ldr	r1, [sp, #0]
 8003d7e:	b300      	cbz	r0, 8003dc2 <__d2b+0x82>
 8003d80:	9a01      	ldr	r2, [sp, #4]
 8003d82:	f1c0 0320 	rsb	r3, r0, #32
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	40c2      	lsrs	r2, r0
 8003d8e:	6163      	str	r3, [r4, #20]
 8003d90:	9201      	str	r2, [sp, #4]
 8003d92:	9b01      	ldr	r3, [sp, #4]
 8003d94:	61a3      	str	r3, [r4, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2202      	movne	r2, #2
 8003d9c:	2201      	moveq	r2, #1
 8003d9e:	6122      	str	r2, [r4, #16]
 8003da0:	b1d5      	cbz	r5, 8003dd8 <__d2b+0x98>
 8003da2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003da6:	4405      	add	r5, r0
 8003da8:	f8c9 5000 	str.w	r5, [r9]
 8003dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003db0:	f8c8 0000 	str.w	r0, [r8]
 8003db4:	4620      	mov	r0, r4
 8003db6:	b003      	add	sp, #12
 8003db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc0:	e7d5      	b.n	8003d6e <__d2b+0x2e>
 8003dc2:	6161      	str	r1, [r4, #20]
 8003dc4:	e7e5      	b.n	8003d92 <__d2b+0x52>
 8003dc6:	a801      	add	r0, sp, #4
 8003dc8:	f7ff fd5a 	bl	8003880 <__lo0bits>
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	6163      	str	r3, [r4, #20]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	6122      	str	r2, [r4, #16]
 8003dd4:	3020      	adds	r0, #32
 8003dd6:	e7e3      	b.n	8003da0 <__d2b+0x60>
 8003dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003ddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003de0:	f8c9 0000 	str.w	r0, [r9]
 8003de4:	6918      	ldr	r0, [r3, #16]
 8003de6:	f7ff fd2b 	bl	8003840 <__hi0bits>
 8003dea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003dee:	e7df      	b.n	8003db0 <__d2b+0x70>
 8003df0:	08004f77 	.word	0x08004f77
 8003df4:	08004f88 	.word	0x08004f88

08003df8 <_calloc_r>:
 8003df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dfa:	fba1 2402 	umull	r2, r4, r1, r2
 8003dfe:	b94c      	cbnz	r4, 8003e14 <_calloc_r+0x1c>
 8003e00:	4611      	mov	r1, r2
 8003e02:	9201      	str	r2, [sp, #4]
 8003e04:	f000 f87a 	bl	8003efc <_malloc_r>
 8003e08:	9a01      	ldr	r2, [sp, #4]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b930      	cbnz	r0, 8003e1c <_calloc_r+0x24>
 8003e0e:	4628      	mov	r0, r5
 8003e10:	b003      	add	sp, #12
 8003e12:	bd30      	pop	{r4, r5, pc}
 8003e14:	220c      	movs	r2, #12
 8003e16:	6002      	str	r2, [r0, #0]
 8003e18:	2500      	movs	r5, #0
 8003e1a:	e7f8      	b.n	8003e0e <_calloc_r+0x16>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	f7fe f93f 	bl	80020a0 <memset>
 8003e22:	e7f4      	b.n	8003e0e <_calloc_r+0x16>

08003e24 <_free_r>:
 8003e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e26:	2900      	cmp	r1, #0
 8003e28:	d044      	beq.n	8003eb4 <_free_r+0x90>
 8003e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e2e:	9001      	str	r0, [sp, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f1a1 0404 	sub.w	r4, r1, #4
 8003e36:	bfb8      	it	lt
 8003e38:	18e4      	addlt	r4, r4, r3
 8003e3a:	f000 fa9b 	bl	8004374 <__malloc_lock>
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <_free_r+0x94>)
 8003e40:	9801      	ldr	r0, [sp, #4]
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	b933      	cbnz	r3, 8003e54 <_free_r+0x30>
 8003e46:	6063      	str	r3, [r4, #4]
 8003e48:	6014      	str	r4, [r2, #0]
 8003e4a:	b003      	add	sp, #12
 8003e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e50:	f000 ba96 	b.w	8004380 <__malloc_unlock>
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	d908      	bls.n	8003e6a <_free_r+0x46>
 8003e58:	6825      	ldr	r5, [r4, #0]
 8003e5a:	1961      	adds	r1, r4, r5
 8003e5c:	428b      	cmp	r3, r1
 8003e5e:	bf01      	itttt	eq
 8003e60:	6819      	ldreq	r1, [r3, #0]
 8003e62:	685b      	ldreq	r3, [r3, #4]
 8003e64:	1949      	addeq	r1, r1, r5
 8003e66:	6021      	streq	r1, [r4, #0]
 8003e68:	e7ed      	b.n	8003e46 <_free_r+0x22>
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b10b      	cbz	r3, 8003e74 <_free_r+0x50>
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	d9fa      	bls.n	8003e6a <_free_r+0x46>
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	1855      	adds	r5, r2, r1
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	d10b      	bne.n	8003e94 <_free_r+0x70>
 8003e7c:	6824      	ldr	r4, [r4, #0]
 8003e7e:	4421      	add	r1, r4
 8003e80:	1854      	adds	r4, r2, r1
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	d1e0      	bne.n	8003e4a <_free_r+0x26>
 8003e88:	681c      	ldr	r4, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	6053      	str	r3, [r2, #4]
 8003e8e:	4421      	add	r1, r4
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	e7da      	b.n	8003e4a <_free_r+0x26>
 8003e94:	d902      	bls.n	8003e9c <_free_r+0x78>
 8003e96:	230c      	movs	r3, #12
 8003e98:	6003      	str	r3, [r0, #0]
 8003e9a:	e7d6      	b.n	8003e4a <_free_r+0x26>
 8003e9c:	6825      	ldr	r5, [r4, #0]
 8003e9e:	1961      	adds	r1, r4, r5
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	bf04      	itt	eq
 8003ea4:	6819      	ldreq	r1, [r3, #0]
 8003ea6:	685b      	ldreq	r3, [r3, #4]
 8003ea8:	6063      	str	r3, [r4, #4]
 8003eaa:	bf04      	itt	eq
 8003eac:	1949      	addeq	r1, r1, r5
 8003eae:	6021      	streq	r1, [r4, #0]
 8003eb0:	6054      	str	r4, [r2, #4]
 8003eb2:	e7ca      	b.n	8003e4a <_free_r+0x26>
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bd30      	pop	{r4, r5, pc}
 8003eb8:	20000254 	.word	0x20000254

08003ebc <sbrk_aligned>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4e0e      	ldr	r6, [pc, #56]	; (8003ef8 <sbrk_aligned+0x3c>)
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	6831      	ldr	r1, [r6, #0]
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	b911      	cbnz	r1, 8003ece <sbrk_aligned+0x12>
 8003ec8:	f000 f9e8 	bl	800429c <_sbrk_r>
 8003ecc:	6030      	str	r0, [r6, #0]
 8003ece:	4621      	mov	r1, r4
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f000 f9e3 	bl	800429c <_sbrk_r>
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	d00a      	beq.n	8003ef0 <sbrk_aligned+0x34>
 8003eda:	1cc4      	adds	r4, r0, #3
 8003edc:	f024 0403 	bic.w	r4, r4, #3
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d007      	beq.n	8003ef4 <sbrk_aligned+0x38>
 8003ee4:	1a21      	subs	r1, r4, r0
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 f9d8 	bl	800429c <_sbrk_r>
 8003eec:	3001      	adds	r0, #1
 8003eee:	d101      	bne.n	8003ef4 <sbrk_aligned+0x38>
 8003ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	20000258 	.word	0x20000258

08003efc <_malloc_r>:
 8003efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	1ccd      	adds	r5, r1, #3
 8003f02:	f025 0503 	bic.w	r5, r5, #3
 8003f06:	3508      	adds	r5, #8
 8003f08:	2d0c      	cmp	r5, #12
 8003f0a:	bf38      	it	cc
 8003f0c:	250c      	movcc	r5, #12
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	4607      	mov	r7, r0
 8003f12:	db01      	blt.n	8003f18 <_malloc_r+0x1c>
 8003f14:	42a9      	cmp	r1, r5
 8003f16:	d905      	bls.n	8003f24 <_malloc_r+0x28>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	4630      	mov	r0, r6
 8003f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f24:	4e2e      	ldr	r6, [pc, #184]	; (8003fe0 <_malloc_r+0xe4>)
 8003f26:	f000 fa25 	bl	8004374 <__malloc_lock>
 8003f2a:	6833      	ldr	r3, [r6, #0]
 8003f2c:	461c      	mov	r4, r3
 8003f2e:	bb34      	cbnz	r4, 8003f7e <_malloc_r+0x82>
 8003f30:	4629      	mov	r1, r5
 8003f32:	4638      	mov	r0, r7
 8003f34:	f7ff ffc2 	bl	8003ebc <sbrk_aligned>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	d14d      	bne.n	8003fda <_malloc_r+0xde>
 8003f3e:	6834      	ldr	r4, [r6, #0]
 8003f40:	4626      	mov	r6, r4
 8003f42:	2e00      	cmp	r6, #0
 8003f44:	d140      	bne.n	8003fc8 <_malloc_r+0xcc>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	4631      	mov	r1, r6
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	eb04 0803 	add.w	r8, r4, r3
 8003f50:	f000 f9a4 	bl	800429c <_sbrk_r>
 8003f54:	4580      	cmp	r8, r0
 8003f56:	d13a      	bne.n	8003fce <_malloc_r+0xd2>
 8003f58:	6821      	ldr	r1, [r4, #0]
 8003f5a:	3503      	adds	r5, #3
 8003f5c:	1a6d      	subs	r5, r5, r1
 8003f5e:	f025 0503 	bic.w	r5, r5, #3
 8003f62:	3508      	adds	r5, #8
 8003f64:	2d0c      	cmp	r5, #12
 8003f66:	bf38      	it	cc
 8003f68:	250c      	movcc	r5, #12
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ffa5 	bl	8003ebc <sbrk_aligned>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d02b      	beq.n	8003fce <_malloc_r+0xd2>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	442b      	add	r3, r5
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	e00e      	b.n	8003f9c <_malloc_r+0xa0>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	1b52      	subs	r2, r2, r5
 8003f82:	d41e      	bmi.n	8003fc2 <_malloc_r+0xc6>
 8003f84:	2a0b      	cmp	r2, #11
 8003f86:	d916      	bls.n	8003fb6 <_malloc_r+0xba>
 8003f88:	1961      	adds	r1, r4, r5
 8003f8a:	42a3      	cmp	r3, r4
 8003f8c:	6025      	str	r5, [r4, #0]
 8003f8e:	bf18      	it	ne
 8003f90:	6059      	strne	r1, [r3, #4]
 8003f92:	6863      	ldr	r3, [r4, #4]
 8003f94:	bf08      	it	eq
 8003f96:	6031      	streq	r1, [r6, #0]
 8003f98:	5162      	str	r2, [r4, r5]
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f104 060b 	add.w	r6, r4, #11
 8003fa2:	f000 f9ed 	bl	8004380 <__malloc_unlock>
 8003fa6:	f026 0607 	bic.w	r6, r6, #7
 8003faa:	1d23      	adds	r3, r4, #4
 8003fac:	1af2      	subs	r2, r6, r3
 8003fae:	d0b6      	beq.n	8003f1e <_malloc_r+0x22>
 8003fb0:	1b9b      	subs	r3, r3, r6
 8003fb2:	50a3      	str	r3, [r4, r2]
 8003fb4:	e7b3      	b.n	8003f1e <_malloc_r+0x22>
 8003fb6:	6862      	ldr	r2, [r4, #4]
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	bf0c      	ite	eq
 8003fbc:	6032      	streq	r2, [r6, #0]
 8003fbe:	605a      	strne	r2, [r3, #4]
 8003fc0:	e7ec      	b.n	8003f9c <_malloc_r+0xa0>
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	6864      	ldr	r4, [r4, #4]
 8003fc6:	e7b2      	b.n	8003f2e <_malloc_r+0x32>
 8003fc8:	4634      	mov	r4, r6
 8003fca:	6876      	ldr	r6, [r6, #4]
 8003fcc:	e7b9      	b.n	8003f42 <_malloc_r+0x46>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f000 f9d4 	bl	8004380 <__malloc_unlock>
 8003fd8:	e7a1      	b.n	8003f1e <_malloc_r+0x22>
 8003fda:	6025      	str	r5, [r4, #0]
 8003fdc:	e7de      	b.n	8003f9c <_malloc_r+0xa0>
 8003fde:	bf00      	nop
 8003fe0:	20000254 	.word	0x20000254

08003fe4 <__ssputs_r>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	688e      	ldr	r6, [r1, #8]
 8003fea:	429e      	cmp	r6, r3
 8003fec:	4682      	mov	sl, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4690      	mov	r8, r2
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	d838      	bhi.n	8004068 <__ssputs_r+0x84>
 8003ff6:	898a      	ldrh	r2, [r1, #12]
 8003ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ffc:	d032      	beq.n	8004064 <__ssputs_r+0x80>
 8003ffe:	6825      	ldr	r5, [r4, #0]
 8004000:	6909      	ldr	r1, [r1, #16]
 8004002:	eba5 0901 	sub.w	r9, r5, r1
 8004006:	6965      	ldr	r5, [r4, #20]
 8004008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800400c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004010:	3301      	adds	r3, #1
 8004012:	444b      	add	r3, r9
 8004014:	106d      	asrs	r5, r5, #1
 8004016:	429d      	cmp	r5, r3
 8004018:	bf38      	it	cc
 800401a:	461d      	movcc	r5, r3
 800401c:	0553      	lsls	r3, r2, #21
 800401e:	d531      	bpl.n	8004084 <__ssputs_r+0xa0>
 8004020:	4629      	mov	r1, r5
 8004022:	f7ff ff6b 	bl	8003efc <_malloc_r>
 8004026:	4606      	mov	r6, r0
 8004028:	b950      	cbnz	r0, 8004040 <__ssputs_r+0x5c>
 800402a:	230c      	movs	r3, #12
 800402c:	f8ca 3000 	str.w	r3, [sl]
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	6921      	ldr	r1, [r4, #16]
 8004042:	464a      	mov	r2, r9
 8004044:	f7ff fb46 	bl	80036d4 <memcpy>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	6165      	str	r5, [r4, #20]
 8004058:	444e      	add	r6, r9
 800405a:	eba5 0509 	sub.w	r5, r5, r9
 800405e:	6026      	str	r6, [r4, #0]
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	463e      	mov	r6, r7
 8004064:	42be      	cmp	r6, r7
 8004066:	d900      	bls.n	800406a <__ssputs_r+0x86>
 8004068:	463e      	mov	r6, r7
 800406a:	6820      	ldr	r0, [r4, #0]
 800406c:	4632      	mov	r2, r6
 800406e:	4641      	mov	r1, r8
 8004070:	f000 f966 	bl	8004340 <memmove>
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	1b9b      	subs	r3, r3, r6
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	4433      	add	r3, r6
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	2000      	movs	r0, #0
 8004082:	e7db      	b.n	800403c <__ssputs_r+0x58>
 8004084:	462a      	mov	r2, r5
 8004086:	f000 f981 	bl	800438c <_realloc_r>
 800408a:	4606      	mov	r6, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	d1e1      	bne.n	8004054 <__ssputs_r+0x70>
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	4650      	mov	r0, sl
 8004094:	f7ff fec6 	bl	8003e24 <_free_r>
 8004098:	e7c7      	b.n	800402a <__ssputs_r+0x46>
	...

0800409c <_svfiprintf_r>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	4698      	mov	r8, r3
 80040a2:	898b      	ldrh	r3, [r1, #12]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	b09d      	sub	sp, #116	; 0x74
 80040a8:	4607      	mov	r7, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	d50e      	bpl.n	80040ce <_svfiprintf_r+0x32>
 80040b0:	690b      	ldr	r3, [r1, #16]
 80040b2:	b963      	cbnz	r3, 80040ce <_svfiprintf_r+0x32>
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	f7ff ff21 	bl	8003efc <_malloc_r>
 80040ba:	6028      	str	r0, [r5, #0]
 80040bc:	6128      	str	r0, [r5, #16]
 80040be:	b920      	cbnz	r0, 80040ca <_svfiprintf_r+0x2e>
 80040c0:	230c      	movs	r3, #12
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	e0d1      	b.n	800426e <_svfiprintf_r+0x1d2>
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	616b      	str	r3, [r5, #20]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9309      	str	r3, [sp, #36]	; 0x24
 80040d2:	2320      	movs	r3, #32
 80040d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040dc:	2330      	movs	r3, #48	; 0x30
 80040de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004288 <_svfiprintf_r+0x1ec>
 80040e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040e6:	f04f 0901 	mov.w	r9, #1
 80040ea:	4623      	mov	r3, r4
 80040ec:	469a      	mov	sl, r3
 80040ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f2:	b10a      	cbz	r2, 80040f8 <_svfiprintf_r+0x5c>
 80040f4:	2a25      	cmp	r2, #37	; 0x25
 80040f6:	d1f9      	bne.n	80040ec <_svfiprintf_r+0x50>
 80040f8:	ebba 0b04 	subs.w	fp, sl, r4
 80040fc:	d00b      	beq.n	8004116 <_svfiprintf_r+0x7a>
 80040fe:	465b      	mov	r3, fp
 8004100:	4622      	mov	r2, r4
 8004102:	4629      	mov	r1, r5
 8004104:	4638      	mov	r0, r7
 8004106:	f7ff ff6d 	bl	8003fe4 <__ssputs_r>
 800410a:	3001      	adds	r0, #1
 800410c:	f000 80aa 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004112:	445a      	add	r2, fp
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
 8004116:	f89a 3000 	ldrb.w	r3, [sl]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80a2 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004120:	2300      	movs	r3, #0
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800412a:	f10a 0a01 	add.w	sl, sl, #1
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004136:	931a      	str	r3, [sp, #104]	; 0x68
 8004138:	4654      	mov	r4, sl
 800413a:	2205      	movs	r2, #5
 800413c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004140:	4851      	ldr	r0, [pc, #324]	; (8004288 <_svfiprintf_r+0x1ec>)
 8004142:	f7fc f855 	bl	80001f0 <memchr>
 8004146:	9a04      	ldr	r2, [sp, #16]
 8004148:	b9d8      	cbnz	r0, 8004182 <_svfiprintf_r+0xe6>
 800414a:	06d0      	lsls	r0, r2, #27
 800414c:	bf44      	itt	mi
 800414e:	2320      	movmi	r3, #32
 8004150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004154:	0711      	lsls	r1, r2, #28
 8004156:	bf44      	itt	mi
 8004158:	232b      	movmi	r3, #43	; 0x2b
 800415a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415e:	f89a 3000 	ldrb.w	r3, [sl]
 8004162:	2b2a      	cmp	r3, #42	; 0x2a
 8004164:	d015      	beq.n	8004192 <_svfiprintf_r+0xf6>
 8004166:	9a07      	ldr	r2, [sp, #28]
 8004168:	4654      	mov	r4, sl
 800416a:	2000      	movs	r0, #0
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4621      	mov	r1, r4
 8004172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004176:	3b30      	subs	r3, #48	; 0x30
 8004178:	2b09      	cmp	r3, #9
 800417a:	d94e      	bls.n	800421a <_svfiprintf_r+0x17e>
 800417c:	b1b0      	cbz	r0, 80041ac <_svfiprintf_r+0x110>
 800417e:	9207      	str	r2, [sp, #28]
 8004180:	e014      	b.n	80041ac <_svfiprintf_r+0x110>
 8004182:	eba0 0308 	sub.w	r3, r0, r8
 8004186:	fa09 f303 	lsl.w	r3, r9, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	9304      	str	r3, [sp, #16]
 800418e:	46a2      	mov	sl, r4
 8004190:	e7d2      	b.n	8004138 <_svfiprintf_r+0x9c>
 8004192:	9b03      	ldr	r3, [sp, #12]
 8004194:	1d19      	adds	r1, r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	9103      	str	r1, [sp, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfbb      	ittet	lt
 800419e:	425b      	neglt	r3, r3
 80041a0:	f042 0202 	orrlt.w	r2, r2, #2
 80041a4:	9307      	strge	r3, [sp, #28]
 80041a6:	9307      	strlt	r3, [sp, #28]
 80041a8:	bfb8      	it	lt
 80041aa:	9204      	strlt	r2, [sp, #16]
 80041ac:	7823      	ldrb	r3, [r4, #0]
 80041ae:	2b2e      	cmp	r3, #46	; 0x2e
 80041b0:	d10c      	bne.n	80041cc <_svfiprintf_r+0x130>
 80041b2:	7863      	ldrb	r3, [r4, #1]
 80041b4:	2b2a      	cmp	r3, #42	; 0x2a
 80041b6:	d135      	bne.n	8004224 <_svfiprintf_r+0x188>
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	9203      	str	r2, [sp, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bfb8      	it	lt
 80041c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041c8:	3402      	adds	r4, #2
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004298 <_svfiprintf_r+0x1fc>
 80041d0:	7821      	ldrb	r1, [r4, #0]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4650      	mov	r0, sl
 80041d6:	f7fc f80b 	bl	80001f0 <memchr>
 80041da:	b140      	cbz	r0, 80041ee <_svfiprintf_r+0x152>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	eba0 000a 	sub.w	r0, r0, sl
 80041e2:	fa03 f000 	lsl.w	r0, r3, r0
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	4303      	orrs	r3, r0
 80041ea:	3401      	adds	r4, #1
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f2:	4826      	ldr	r0, [pc, #152]	; (800428c <_svfiprintf_r+0x1f0>)
 80041f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041f8:	2206      	movs	r2, #6
 80041fa:	f7fb fff9 	bl	80001f0 <memchr>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d038      	beq.n	8004274 <_svfiprintf_r+0x1d8>
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_svfiprintf_r+0x1f4>)
 8004204:	bb1b      	cbnz	r3, 800424e <_svfiprintf_r+0x1b2>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	3307      	adds	r3, #7
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	3308      	adds	r3, #8
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004214:	4433      	add	r3, r6
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	e767      	b.n	80040ea <_svfiprintf_r+0x4e>
 800421a:	fb0c 3202 	mla	r2, ip, r2, r3
 800421e:	460c      	mov	r4, r1
 8004220:	2001      	movs	r0, #1
 8004222:	e7a5      	b.n	8004170 <_svfiprintf_r+0xd4>
 8004224:	2300      	movs	r3, #0
 8004226:	3401      	adds	r4, #1
 8004228:	9305      	str	r3, [sp, #20]
 800422a:	4619      	mov	r1, r3
 800422c:	f04f 0c0a 	mov.w	ip, #10
 8004230:	4620      	mov	r0, r4
 8004232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004236:	3a30      	subs	r2, #48	; 0x30
 8004238:	2a09      	cmp	r2, #9
 800423a:	d903      	bls.n	8004244 <_svfiprintf_r+0x1a8>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0c5      	beq.n	80041cc <_svfiprintf_r+0x130>
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	e7c3      	b.n	80041cc <_svfiprintf_r+0x130>
 8004244:	fb0c 2101 	mla	r1, ip, r1, r2
 8004248:	4604      	mov	r4, r0
 800424a:	2301      	movs	r3, #1
 800424c:	e7f0      	b.n	8004230 <_svfiprintf_r+0x194>
 800424e:	ab03      	add	r3, sp, #12
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	462a      	mov	r2, r5
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <_svfiprintf_r+0x1f8>)
 8004256:	a904      	add	r1, sp, #16
 8004258:	4638      	mov	r0, r7
 800425a:	f7fd ffc9 	bl	80021f0 <_printf_float>
 800425e:	1c42      	adds	r2, r0, #1
 8004260:	4606      	mov	r6, r0
 8004262:	d1d6      	bne.n	8004212 <_svfiprintf_r+0x176>
 8004264:	89ab      	ldrh	r3, [r5, #12]
 8004266:	065b      	lsls	r3, r3, #25
 8004268:	f53f af2c 	bmi.w	80040c4 <_svfiprintf_r+0x28>
 800426c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800426e:	b01d      	add	sp, #116	; 0x74
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	ab03      	add	r3, sp, #12
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	462a      	mov	r2, r5
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <_svfiprintf_r+0x1f8>)
 800427c:	a904      	add	r1, sp, #16
 800427e:	4638      	mov	r0, r7
 8004280:	f7fe fa5a 	bl	8002738 <_printf_i>
 8004284:	e7eb      	b.n	800425e <_svfiprintf_r+0x1c2>
 8004286:	bf00      	nop
 8004288:	080050e4 	.word	0x080050e4
 800428c:	080050ee 	.word	0x080050ee
 8004290:	080021f1 	.word	0x080021f1
 8004294:	08003fe5 	.word	0x08003fe5
 8004298:	080050ea 	.word	0x080050ea

0800429c <_sbrk_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d06      	ldr	r5, [pc, #24]	; (80042b8 <_sbrk_r+0x1c>)
 80042a0:	2300      	movs	r3, #0
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	f7fc ff00 	bl	80010ac <_sbrk>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_sbrk_r+0x1a>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_sbrk_r+0x1a>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	2000025c 	.word	0x2000025c

080042bc <__assert_func>:
 80042bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042be:	4614      	mov	r4, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <__assert_func+0x2c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4605      	mov	r5, r0
 80042c8:	68d8      	ldr	r0, [r3, #12]
 80042ca:	b14c      	cbz	r4, 80042e0 <__assert_func+0x24>
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <__assert_func+0x30>)
 80042ce:	9100      	str	r1, [sp, #0]
 80042d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042d4:	4906      	ldr	r1, [pc, #24]	; (80042f0 <__assert_func+0x34>)
 80042d6:	462b      	mov	r3, r5
 80042d8:	f000 f80e 	bl	80042f8 <fiprintf>
 80042dc:	f000 faac 	bl	8004838 <abort>
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <__assert_func+0x38>)
 80042e2:	461c      	mov	r4, r3
 80042e4:	e7f3      	b.n	80042ce <__assert_func+0x12>
 80042e6:	bf00      	nop
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	080050f5 	.word	0x080050f5
 80042f0:	08005102 	.word	0x08005102
 80042f4:	08005130 	.word	0x08005130

080042f8 <fiprintf>:
 80042f8:	b40e      	push	{r1, r2, r3}
 80042fa:	b503      	push	{r0, r1, lr}
 80042fc:	4601      	mov	r1, r0
 80042fe:	ab03      	add	r3, sp, #12
 8004300:	4805      	ldr	r0, [pc, #20]	; (8004318 <fiprintf+0x20>)
 8004302:	f853 2b04 	ldr.w	r2, [r3], #4
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	f000 f897 	bl	800443c <_vfiprintf_r>
 800430e:	b002      	add	sp, #8
 8004310:	f85d eb04 	ldr.w	lr, [sp], #4
 8004314:	b003      	add	sp, #12
 8004316:	4770      	bx	lr
 8004318:	2000000c 	.word	0x2000000c

0800431c <__ascii_mbtowc>:
 800431c:	b082      	sub	sp, #8
 800431e:	b901      	cbnz	r1, 8004322 <__ascii_mbtowc+0x6>
 8004320:	a901      	add	r1, sp, #4
 8004322:	b142      	cbz	r2, 8004336 <__ascii_mbtowc+0x1a>
 8004324:	b14b      	cbz	r3, 800433a <__ascii_mbtowc+0x1e>
 8004326:	7813      	ldrb	r3, [r2, #0]
 8004328:	600b      	str	r3, [r1, #0]
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	1e10      	subs	r0, r2, #0
 800432e:	bf18      	it	ne
 8004330:	2001      	movne	r0, #1
 8004332:	b002      	add	sp, #8
 8004334:	4770      	bx	lr
 8004336:	4610      	mov	r0, r2
 8004338:	e7fb      	b.n	8004332 <__ascii_mbtowc+0x16>
 800433a:	f06f 0001 	mvn.w	r0, #1
 800433e:	e7f8      	b.n	8004332 <__ascii_mbtowc+0x16>

08004340 <memmove>:
 8004340:	4288      	cmp	r0, r1
 8004342:	b510      	push	{r4, lr}
 8004344:	eb01 0402 	add.w	r4, r1, r2
 8004348:	d902      	bls.n	8004350 <memmove+0x10>
 800434a:	4284      	cmp	r4, r0
 800434c:	4623      	mov	r3, r4
 800434e:	d807      	bhi.n	8004360 <memmove+0x20>
 8004350:	1e43      	subs	r3, r0, #1
 8004352:	42a1      	cmp	r1, r4
 8004354:	d008      	beq.n	8004368 <memmove+0x28>
 8004356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800435a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800435e:	e7f8      	b.n	8004352 <memmove+0x12>
 8004360:	4402      	add	r2, r0
 8004362:	4601      	mov	r1, r0
 8004364:	428a      	cmp	r2, r1
 8004366:	d100      	bne.n	800436a <memmove+0x2a>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800436e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004372:	e7f7      	b.n	8004364 <memmove+0x24>

08004374 <__malloc_lock>:
 8004374:	4801      	ldr	r0, [pc, #4]	; (800437c <__malloc_lock+0x8>)
 8004376:	f000 bc1f 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 800437a:	bf00      	nop
 800437c:	20000260 	.word	0x20000260

08004380 <__malloc_unlock>:
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <__malloc_unlock+0x8>)
 8004382:	f000 bc1a 	b.w	8004bba <__retarget_lock_release_recursive>
 8004386:	bf00      	nop
 8004388:	20000260 	.word	0x20000260

0800438c <_realloc_r>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4680      	mov	r8, r0
 8004392:	4614      	mov	r4, r2
 8004394:	460e      	mov	r6, r1
 8004396:	b921      	cbnz	r1, 80043a2 <_realloc_r+0x16>
 8004398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800439c:	4611      	mov	r1, r2
 800439e:	f7ff bdad 	b.w	8003efc <_malloc_r>
 80043a2:	b92a      	cbnz	r2, 80043b0 <_realloc_r+0x24>
 80043a4:	f7ff fd3e 	bl	8003e24 <_free_r>
 80043a8:	4625      	mov	r5, r4
 80043aa:	4628      	mov	r0, r5
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b0:	f000 fc6a 	bl	8004c88 <_malloc_usable_size_r>
 80043b4:	4284      	cmp	r4, r0
 80043b6:	4607      	mov	r7, r0
 80043b8:	d802      	bhi.n	80043c0 <_realloc_r+0x34>
 80043ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043be:	d812      	bhi.n	80043e6 <_realloc_r+0x5a>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7ff fd9a 	bl	8003efc <_malloc_r>
 80043c8:	4605      	mov	r5, r0
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d0ed      	beq.n	80043aa <_realloc_r+0x1e>
 80043ce:	42bc      	cmp	r4, r7
 80043d0:	4622      	mov	r2, r4
 80043d2:	4631      	mov	r1, r6
 80043d4:	bf28      	it	cs
 80043d6:	463a      	movcs	r2, r7
 80043d8:	f7ff f97c 	bl	80036d4 <memcpy>
 80043dc:	4631      	mov	r1, r6
 80043de:	4640      	mov	r0, r8
 80043e0:	f7ff fd20 	bl	8003e24 <_free_r>
 80043e4:	e7e1      	b.n	80043aa <_realloc_r+0x1e>
 80043e6:	4635      	mov	r5, r6
 80043e8:	e7df      	b.n	80043aa <_realloc_r+0x1e>

080043ea <__sfputc_r>:
 80043ea:	6893      	ldr	r3, [r2, #8]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	b410      	push	{r4}
 80043f2:	6093      	str	r3, [r2, #8]
 80043f4:	da08      	bge.n	8004408 <__sfputc_r+0x1e>
 80043f6:	6994      	ldr	r4, [r2, #24]
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	db01      	blt.n	8004400 <__sfputc_r+0x16>
 80043fc:	290a      	cmp	r1, #10
 80043fe:	d103      	bne.n	8004408 <__sfputc_r+0x1e>
 8004400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004404:	f000 b94a 	b.w	800469c <__swbuf_r>
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	1c58      	adds	r0, r3, #1
 800440c:	6010      	str	r0, [r2, #0]
 800440e:	7019      	strb	r1, [r3, #0]
 8004410:	4608      	mov	r0, r1
 8004412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004416:	4770      	bx	lr

08004418 <__sfputs_r>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	4606      	mov	r6, r0
 800441c:	460f      	mov	r7, r1
 800441e:	4614      	mov	r4, r2
 8004420:	18d5      	adds	r5, r2, r3
 8004422:	42ac      	cmp	r4, r5
 8004424:	d101      	bne.n	800442a <__sfputs_r+0x12>
 8004426:	2000      	movs	r0, #0
 8004428:	e007      	b.n	800443a <__sfputs_r+0x22>
 800442a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442e:	463a      	mov	r2, r7
 8004430:	4630      	mov	r0, r6
 8004432:	f7ff ffda 	bl	80043ea <__sfputc_r>
 8004436:	1c43      	adds	r3, r0, #1
 8004438:	d1f3      	bne.n	8004422 <__sfputs_r+0xa>
 800443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800443c <_vfiprintf_r>:
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	460d      	mov	r5, r1
 8004442:	b09d      	sub	sp, #116	; 0x74
 8004444:	4614      	mov	r4, r2
 8004446:	4698      	mov	r8, r3
 8004448:	4606      	mov	r6, r0
 800444a:	b118      	cbz	r0, 8004454 <_vfiprintf_r+0x18>
 800444c:	6983      	ldr	r3, [r0, #24]
 800444e:	b90b      	cbnz	r3, 8004454 <_vfiprintf_r+0x18>
 8004450:	f000 fb14 	bl	8004a7c <__sinit>
 8004454:	4b89      	ldr	r3, [pc, #548]	; (800467c <_vfiprintf_r+0x240>)
 8004456:	429d      	cmp	r5, r3
 8004458:	d11b      	bne.n	8004492 <_vfiprintf_r+0x56>
 800445a:	6875      	ldr	r5, [r6, #4]
 800445c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445e:	07d9      	lsls	r1, r3, #31
 8004460:	d405      	bmi.n	800446e <_vfiprintf_r+0x32>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	059a      	lsls	r2, r3, #22
 8004466:	d402      	bmi.n	800446e <_vfiprintf_r+0x32>
 8004468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800446a:	f000 fba5 	bl	8004bb8 <__retarget_lock_acquire_recursive>
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	d501      	bpl.n	8004478 <_vfiprintf_r+0x3c>
 8004474:	692b      	ldr	r3, [r5, #16]
 8004476:	b9eb      	cbnz	r3, 80044b4 <_vfiprintf_r+0x78>
 8004478:	4629      	mov	r1, r5
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f96e 	bl	800475c <__swsetup_r>
 8004480:	b1c0      	cbz	r0, 80044b4 <_vfiprintf_r+0x78>
 8004482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004484:	07dc      	lsls	r4, r3, #31
 8004486:	d50e      	bpl.n	80044a6 <_vfiprintf_r+0x6a>
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	b01d      	add	sp, #116	; 0x74
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004492:	4b7b      	ldr	r3, [pc, #492]	; (8004680 <_vfiprintf_r+0x244>)
 8004494:	429d      	cmp	r5, r3
 8004496:	d101      	bne.n	800449c <_vfiprintf_r+0x60>
 8004498:	68b5      	ldr	r5, [r6, #8]
 800449a:	e7df      	b.n	800445c <_vfiprintf_r+0x20>
 800449c:	4b79      	ldr	r3, [pc, #484]	; (8004684 <_vfiprintf_r+0x248>)
 800449e:	429d      	cmp	r5, r3
 80044a0:	bf08      	it	eq
 80044a2:	68f5      	ldreq	r5, [r6, #12]
 80044a4:	e7da      	b.n	800445c <_vfiprintf_r+0x20>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	0598      	lsls	r0, r3, #22
 80044aa:	d4ed      	bmi.n	8004488 <_vfiprintf_r+0x4c>
 80044ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ae:	f000 fb84 	bl	8004bba <__retarget_lock_release_recursive>
 80044b2:	e7e9      	b.n	8004488 <_vfiprintf_r+0x4c>
 80044b4:	2300      	movs	r3, #0
 80044b6:	9309      	str	r3, [sp, #36]	; 0x24
 80044b8:	2320      	movs	r3, #32
 80044ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044be:	f8cd 800c 	str.w	r8, [sp, #12]
 80044c2:	2330      	movs	r3, #48	; 0x30
 80044c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004688 <_vfiprintf_r+0x24c>
 80044c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044cc:	f04f 0901 	mov.w	r9, #1
 80044d0:	4623      	mov	r3, r4
 80044d2:	469a      	mov	sl, r3
 80044d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044d8:	b10a      	cbz	r2, 80044de <_vfiprintf_r+0xa2>
 80044da:	2a25      	cmp	r2, #37	; 0x25
 80044dc:	d1f9      	bne.n	80044d2 <_vfiprintf_r+0x96>
 80044de:	ebba 0b04 	subs.w	fp, sl, r4
 80044e2:	d00b      	beq.n	80044fc <_vfiprintf_r+0xc0>
 80044e4:	465b      	mov	r3, fp
 80044e6:	4622      	mov	r2, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7ff ff94 	bl	8004418 <__sfputs_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	f000 80aa 	beq.w	800464a <_vfiprintf_r+0x20e>
 80044f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044f8:	445a      	add	r2, fp
 80044fa:	9209      	str	r2, [sp, #36]	; 0x24
 80044fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a2 	beq.w	800464a <_vfiprintf_r+0x20e>
 8004506:	2300      	movs	r3, #0
 8004508:	f04f 32ff 	mov.w	r2, #4294967295
 800450c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004510:	f10a 0a01 	add.w	sl, sl, #1
 8004514:	9304      	str	r3, [sp, #16]
 8004516:	9307      	str	r3, [sp, #28]
 8004518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800451c:	931a      	str	r3, [sp, #104]	; 0x68
 800451e:	4654      	mov	r4, sl
 8004520:	2205      	movs	r2, #5
 8004522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004526:	4858      	ldr	r0, [pc, #352]	; (8004688 <_vfiprintf_r+0x24c>)
 8004528:	f7fb fe62 	bl	80001f0 <memchr>
 800452c:	9a04      	ldr	r2, [sp, #16]
 800452e:	b9d8      	cbnz	r0, 8004568 <_vfiprintf_r+0x12c>
 8004530:	06d1      	lsls	r1, r2, #27
 8004532:	bf44      	itt	mi
 8004534:	2320      	movmi	r3, #32
 8004536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453a:	0713      	lsls	r3, r2, #28
 800453c:	bf44      	itt	mi
 800453e:	232b      	movmi	r3, #43	; 0x2b
 8004540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004544:	f89a 3000 	ldrb.w	r3, [sl]
 8004548:	2b2a      	cmp	r3, #42	; 0x2a
 800454a:	d015      	beq.n	8004578 <_vfiprintf_r+0x13c>
 800454c:	9a07      	ldr	r2, [sp, #28]
 800454e:	4654      	mov	r4, sl
 8004550:	2000      	movs	r0, #0
 8004552:	f04f 0c0a 	mov.w	ip, #10
 8004556:	4621      	mov	r1, r4
 8004558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455c:	3b30      	subs	r3, #48	; 0x30
 800455e:	2b09      	cmp	r3, #9
 8004560:	d94e      	bls.n	8004600 <_vfiprintf_r+0x1c4>
 8004562:	b1b0      	cbz	r0, 8004592 <_vfiprintf_r+0x156>
 8004564:	9207      	str	r2, [sp, #28]
 8004566:	e014      	b.n	8004592 <_vfiprintf_r+0x156>
 8004568:	eba0 0308 	sub.w	r3, r0, r8
 800456c:	fa09 f303 	lsl.w	r3, r9, r3
 8004570:	4313      	orrs	r3, r2
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	46a2      	mov	sl, r4
 8004576:	e7d2      	b.n	800451e <_vfiprintf_r+0xe2>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	1d19      	adds	r1, r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	9103      	str	r1, [sp, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfbb      	ittet	lt
 8004584:	425b      	neglt	r3, r3
 8004586:	f042 0202 	orrlt.w	r2, r2, #2
 800458a:	9307      	strge	r3, [sp, #28]
 800458c:	9307      	strlt	r3, [sp, #28]
 800458e:	bfb8      	it	lt
 8004590:	9204      	strlt	r2, [sp, #16]
 8004592:	7823      	ldrb	r3, [r4, #0]
 8004594:	2b2e      	cmp	r3, #46	; 0x2e
 8004596:	d10c      	bne.n	80045b2 <_vfiprintf_r+0x176>
 8004598:	7863      	ldrb	r3, [r4, #1]
 800459a:	2b2a      	cmp	r3, #42	; 0x2a
 800459c:	d135      	bne.n	800460a <_vfiprintf_r+0x1ce>
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	9203      	str	r2, [sp, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfb8      	it	lt
 80045aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80045ae:	3402      	adds	r4, #2
 80045b0:	9305      	str	r3, [sp, #20]
 80045b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004698 <_vfiprintf_r+0x25c>
 80045b6:	7821      	ldrb	r1, [r4, #0]
 80045b8:	2203      	movs	r2, #3
 80045ba:	4650      	mov	r0, sl
 80045bc:	f7fb fe18 	bl	80001f0 <memchr>
 80045c0:	b140      	cbz	r0, 80045d4 <_vfiprintf_r+0x198>
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	eba0 000a 	sub.w	r0, r0, sl
 80045c8:	fa03 f000 	lsl.w	r0, r3, r0
 80045cc:	9b04      	ldr	r3, [sp, #16]
 80045ce:	4303      	orrs	r3, r0
 80045d0:	3401      	adds	r4, #1
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	482c      	ldr	r0, [pc, #176]	; (800468c <_vfiprintf_r+0x250>)
 80045da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045de:	2206      	movs	r2, #6
 80045e0:	f7fb fe06 	bl	80001f0 <memchr>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d03f      	beq.n	8004668 <_vfiprintf_r+0x22c>
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <_vfiprintf_r+0x254>)
 80045ea:	bb1b      	cbnz	r3, 8004634 <_vfiprintf_r+0x1f8>
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	3307      	adds	r3, #7
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	3308      	adds	r3, #8
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	443b      	add	r3, r7
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	e767      	b.n	80044d0 <_vfiprintf_r+0x94>
 8004600:	fb0c 3202 	mla	r2, ip, r2, r3
 8004604:	460c      	mov	r4, r1
 8004606:	2001      	movs	r0, #1
 8004608:	e7a5      	b.n	8004556 <_vfiprintf_r+0x11a>
 800460a:	2300      	movs	r3, #0
 800460c:	3401      	adds	r4, #1
 800460e:	9305      	str	r3, [sp, #20]
 8004610:	4619      	mov	r1, r3
 8004612:	f04f 0c0a 	mov.w	ip, #10
 8004616:	4620      	mov	r0, r4
 8004618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461c:	3a30      	subs	r2, #48	; 0x30
 800461e:	2a09      	cmp	r2, #9
 8004620:	d903      	bls.n	800462a <_vfiprintf_r+0x1ee>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0c5      	beq.n	80045b2 <_vfiprintf_r+0x176>
 8004626:	9105      	str	r1, [sp, #20]
 8004628:	e7c3      	b.n	80045b2 <_vfiprintf_r+0x176>
 800462a:	fb0c 2101 	mla	r1, ip, r1, r2
 800462e:	4604      	mov	r4, r0
 8004630:	2301      	movs	r3, #1
 8004632:	e7f0      	b.n	8004616 <_vfiprintf_r+0x1da>
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <_vfiprintf_r+0x258>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	4630      	mov	r0, r6
 8004640:	f7fd fdd6 	bl	80021f0 <_printf_float>
 8004644:	4607      	mov	r7, r0
 8004646:	1c78      	adds	r0, r7, #1
 8004648:	d1d6      	bne.n	80045f8 <_vfiprintf_r+0x1bc>
 800464a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800464c:	07d9      	lsls	r1, r3, #31
 800464e:	d405      	bmi.n	800465c <_vfiprintf_r+0x220>
 8004650:	89ab      	ldrh	r3, [r5, #12]
 8004652:	059a      	lsls	r2, r3, #22
 8004654:	d402      	bmi.n	800465c <_vfiprintf_r+0x220>
 8004656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004658:	f000 faaf 	bl	8004bba <__retarget_lock_release_recursive>
 800465c:	89ab      	ldrh	r3, [r5, #12]
 800465e:	065b      	lsls	r3, r3, #25
 8004660:	f53f af12 	bmi.w	8004488 <_vfiprintf_r+0x4c>
 8004664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004666:	e711      	b.n	800448c <_vfiprintf_r+0x50>
 8004668:	ab03      	add	r3, sp, #12
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	462a      	mov	r2, r5
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <_vfiprintf_r+0x258>)
 8004670:	a904      	add	r1, sp, #16
 8004672:	4630      	mov	r0, r6
 8004674:	f7fe f860 	bl	8002738 <_printf_i>
 8004678:	e7e4      	b.n	8004644 <_vfiprintf_r+0x208>
 800467a:	bf00      	nop
 800467c:	0800525c 	.word	0x0800525c
 8004680:	0800527c 	.word	0x0800527c
 8004684:	0800523c 	.word	0x0800523c
 8004688:	080050e4 	.word	0x080050e4
 800468c:	080050ee 	.word	0x080050ee
 8004690:	080021f1 	.word	0x080021f1
 8004694:	08004419 	.word	0x08004419
 8004698:	080050ea 	.word	0x080050ea

0800469c <__swbuf_r>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	460e      	mov	r6, r1
 80046a0:	4614      	mov	r4, r2
 80046a2:	4605      	mov	r5, r0
 80046a4:	b118      	cbz	r0, 80046ae <__swbuf_r+0x12>
 80046a6:	6983      	ldr	r3, [r0, #24]
 80046a8:	b90b      	cbnz	r3, 80046ae <__swbuf_r+0x12>
 80046aa:	f000 f9e7 	bl	8004a7c <__sinit>
 80046ae:	4b21      	ldr	r3, [pc, #132]	; (8004734 <__swbuf_r+0x98>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d12b      	bne.n	800470c <__swbuf_r+0x70>
 80046b4:	686c      	ldr	r4, [r5, #4]
 80046b6:	69a3      	ldr	r3, [r4, #24]
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	071a      	lsls	r2, r3, #28
 80046be:	d52f      	bpl.n	8004720 <__swbuf_r+0x84>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	b36b      	cbz	r3, 8004720 <__swbuf_r+0x84>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	1ac0      	subs	r0, r0, r3
 80046ca:	6963      	ldr	r3, [r4, #20]
 80046cc:	b2f6      	uxtb	r6, r6
 80046ce:	4283      	cmp	r3, r0
 80046d0:	4637      	mov	r7, r6
 80046d2:	dc04      	bgt.n	80046de <__swbuf_r+0x42>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 f93c 	bl	8004954 <_fflush_r>
 80046dc:	bb30      	cbnz	r0, 800472c <__swbuf_r+0x90>
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60a3      	str	r3, [r4, #8]
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	6022      	str	r2, [r4, #0]
 80046ea:	701e      	strb	r6, [r3, #0]
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	3001      	adds	r0, #1
 80046f0:	4283      	cmp	r3, r0
 80046f2:	d004      	beq.n	80046fe <__swbuf_r+0x62>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	07db      	lsls	r3, r3, #31
 80046f8:	d506      	bpl.n	8004708 <__swbuf_r+0x6c>
 80046fa:	2e0a      	cmp	r6, #10
 80046fc:	d104      	bne.n	8004708 <__swbuf_r+0x6c>
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	f000 f927 	bl	8004954 <_fflush_r>
 8004706:	b988      	cbnz	r0, 800472c <__swbuf_r+0x90>
 8004708:	4638      	mov	r0, r7
 800470a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <__swbuf_r+0x9c>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d101      	bne.n	8004716 <__swbuf_r+0x7a>
 8004712:	68ac      	ldr	r4, [r5, #8]
 8004714:	e7cf      	b.n	80046b6 <__swbuf_r+0x1a>
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <__swbuf_r+0xa0>)
 8004718:	429c      	cmp	r4, r3
 800471a:	bf08      	it	eq
 800471c:	68ec      	ldreq	r4, [r5, #12]
 800471e:	e7ca      	b.n	80046b6 <__swbuf_r+0x1a>
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f81a 	bl	800475c <__swsetup_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	d0cb      	beq.n	80046c4 <__swbuf_r+0x28>
 800472c:	f04f 37ff 	mov.w	r7, #4294967295
 8004730:	e7ea      	b.n	8004708 <__swbuf_r+0x6c>
 8004732:	bf00      	nop
 8004734:	0800525c 	.word	0x0800525c
 8004738:	0800527c 	.word	0x0800527c
 800473c:	0800523c 	.word	0x0800523c

08004740 <__ascii_wctomb>:
 8004740:	b149      	cbz	r1, 8004756 <__ascii_wctomb+0x16>
 8004742:	2aff      	cmp	r2, #255	; 0xff
 8004744:	bf85      	ittet	hi
 8004746:	238a      	movhi	r3, #138	; 0x8a
 8004748:	6003      	strhi	r3, [r0, #0]
 800474a:	700a      	strbls	r2, [r1, #0]
 800474c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004750:	bf98      	it	ls
 8004752:	2001      	movls	r0, #1
 8004754:	4770      	bx	lr
 8004756:	4608      	mov	r0, r1
 8004758:	4770      	bx	lr
	...

0800475c <__swsetup_r>:
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <__swsetup_r+0xcc>)
 800475e:	b570      	push	{r4, r5, r6, lr}
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	b125      	cbz	r5, 8004772 <__swsetup_r+0x16>
 8004768:	69ab      	ldr	r3, [r5, #24]
 800476a:	b913      	cbnz	r3, 8004772 <__swsetup_r+0x16>
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f985 	bl	8004a7c <__sinit>
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <__swsetup_r+0xd0>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d10f      	bne.n	8004798 <__swsetup_r+0x3c>
 8004778:	686c      	ldr	r4, [r5, #4]
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004780:	0719      	lsls	r1, r3, #28
 8004782:	d42c      	bmi.n	80047de <__swsetup_r+0x82>
 8004784:	06dd      	lsls	r5, r3, #27
 8004786:	d411      	bmi.n	80047ac <__swsetup_r+0x50>
 8004788:	2309      	movs	r3, #9
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	e03e      	b.n	8004816 <__swsetup_r+0xba>
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <__swsetup_r+0xd4>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <__swsetup_r+0x46>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7eb      	b.n	800477a <__swsetup_r+0x1e>
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <__swsetup_r+0xd8>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7e6      	b.n	800477a <__swsetup_r+0x1e>
 80047ac:	0758      	lsls	r0, r3, #29
 80047ae:	d512      	bpl.n	80047d6 <__swsetup_r+0x7a>
 80047b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b2:	b141      	cbz	r1, 80047c6 <__swsetup_r+0x6a>
 80047b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d002      	beq.n	80047c2 <__swsetup_r+0x66>
 80047bc:	4630      	mov	r0, r6
 80047be:	f7ff fb31 	bl	8003e24 <_free_r>
 80047c2:	2300      	movs	r3, #0
 80047c4:	6363      	str	r3, [r4, #52]	; 0x34
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	2300      	movs	r3, #0
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f043 0308 	orr.w	r3, r3, #8
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	b94b      	cbnz	r3, 80047f6 <__swsetup_r+0x9a>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d003      	beq.n	80047f6 <__swsetup_r+0x9a>
 80047ee:	4621      	mov	r1, r4
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 fa09 	bl	8004c08 <__smakebuf_r>
 80047f6:	89a0      	ldrh	r0, [r4, #12]
 80047f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047fc:	f010 0301 	ands.w	r3, r0, #1
 8004800:	d00a      	beq.n	8004818 <__swsetup_r+0xbc>
 8004802:	2300      	movs	r3, #0
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	425b      	negs	r3, r3
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b943      	cbnz	r3, 8004822 <__swsetup_r+0xc6>
 8004810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004814:	d1ba      	bne.n	800478c <__swsetup_r+0x30>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	0781      	lsls	r1, r0, #30
 800481a:	bf58      	it	pl
 800481c:	6963      	ldrpl	r3, [r4, #20]
 800481e:	60a3      	str	r3, [r4, #8]
 8004820:	e7f4      	b.n	800480c <__swsetup_r+0xb0>
 8004822:	2000      	movs	r0, #0
 8004824:	e7f7      	b.n	8004816 <__swsetup_r+0xba>
 8004826:	bf00      	nop
 8004828:	2000000c 	.word	0x2000000c
 800482c:	0800525c 	.word	0x0800525c
 8004830:	0800527c 	.word	0x0800527c
 8004834:	0800523c 	.word	0x0800523c

08004838 <abort>:
 8004838:	b508      	push	{r3, lr}
 800483a:	2006      	movs	r0, #6
 800483c:	f000 fa54 	bl	8004ce8 <raise>
 8004840:	2001      	movs	r0, #1
 8004842:	f7fc fbbb 	bl	8000fbc <_exit>
	...

08004848 <__sflush_r>:
 8004848:	898a      	ldrh	r2, [r1, #12]
 800484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	0710      	lsls	r0, r2, #28
 8004852:	460c      	mov	r4, r1
 8004854:	d458      	bmi.n	8004908 <__sflush_r+0xc0>
 8004856:	684b      	ldr	r3, [r1, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	dc05      	bgt.n	8004868 <__sflush_r+0x20>
 800485c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	dc02      	bgt.n	8004868 <__sflush_r+0x20>
 8004862:	2000      	movs	r0, #0
 8004864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486a:	2e00      	cmp	r6, #0
 800486c:	d0f9      	beq.n	8004862 <__sflush_r+0x1a>
 800486e:	2300      	movs	r3, #0
 8004870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004874:	682f      	ldr	r7, [r5, #0]
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	d032      	beq.n	80048e0 <__sflush_r+0x98>
 800487a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	075a      	lsls	r2, r3, #29
 8004880:	d505      	bpl.n	800488e <__sflush_r+0x46>
 8004882:	6863      	ldr	r3, [r4, #4]
 8004884:	1ac0      	subs	r0, r0, r3
 8004886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004888:	b10b      	cbz	r3, 800488e <__sflush_r+0x46>
 800488a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800488c:	1ac0      	subs	r0, r0, r3
 800488e:	2300      	movs	r3, #0
 8004890:	4602      	mov	r2, r0
 8004892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004894:	6a21      	ldr	r1, [r4, #32]
 8004896:	4628      	mov	r0, r5
 8004898:	47b0      	blx	r6
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	d106      	bne.n	80048ae <__sflush_r+0x66>
 80048a0:	6829      	ldr	r1, [r5, #0]
 80048a2:	291d      	cmp	r1, #29
 80048a4:	d82c      	bhi.n	8004900 <__sflush_r+0xb8>
 80048a6:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <__sflush_r+0x108>)
 80048a8:	40ca      	lsrs	r2, r1
 80048aa:	07d6      	lsls	r6, r2, #31
 80048ac:	d528      	bpl.n	8004900 <__sflush_r+0xb8>
 80048ae:	2200      	movs	r2, #0
 80048b0:	6062      	str	r2, [r4, #4]
 80048b2:	04d9      	lsls	r1, r3, #19
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	d504      	bpl.n	80048c4 <__sflush_r+0x7c>
 80048ba:	1c42      	adds	r2, r0, #1
 80048bc:	d101      	bne.n	80048c2 <__sflush_r+0x7a>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	b903      	cbnz	r3, 80048c4 <__sflush_r+0x7c>
 80048c2:	6560      	str	r0, [r4, #84]	; 0x54
 80048c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c6:	602f      	str	r7, [r5, #0]
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d0ca      	beq.n	8004862 <__sflush_r+0x1a>
 80048cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d0:	4299      	cmp	r1, r3
 80048d2:	d002      	beq.n	80048da <__sflush_r+0x92>
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7ff faa5 	bl	8003e24 <_free_r>
 80048da:	2000      	movs	r0, #0
 80048dc:	6360      	str	r0, [r4, #52]	; 0x34
 80048de:	e7c1      	b.n	8004864 <__sflush_r+0x1c>
 80048e0:	6a21      	ldr	r1, [r4, #32]
 80048e2:	2301      	movs	r3, #1
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	1c41      	adds	r1, r0, #1
 80048ea:	d1c7      	bne.n	800487c <__sflush_r+0x34>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0c4      	beq.n	800487c <__sflush_r+0x34>
 80048f2:	2b1d      	cmp	r3, #29
 80048f4:	d001      	beq.n	80048fa <__sflush_r+0xb2>
 80048f6:	2b16      	cmp	r3, #22
 80048f8:	d101      	bne.n	80048fe <__sflush_r+0xb6>
 80048fa:	602f      	str	r7, [r5, #0]
 80048fc:	e7b1      	b.n	8004862 <__sflush_r+0x1a>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	e7ad      	b.n	8004864 <__sflush_r+0x1c>
 8004908:	690f      	ldr	r7, [r1, #16]
 800490a:	2f00      	cmp	r7, #0
 800490c:	d0a9      	beq.n	8004862 <__sflush_r+0x1a>
 800490e:	0793      	lsls	r3, r2, #30
 8004910:	680e      	ldr	r6, [r1, #0]
 8004912:	bf08      	it	eq
 8004914:	694b      	ldreq	r3, [r1, #20]
 8004916:	600f      	str	r7, [r1, #0]
 8004918:	bf18      	it	ne
 800491a:	2300      	movne	r3, #0
 800491c:	eba6 0807 	sub.w	r8, r6, r7
 8004920:	608b      	str	r3, [r1, #8]
 8004922:	f1b8 0f00 	cmp.w	r8, #0
 8004926:	dd9c      	ble.n	8004862 <__sflush_r+0x1a>
 8004928:	6a21      	ldr	r1, [r4, #32]
 800492a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800492c:	4643      	mov	r3, r8
 800492e:	463a      	mov	r2, r7
 8004930:	4628      	mov	r0, r5
 8004932:	47b0      	blx	r6
 8004934:	2800      	cmp	r0, #0
 8004936:	dc06      	bgt.n	8004946 <__sflush_r+0xfe>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	e78e      	b.n	8004864 <__sflush_r+0x1c>
 8004946:	4407      	add	r7, r0
 8004948:	eba8 0800 	sub.w	r8, r8, r0
 800494c:	e7e9      	b.n	8004922 <__sflush_r+0xda>
 800494e:	bf00      	nop
 8004950:	20400001 	.word	0x20400001

08004954 <_fflush_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b913      	cbnz	r3, 8004964 <_fflush_r+0x10>
 800495e:	2500      	movs	r5, #0
 8004960:	4628      	mov	r0, r5
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	b118      	cbz	r0, 800496e <_fflush_r+0x1a>
 8004966:	6983      	ldr	r3, [r0, #24]
 8004968:	b90b      	cbnz	r3, 800496e <_fflush_r+0x1a>
 800496a:	f000 f887 	bl	8004a7c <__sinit>
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <_fflush_r+0x6c>)
 8004970:	429c      	cmp	r4, r3
 8004972:	d11b      	bne.n	80049ac <_fflush_r+0x58>
 8004974:	686c      	ldr	r4, [r5, #4]
 8004976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ef      	beq.n	800495e <_fflush_r+0xa>
 800497e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004980:	07d0      	lsls	r0, r2, #31
 8004982:	d404      	bmi.n	800498e <_fflush_r+0x3a>
 8004984:	0599      	lsls	r1, r3, #22
 8004986:	d402      	bmi.n	800498e <_fflush_r+0x3a>
 8004988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800498a:	f000 f915 	bl	8004bb8 <__retarget_lock_acquire_recursive>
 800498e:	4628      	mov	r0, r5
 8004990:	4621      	mov	r1, r4
 8004992:	f7ff ff59 	bl	8004848 <__sflush_r>
 8004996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004998:	07da      	lsls	r2, r3, #31
 800499a:	4605      	mov	r5, r0
 800499c:	d4e0      	bmi.n	8004960 <_fflush_r+0xc>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	059b      	lsls	r3, r3, #22
 80049a2:	d4dd      	bmi.n	8004960 <_fflush_r+0xc>
 80049a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a6:	f000 f908 	bl	8004bba <__retarget_lock_release_recursive>
 80049aa:	e7d9      	b.n	8004960 <_fflush_r+0xc>
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <_fflush_r+0x70>)
 80049ae:	429c      	cmp	r4, r3
 80049b0:	d101      	bne.n	80049b6 <_fflush_r+0x62>
 80049b2:	68ac      	ldr	r4, [r5, #8]
 80049b4:	e7df      	b.n	8004976 <_fflush_r+0x22>
 80049b6:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <_fflush_r+0x74>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	bf08      	it	eq
 80049bc:	68ec      	ldreq	r4, [r5, #12]
 80049be:	e7da      	b.n	8004976 <_fflush_r+0x22>
 80049c0:	0800525c 	.word	0x0800525c
 80049c4:	0800527c 	.word	0x0800527c
 80049c8:	0800523c 	.word	0x0800523c

080049cc <std>:
 80049cc:	2300      	movs	r3, #0
 80049ce:	b510      	push	{r4, lr}
 80049d0:	4604      	mov	r4, r0
 80049d2:	e9c0 3300 	strd	r3, r3, [r0]
 80049d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049da:	6083      	str	r3, [r0, #8]
 80049dc:	8181      	strh	r1, [r0, #12]
 80049de:	6643      	str	r3, [r0, #100]	; 0x64
 80049e0:	81c2      	strh	r2, [r0, #14]
 80049e2:	6183      	str	r3, [r0, #24]
 80049e4:	4619      	mov	r1, r3
 80049e6:	2208      	movs	r2, #8
 80049e8:	305c      	adds	r0, #92	; 0x5c
 80049ea:	f7fd fb59 	bl	80020a0 <memset>
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <std+0x38>)
 80049f0:	6263      	str	r3, [r4, #36]	; 0x24
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <std+0x3c>)
 80049f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <std+0x40>)
 80049f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <std+0x44>)
 80049fc:	6224      	str	r4, [r4, #32]
 80049fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	08004d21 	.word	0x08004d21
 8004a08:	08004d43 	.word	0x08004d43
 8004a0c:	08004d7b 	.word	0x08004d7b
 8004a10:	08004d9f 	.word	0x08004d9f

08004a14 <_cleanup_r>:
 8004a14:	4901      	ldr	r1, [pc, #4]	; (8004a1c <_cleanup_r+0x8>)
 8004a16:	f000 b8af 	b.w	8004b78 <_fwalk_reent>
 8004a1a:	bf00      	nop
 8004a1c:	08004955 	.word	0x08004955

08004a20 <__sfmoreglue>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	2268      	movs	r2, #104	; 0x68
 8004a24:	1e4d      	subs	r5, r1, #1
 8004a26:	4355      	muls	r5, r2
 8004a28:	460e      	mov	r6, r1
 8004a2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a2e:	f7ff fa65 	bl	8003efc <_malloc_r>
 8004a32:	4604      	mov	r4, r0
 8004a34:	b140      	cbz	r0, 8004a48 <__sfmoreglue+0x28>
 8004a36:	2100      	movs	r1, #0
 8004a38:	e9c0 1600 	strd	r1, r6, [r0]
 8004a3c:	300c      	adds	r0, #12
 8004a3e:	60a0      	str	r0, [r4, #8]
 8004a40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a44:	f7fd fb2c 	bl	80020a0 <memset>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}

08004a4c <__sfp_lock_acquire>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sfp_lock_acquire+0x8>)
 8004a4e:	f000 b8b3 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	20000261 	.word	0x20000261

08004a58 <__sfp_lock_release>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sfp_lock_release+0x8>)
 8004a5a:	f000 b8ae 	b.w	8004bba <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20000261 	.word	0x20000261

08004a64 <__sinit_lock_acquire>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sinit_lock_acquire+0x8>)
 8004a66:	f000 b8a7 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000262 	.word	0x20000262

08004a70 <__sinit_lock_release>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__sinit_lock_release+0x8>)
 8004a72:	f000 b8a2 	b.w	8004bba <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	20000262 	.word	0x20000262

08004a7c <__sinit>:
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4604      	mov	r4, r0
 8004a80:	f7ff fff0 	bl	8004a64 <__sinit_lock_acquire>
 8004a84:	69a3      	ldr	r3, [r4, #24]
 8004a86:	b11b      	cbz	r3, 8004a90 <__sinit+0x14>
 8004a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a8c:	f7ff bff0 	b.w	8004a70 <__sinit_lock_release>
 8004a90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a94:	6523      	str	r3, [r4, #80]	; 0x50
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <__sinit+0x68>)
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <__sinit+0x6c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	bf04      	itt	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	61a3      	streq	r3, [r4, #24]
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f820 	bl	8004aec <__sfp>
 8004aac:	6060      	str	r0, [r4, #4]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f81c 	bl	8004aec <__sfp>
 8004ab4:	60a0      	str	r0, [r4, #8]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f818 	bl	8004aec <__sfp>
 8004abc:	2200      	movs	r2, #0
 8004abe:	60e0      	str	r0, [r4, #12]
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	6860      	ldr	r0, [r4, #4]
 8004ac4:	f7ff ff82 	bl	80049cc <std>
 8004ac8:	68a0      	ldr	r0, [r4, #8]
 8004aca:	2201      	movs	r2, #1
 8004acc:	2109      	movs	r1, #9
 8004ace:	f7ff ff7d 	bl	80049cc <std>
 8004ad2:	68e0      	ldr	r0, [r4, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	2112      	movs	r1, #18
 8004ad8:	f7ff ff78 	bl	80049cc <std>
 8004adc:	2301      	movs	r3, #1
 8004ade:	61a3      	str	r3, [r4, #24]
 8004ae0:	e7d2      	b.n	8004a88 <__sinit+0xc>
 8004ae2:	bf00      	nop
 8004ae4:	08004ec0 	.word	0x08004ec0
 8004ae8:	08004a15 	.word	0x08004a15

08004aec <__sfp>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	4607      	mov	r7, r0
 8004af0:	f7ff ffac 	bl	8004a4c <__sfp_lock_acquire>
 8004af4:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <__sfp+0x84>)
 8004af6:	681e      	ldr	r6, [r3, #0]
 8004af8:	69b3      	ldr	r3, [r6, #24]
 8004afa:	b913      	cbnz	r3, 8004b02 <__sfp+0x16>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f7ff ffbd 	bl	8004a7c <__sinit>
 8004b02:	3648      	adds	r6, #72	; 0x48
 8004b04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	d503      	bpl.n	8004b14 <__sfp+0x28>
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	b30b      	cbz	r3, 8004b54 <__sfp+0x68>
 8004b10:	6836      	ldr	r6, [r6, #0]
 8004b12:	e7f7      	b.n	8004b04 <__sfp+0x18>
 8004b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b18:	b9d5      	cbnz	r5, 8004b50 <__sfp+0x64>
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <__sfp+0x88>)
 8004b1c:	60e3      	str	r3, [r4, #12]
 8004b1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b22:	6665      	str	r5, [r4, #100]	; 0x64
 8004b24:	f000 f847 	bl	8004bb6 <__retarget_lock_init_recursive>
 8004b28:	f7ff ff96 	bl	8004a58 <__sfp_lock_release>
 8004b2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b34:	6025      	str	r5, [r4, #0]
 8004b36:	61a5      	str	r5, [r4, #24]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b40:	f7fd faae 	bl	80020a0 <memset>
 8004b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b50:	3468      	adds	r4, #104	; 0x68
 8004b52:	e7d9      	b.n	8004b08 <__sfp+0x1c>
 8004b54:	2104      	movs	r1, #4
 8004b56:	4638      	mov	r0, r7
 8004b58:	f7ff ff62 	bl	8004a20 <__sfmoreglue>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	6030      	str	r0, [r6, #0]
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1d5      	bne.n	8004b10 <__sfp+0x24>
 8004b64:	f7ff ff78 	bl	8004a58 <__sfp_lock_release>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	e7ee      	b.n	8004b4c <__sfp+0x60>
 8004b6e:	bf00      	nop
 8004b70:	08004ec0 	.word	0x08004ec0
 8004b74:	ffff0001 	.word	0xffff0001

08004b78 <_fwalk_reent>:
 8004b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	4688      	mov	r8, r1
 8004b80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b84:	2700      	movs	r7, #0
 8004b86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004b8e:	d505      	bpl.n	8004b9c <_fwalk_reent+0x24>
 8004b90:	6824      	ldr	r4, [r4, #0]
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d1f7      	bne.n	8004b86 <_fwalk_reent+0xe>
 8004b96:	4638      	mov	r0, r7
 8004b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9c:	89ab      	ldrh	r3, [r5, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d907      	bls.n	8004bb2 <_fwalk_reent+0x3a>
 8004ba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	d003      	beq.n	8004bb2 <_fwalk_reent+0x3a>
 8004baa:	4629      	mov	r1, r5
 8004bac:	4630      	mov	r0, r6
 8004bae:	47c0      	blx	r8
 8004bb0:	4307      	orrs	r7, r0
 8004bb2:	3568      	adds	r5, #104	; 0x68
 8004bb4:	e7e9      	b.n	8004b8a <_fwalk_reent+0x12>

08004bb6 <__retarget_lock_init_recursive>:
 8004bb6:	4770      	bx	lr

08004bb8 <__retarget_lock_acquire_recursive>:
 8004bb8:	4770      	bx	lr

08004bba <__retarget_lock_release_recursive>:
 8004bba:	4770      	bx	lr

08004bbc <__swhatbuf_r>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	460e      	mov	r6, r1
 8004bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	b096      	sub	sp, #88	; 0x58
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	da08      	bge.n	8004be0 <__swhatbuf_r+0x24>
 8004bce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	061a      	lsls	r2, r3, #24
 8004bd8:	d410      	bmi.n	8004bfc <__swhatbuf_r+0x40>
 8004bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bde:	e00e      	b.n	8004bfe <__swhatbuf_r+0x42>
 8004be0:	466a      	mov	r2, sp
 8004be2:	f000 f903 	bl	8004dec <_fstat_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	dbf1      	blt.n	8004bce <__swhatbuf_r+0x12>
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bf4:	425a      	negs	r2, r3
 8004bf6:	415a      	adcs	r2, r3
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	e7ee      	b.n	8004bda <__swhatbuf_r+0x1e>
 8004bfc:	2340      	movs	r3, #64	; 0x40
 8004bfe:	2000      	movs	r0, #0
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	b016      	add	sp, #88	; 0x58
 8004c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c08 <__smakebuf_r>:
 8004c08:	898b      	ldrh	r3, [r1, #12]
 8004c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c0c:	079d      	lsls	r5, r3, #30
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460c      	mov	r4, r1
 8004c12:	d507      	bpl.n	8004c24 <__smakebuf_r+0x1c>
 8004c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	6163      	str	r3, [r4, #20]
 8004c20:	b002      	add	sp, #8
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	ab01      	add	r3, sp, #4
 8004c26:	466a      	mov	r2, sp
 8004c28:	f7ff ffc8 	bl	8004bbc <__swhatbuf_r>
 8004c2c:	9900      	ldr	r1, [sp, #0]
 8004c2e:	4605      	mov	r5, r0
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7ff f963 	bl	8003efc <_malloc_r>
 8004c36:	b948      	cbnz	r0, 8004c4c <__smakebuf_r+0x44>
 8004c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3c:	059a      	lsls	r2, r3, #22
 8004c3e:	d4ef      	bmi.n	8004c20 <__smakebuf_r+0x18>
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	e7e3      	b.n	8004c14 <__smakebuf_r+0xc>
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <__smakebuf_r+0x7c>)
 8004c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	6020      	str	r0, [r4, #0]
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	6163      	str	r3, [r4, #20]
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	6120      	str	r0, [r4, #16]
 8004c62:	b15b      	cbz	r3, 8004c7c <__smakebuf_r+0x74>
 8004c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f8d1 	bl	8004e10 <_isatty_r>
 8004c6e:	b128      	cbz	r0, 8004c7c <__smakebuf_r+0x74>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	81a3      	strh	r3, [r4, #12]
 8004c7c:	89a0      	ldrh	r0, [r4, #12]
 8004c7e:	4305      	orrs	r5, r0
 8004c80:	81a5      	strh	r5, [r4, #12]
 8004c82:	e7cd      	b.n	8004c20 <__smakebuf_r+0x18>
 8004c84:	08004a15 	.word	0x08004a15

08004c88 <_malloc_usable_size_r>:
 8004c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8c:	1f18      	subs	r0, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfbc      	itt	lt
 8004c92:	580b      	ldrlt	r3, [r1, r0]
 8004c94:	18c0      	addlt	r0, r0, r3
 8004c96:	4770      	bx	lr

08004c98 <_raise_r>:
 8004c98:	291f      	cmp	r1, #31
 8004c9a:	b538      	push	{r3, r4, r5, lr}
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	d904      	bls.n	8004cac <_raise_r+0x14>
 8004ca2:	2316      	movs	r3, #22
 8004ca4:	6003      	str	r3, [r0, #0]
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004cae:	b112      	cbz	r2, 8004cb6 <_raise_r+0x1e>
 8004cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cb4:	b94b      	cbnz	r3, 8004cca <_raise_r+0x32>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 f830 	bl	8004d1c <_getpid_r>
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc6:	f000 b817 	b.w	8004cf8 <_kill_r>
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00a      	beq.n	8004ce4 <_raise_r+0x4c>
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	d103      	bne.n	8004cda <_raise_r+0x42>
 8004cd2:	2316      	movs	r3, #22
 8004cd4:	6003      	str	r3, [r0, #0]
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7e7      	b.n	8004caa <_raise_r+0x12>
 8004cda:	2400      	movs	r4, #0
 8004cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	4798      	blx	r3
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7e0      	b.n	8004caa <_raise_r+0x12>

08004ce8 <raise>:
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <raise+0xc>)
 8004cea:	4601      	mov	r1, r0
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f7ff bfd3 	b.w	8004c98 <_raise_r>
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c

08004cf8 <_kill_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	; (8004d18 <_kill_r+0x20>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f7fc f949 	bl	8000f9c <_kill>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d102      	bne.n	8004d14 <_kill_r+0x1c>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	b103      	cbz	r3, 8004d14 <_kill_r+0x1c>
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	2000025c 	.word	0x2000025c

08004d1c <_getpid_r>:
 8004d1c:	f7fc b936 	b.w	8000f8c <_getpid>

08004d20 <__sread>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	f000 f894 	bl	8004e54 <_read_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	bfab      	itete	ge
 8004d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d32:	89a3      	ldrhlt	r3, [r4, #12]
 8004d34:	181b      	addge	r3, r3, r0
 8004d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d3a:	bfac      	ite	ge
 8004d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d3e:	81a3      	strhlt	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__swrite>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	461f      	mov	r7, r3
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	05db      	lsls	r3, r3, #23
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	d505      	bpl.n	8004d60 <__swrite+0x1e>
 8004d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d58:	2302      	movs	r3, #2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f000 f868 	bl	8004e30 <_lseek_r>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	4628      	mov	r0, r5
 8004d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d76:	f000 b817 	b.w	8004da8 <_write_r>

08004d7a <__sseek>:
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 f855 	bl	8004e30 <_lseek_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	bf15      	itete	ne
 8004d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d96:	81a3      	strheq	r3, [r4, #12]
 8004d98:	bf18      	it	ne
 8004d9a:	81a3      	strhne	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__sclose>:
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 b813 	b.w	8004dcc <_close_r>
	...

08004da8 <_write_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_write_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fc f927 	bl	800100a <_write>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_write_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_write_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	2000025c 	.word	0x2000025c

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d06      	ldr	r5, [pc, #24]	; (8004de8 <_close_r+0x1c>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fc f933 	bl	8001042 <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	2000025c 	.word	0x2000025c

08004dec <_fstat_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	; (8004e0c <_fstat_r+0x20>)
 8004df0:	2300      	movs	r3, #0
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fc f92e 	bl	800105a <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_fstat_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_fstat_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000025c 	.word	0x2000025c

08004e10 <_isatty_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d06      	ldr	r5, [pc, #24]	; (8004e2c <_isatty_r+0x1c>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fc f92d 	bl	800107a <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_isatty_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_isatty_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	2000025c 	.word	0x2000025c

08004e30 <_lseek_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d07      	ldr	r5, [pc, #28]	; (8004e50 <_lseek_r+0x20>)
 8004e34:	4604      	mov	r4, r0
 8004e36:	4608      	mov	r0, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fc f926 	bl	8001090 <_lseek>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_lseek_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_lseek_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000025c 	.word	0x2000025c

08004e54 <_read_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d07      	ldr	r5, [pc, #28]	; (8004e74 <_read_r+0x20>)
 8004e58:	4604      	mov	r4, r0
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fc f8b4 	bl	8000fd0 <_read>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_read_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_read_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000025c 	.word	0x2000025c

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
